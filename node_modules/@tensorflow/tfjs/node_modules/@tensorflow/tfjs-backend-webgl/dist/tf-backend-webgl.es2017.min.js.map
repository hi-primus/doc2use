{"version":3,"file":"tf-backend-webgl.es2017.min.js","sources":["../../../../tfjs-backend-webgl/src/canvas_util.ts","../../../../tfjs-backend-webgl/src/tex_util.ts","../../../../tfjs-backend-webgl/src/webgl_util.ts","../../../../tfjs-backend-webgl/src/flags_webgl.ts","../../../../tfjs-backend-webgl/src/glsl_version.ts","../../../../tfjs-backend-webgl/src/shader_compiler_util.ts","../../../../tfjs-backend-webgl/src/shader_compiler.ts","../../../../tfjs-backend-webgl/src/gpgpu_math.ts","../../../../tfjs-backend-webgl/src/decode_matrix_gpu.ts","../../../../tfjs-backend-webgl/src/decode_matrix_packed_gpu.ts","../../../../tfjs-backend-webgl/src/encode_float_gpu.ts","../../../../tfjs-backend-webgl/src/encode_float_packed_gpu.ts","../../../../tfjs-backend-webgl/src/encode_matrix_gpu.ts","../../../../tfjs-backend-webgl/src/encode_matrix_packed_gpu.ts","../../../../tfjs-backend-webgl/src/gpgpu_util.ts","../../../../tfjs-backend-webgl/src/gpgpu_context.ts","../../../../../tfjs-backend-cpu/src/utils/binary_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Add.ts","../../../../../tfjs-backend-cpu/src/utils/unary_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Ceil.ts","../../../../../tfjs-backend-cpu/src/kernels/Equal.ts","../../../../../tfjs-backend-cpu/src/kernels/Exp.ts","../../../../../tfjs-backend-cpu/src/kernels/Expm1.ts","../../../../../tfjs-backend-cpu/src/kernels/Floor.ts","../../../../../tfjs-backend-cpu/src/kernels/FloorDiv.ts","../../../../../tfjs-backend-cpu/src/kernels/Greater.ts","../../../../../tfjs-backend-cpu/src/kernels/GreaterEqual.ts","../../../../../tfjs-backend-cpu/src/kernels/Less.ts","../../../../../tfjs-backend-cpu/src/kernels/LessEqual.ts","../../../../../tfjs-backend-cpu/src/kernels/Log.ts","../../../../../tfjs-backend-cpu/src/kernels/Maximum.ts","../../../../../tfjs-backend-cpu/src/kernels/Minimum.ts","../../../../../tfjs-backend-cpu/src/kernels/Multiply.ts","../../../../../tfjs-backend-cpu/src/kernels/NotEqual.ts","../../../../../tfjs-backend-cpu/src/kernels/RaggedGather_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/RaggedRange_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/RaggedTensorToTensor_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Rsqrt.ts","../../../../../tfjs-backend-cpu/src/kernels/Sigmoid.ts","../../../../../tfjs-backend-cpu/src/kernels/Sqrt.ts","../../../../../tfjs-backend-cpu/src/kernels/SquaredDifference.ts","../../../../../tfjs-backend-cpu/src/kernels/StaticRegexReplace.ts","../../../../../tfjs-backend-cpu/src/kernels/StringNGrams_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/StringSplit_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Sub.ts","../../../../../tfjs-backend-cpu/src/kernels/TopK_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Abs.ts","../../../../../tfjs-backend-cpu/src/kernels/Bincount_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Cast.ts","../../../../../tfjs-backend-cpu/src/kernels/Concat_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/GatherNd_Impl.ts","../../../../../tfjs-backend-cpu/src/kernels/GatherV2_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/LinSpace_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Max_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Neg.ts","../../../../../tfjs-backend-cpu/src/kernels/Prod.ts","../../../../../tfjs-backend-cpu/src/kernels/Range_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Scatter_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Slice.ts","../../../../../tfjs-backend-cpu/src/kernels/SparseFillEmptyRows_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/SparseReshape_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/SparseSegmentReduction_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/StridedSlice_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/StringToHashBucketFast_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Tile_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Transpose_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Unique_impl.ts","../../../../tfjs-backend-webgl/src/kernel_utils/shared.ts","../../../../tfjs-backend-webgl/src/packing_util.ts","../../../../tfjs-backend-webgl/src/pack_gpu.ts","../../../../tfjs-backend-webgl/src/reshape_packed_gpu.ts","../../../../tfjs-backend-webgl/src/texture_manager.ts","../../../../tfjs-backend-webgl/src/unaryop_gpu.ts","../../../../tfjs-backend-webgl/src/unaryop_packed_gpu.ts","../../../../tfjs-backend-webgl/src/unpack_gpu.ts","../../../../tfjs-backend-webgl/src/backend_webgl.ts","../../../../tfjs-backend-webgl/src/webgl.ts","../../../../tfjs-backend-webgl/src/base.ts","../../../../tfjs-backend-webgl/src/binaryop_gpu.ts","../../../../tfjs-backend-webgl/src/binaryop_packed_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/Identity.ts","../../../../tfjs-backend-webgl/src/kernels/Complex.ts","../../../../tfjs-backend-webgl/src/kernels/LeakyRelu.ts","../../../../tfjs-backend-webgl/src/kernels/Prelu.ts","../../../../tfjs-backend-webgl/src/kernel_utils/kernel_funcs_utils.ts","../../../../tfjs-backend-webgl/src/mulmat_packed_gpu.ts","../../../../tfjs-backend-webgl/src/binaryop_complex_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/Multiply.ts","../../../../tfjs-backend-webgl/src/kernels/Reshape.ts","../../../../tfjs-backend-webgl/src/kernel_utils/reshape.ts","../../../../tfjs-backend-webgl/src/mean_gpu.ts","../../../../tfjs-backend-webgl/src/reduce_gpu.ts","../../../../tfjs-backend-webgl/src/kernel_utils/reduce.ts","../../../../tfjs-backend-webgl/src/transpose_gpu.ts","../../../../tfjs-backend-webgl/src/transpose_packed_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/Transpose_impl.ts","../../../../tfjs-backend-webgl/src/kernels/Sum.ts","../../../../tfjs-backend-webgl/src/kernels/Sum_impl.ts","../../../../tfjs-backend-webgl/src/kernels/Transpose.ts","../../../../tfjs-backend-webgl/src/kernels/BatchMatMul_impl.ts","../../../../tfjs-backend-webgl/src/kernels/_FusedMatMul.ts","../../../../tfjs-backend-webgl/src/kernels/Abs.ts","../../../../tfjs-backend-webgl/src/kernels/Acos.ts","../../../../tfjs-backend-webgl/src/kernels/Acosh.ts","../../../../tfjs-backend-webgl/src/kernels/Add.ts","../../../../tfjs-backend-webgl/src/addn_gpu.ts","../../../../tfjs-backend-webgl/src/addn_packed_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/AddN.ts","../../../../tfjs-backend-webgl/src/kernels/All.ts","../../../../tfjs-backend-webgl/src/kernels/Any.ts","../../../../tfjs-backend-webgl/src/argminmax_gpu.ts","../../../../tfjs-backend-webgl/src/argminmax_packed_gpu.ts","../../../../tfjs-backend-webgl/src/kernel_utils/arg_min_max.ts","../../../../tfjs-backend-webgl/src/kernels/ArgMax.ts","../../../../tfjs-backend-webgl/src/kernels/ArgMin.ts","../../../../tfjs-backend-webgl/src/kernels/Asin.ts","../../../../tfjs-backend-webgl/src/kernels/Asinh.ts","../../../../tfjs-backend-webgl/src/kernels/Atan.ts","../../../../tfjs-backend-webgl/src/kernels/Atan2.ts","../../../../tfjs-backend-webgl/src/kernels/Atanh.ts","../../../../tfjs-backend-webgl/src/pool_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/AvgPool.ts","../../../../tfjs-backend-webgl/src/kernels/AvgPool3D.ts","../../../../tfjs-backend-webgl/src/avg_pool_backprop_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/AvgPool3DGrad.ts","../../../../tfjs-backend-webgl/src/kernels/AvgPoolGrad.ts","../../../../tfjs-backend-webgl/src/kernels/BatchMatMul.ts","../../../../tfjs-backend-webgl/src/batchnorm_gpu.ts","../../../../tfjs-backend-webgl/src/batchnorm_packed_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/BatchNorm.ts","../../../../tfjs-backend-webgl/src/slice_gpu.ts","../../../../tfjs-backend-webgl/src/slice_packed_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/Slice.ts","../../../../tfjs-backend-webgl/src/kernels/BatchToSpaceND.ts","../../../../tfjs-backend-webgl/src/kernels/Bincount.ts","../../../../tfjs-backend-webgl/src/kernels/BroadcastArgs.ts","../../../../tfjs-backend-webgl/src/kernels/NotEqual.ts","../../../../tfjs-backend-webgl/src/kernels/Real.ts","../../../../tfjs-backend-webgl/src/kernels/Cast.ts","../../../../tfjs-backend-webgl/src/kernel_utils/int.ts","../../../../tfjs-backend-webgl/src/kernels/Ceil.ts","../../../../tfjs-backend-webgl/src/clip_gpu.ts","../../../../tfjs-backend-webgl/src/clip_packed_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/ClipByValue.ts","../../../../tfjs-backend-webgl/src/complex_abs_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/ComplexAbs.ts","../../../../tfjs-backend-webgl/src/concat_gpu.ts","../../../../tfjs-backend-webgl/src/concat_packed_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/Imag.ts","../../../../tfjs-backend-webgl/src/kernels/Concat_impl.ts","../../../../tfjs-backend-webgl/src/kernels/Concat.ts","../../../../tfjs-backend-webgl/src/conv_gpu.ts","../../../../tfjs-backend-webgl/src/conv_packed_gpu.ts","../../../../tfjs-backend-webgl/src/im2col_packed_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/Conv2D_impl.ts","../../../../tfjs-backend-webgl/src/kernels/Conv2D.ts","../../../../tfjs-backend-webgl/src/conv_backprop_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/Conv2DBackpropFilter.ts","../../../../tfjs-backend-webgl/src/conv_backprop_packed_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/Conv2DBackpropInput.ts","../../../../tfjs-backend-webgl/src/kernels/Conv3D.ts","../../../../tfjs-backend-webgl/src/kernels/Conv3DBackpropFilterV2.ts","../../../../tfjs-backend-webgl/src/kernels/Conv3DBackpropInputV2.ts","../../../../tfjs-backend-webgl/src/kernels/Cos.ts","../../../../tfjs-backend-webgl/src/kernels/Cosh.ts","../../../../tfjs-backend-webgl/src/crop_and_resize_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/CropAndResize.ts","../../../../tfjs-backend-webgl/src/cum_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/Cum_impl.ts","../../../../tfjs-backend-webgl/src/kernels/Cumprod.ts","../../../../tfjs-backend-webgl/src/kernels/Cumsum.ts","../../../../tfjs-backend-webgl/src/kernels/DenseBincount.ts","../../../../tfjs-backend-webgl/src/depth_to_space_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/DepthToSpace.ts","../../../../tfjs-backend-webgl/src/conv_gpu_depthwise.ts","../../../../tfjs-backend-webgl/src/conv_packed_gpu_depthwise.ts","../../../../tfjs-backend-webgl/src/kernels/DepthwiseConv2dNative.ts","../../../../tfjs-backend-webgl/src/conv_backprop_gpu_depthwise.ts","../../../../tfjs-backend-webgl/src/kernels/DepthwiseConv2dNativeBackpropFilter.ts","../../../../tfjs-backend-webgl/src/kernels/DepthwiseConv2dNativeBackpropInput.ts","../../../../tfjs-backend-webgl/src/diag_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/Diag.ts","../../../../tfjs-backend-webgl/src/dilation_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/Dilation2D.ts","../../../../tfjs-backend-webgl/src/kernels/Einsum.ts","../../../../tfjs-backend-webgl/src/kernels/Elu.ts","../../../../tfjs-backend-webgl/src/kernels/EluGrad.ts","../../../../tfjs-backend-webgl/src/kernels/Equal.ts","../../../../tfjs-backend-webgl/src/kernels/Erf.ts","../../../../tfjs-backend-webgl/src/kernels/Exp.ts","../../../../tfjs-backend-webgl/src/kernels/ExpandDims.ts","../../../../tfjs-backend-webgl/src/kernels/Expm1.ts","../../../../tfjs-backend-webgl/src/fft_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/FFT_impl.ts","../../../../tfjs-backend-webgl/src/kernels/FFT.ts","../../../../tfjs-backend-webgl/src/fill_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/Fill.ts","../../../../tfjs-backend-webgl/src/flip_left_right_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/FlipLeftRight.ts","../../../../tfjs-backend-webgl/src/kernels/Floor.ts","../../../../tfjs-backend-webgl/src/kernels/FloorDiv.ts","../../../../tfjs-backend-webgl/src/kernels/FromPixels_utils/from_pixels_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/FromPixels_utils/from_pixels_packed_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/FromPixels.ts","../../../../tfjs-backend-webgl/src/kernels/FusedConv2D.ts","../../../../tfjs-backend-webgl/src/kernels/FusedDepthwiseConv2D.ts","../../../../tfjs-backend-webgl/src/gather_nd_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/GatherNd.ts","../../../../tfjs-backend-webgl/src/gather_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/GatherV2.ts","../../../../tfjs-backend-webgl/src/kernels/Greater.ts","../../../../tfjs-backend-webgl/src/kernels/GreaterEqual.ts","../../../../tfjs-backend-webgl/src/kernels/IFFT.ts","../../../../tfjs-backend-webgl/src/kernels/IsFinite.ts","../../../../tfjs-backend-webgl/src/kernels/IsInf.ts","../../../../tfjs-backend-webgl/src/kernels/IsNaN.ts","../../../../tfjs-backend-webgl/src/kernels/Less.ts","../../../../tfjs-backend-webgl/src/kernels/LessEqual.ts","../../../../tfjs-backend-webgl/src/kernels/LinSpace.ts","../../../../tfjs-backend-webgl/src/kernels/Log.ts","../../../../tfjs-backend-webgl/src/kernels/Log1p.ts","../../../../tfjs-backend-webgl/src/kernels/LogicalAnd.ts","../../../../tfjs-backend-webgl/src/kernels/LogicalNot.ts","../../../../tfjs-backend-webgl/src/kernels/LogicalOr.ts","../../../../tfjs-backend-webgl/src/lrn_gpu.ts","../../../../tfjs-backend-webgl/src/lrn_packed_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/LRN.ts","../../../../tfjs-backend-webgl/src/lrn_grad_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/LRNGrad.ts","../../../../tfjs-backend-webgl/src/kernels/Max.ts","../../../../tfjs-backend-webgl/src/kernels/Max_impl.ts","../../../../tfjs-backend-webgl/src/kernels/Maximum.ts","../../../../tfjs-backend-webgl/src/kernels/MaxPool.ts","../../../../tfjs-backend-webgl/src/kernels/MaxPool3D.ts","../../../../tfjs-backend-webgl/src/max_pool_backprop_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/MaxPool3DGrad.ts","../../../../tfjs-backend-webgl/src/kernels/MaxPoolGrad.ts","../../../../tfjs-backend-webgl/src/kernels/MaxPoolWithArgmax.ts","../../../../tfjs-backend-webgl/src/kernels/MaxPoolWithArgmax_impl.ts","../../../../tfjs-backend-webgl/src/kernels/Mean.ts","../../../../tfjs-backend-webgl/src/kernels/Mean_impl.ts","../../../../tfjs-backend-webgl/src/kernels/Min.ts","../../../../tfjs-backend-webgl/src/kernels/Minimum.ts","../../../../tfjs-backend-webgl/src/mirror_pad_gpu.ts","../../../../tfjs-backend-webgl/src/mirror_pad_packed_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/MirrorPad.ts","../../../../tfjs-backend-webgl/src/kernels/Mod.ts","../../../../tfjs-backend-webgl/src/multinomial_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/RealDiv.ts","../../../../tfjs-backend-webgl/src/kernels/Sub.ts","../../../../tfjs-backend-webgl/src/kernels/Softmax.ts","../../../../tfjs-backend-webgl/src/kernels/Multinomial.ts","../../../../tfjs-backend-webgl/src/kernels/Neg.ts","../../../../tfjs-backend-webgl/src/kernels/NonMaxSuppressionV3.ts","../../../../tfjs-backend-webgl/src/kernels/NonMaxSuppressionV4.ts","../../../../tfjs-backend-webgl/src/kernels/NonMaxSuppressionV5.ts","../../../../tfjs-backend-webgl/src/onehot_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/OneHot.ts","../../../../tfjs-backend-webgl/src/kernels/ZerosLike.ts","../../../../tfjs-backend-webgl/src/kernels/OnesLike.ts","../../../../tfjs-backend-webgl/src/kernels/Pack.ts","../../../../tfjs-backend-webgl/src/pad_gpu.ts","../../../../tfjs-backend-webgl/src/pad_packed_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/PadV2.ts","../../../../tfjs-backend-webgl/src/kernels/Pow.ts","../../../../tfjs-backend-webgl/src/kernels/Prod.ts","../../../../tfjs-backend-webgl/src/kernels/RaggedGather.ts","../../../../tfjs-backend-webgl/src/kernels/RaggedRange.ts","../../../../tfjs-backend-webgl/src/kernels/RaggedTensorToTensor.ts","../../../../tfjs-backend-webgl/src/kernels/Range.ts","../../../../tfjs-backend-webgl/src/kernels/Reciprocal.ts","../../../../tfjs-backend-webgl/src/kernels/Relu.ts","../../../../tfjs-backend-webgl/src/kernels/Relu6.ts","../../../../tfjs-backend-webgl/src/resize_bilinear_gpu.ts","../../../../tfjs-backend-webgl/src/resize_bilinear_packed_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/ResizeBilinear.ts","../../../../tfjs-backend-webgl/src/resize_bilinear_backprop_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/ResizeBilinearGrad.ts","../../../../tfjs-backend-webgl/src/resize_nearest_neighbor_gpu.ts","../../../../tfjs-backend-webgl/src/resize_nearest_neighbor_packed_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/ResizeNearestNeighbor.ts","../../../../tfjs-backend-webgl/src/resize_nearest_neighbor_backprop_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/ResizeNearestNeighborGrad.ts","../../../../tfjs-backend-webgl/src/reverse_gpu.ts","../../../../tfjs-backend-webgl/src/reverse_packed_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/Reverse.ts","../../../../tfjs-backend-webgl/src/rotate_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/RotateWithOffset.ts","../../../../tfjs-backend-webgl/src/kernels/Round.ts","../../../../tfjs-backend-webgl/src/kernels/Rsqrt.ts","../../../../tfjs-backend-webgl/src/scatter_gpu.ts","../../../../tfjs-backend-webgl/src/scatter_packed_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/ScatterNd.ts","../../../../tfjs-backend-webgl/src/search_sorted_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/SearchSorted.ts","../../../../tfjs-backend-webgl/src/select_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/Select.ts","../../../../tfjs-backend-webgl/src/kernels/Selu.ts","../../../../tfjs-backend-webgl/src/kernels/Sigmoid.ts","../../../../tfjs-backend-webgl/src/kernels/Sign.ts","../../../../tfjs-backend-webgl/src/kernels/Sin.ts","../../../../tfjs-backend-webgl/src/kernels/Sinh.ts","../../../../tfjs-backend-webgl/src/kernels/Softplus.ts","../../../../tfjs-backend-webgl/src/kernels/SpaceToBatchND.ts","../../../../tfjs-backend-webgl/src/kernels/SparseFillEmptyRows.ts","../../../../tfjs-backend-webgl/src/kernels/SparseReshape.ts","../../../../tfjs-backend-webgl/src/kernels/SparseSegmentMean.ts","../../../../tfjs-backend-webgl/src/kernels/SparseSegmentSum.ts","../../../../tfjs-backend-webgl/src/kernels/SparseToDense.ts","../../../../tfjs-backend-webgl/src/kernels/SplitV.ts","../../../../tfjs-backend-webgl/src/kernels/Sqrt.ts","../../../../tfjs-backend-webgl/src/kernels/Square.ts","../../../../tfjs-backend-webgl/src/kernels/SquaredDifference.ts","../../../../tfjs-backend-webgl/src/kernels/StaticRegexReplace.ts","../../../../tfjs-backend-webgl/src/kernels/Step.ts","../../../../tfjs-backend-webgl/src/strided_slice_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/StridedSlice.ts","../../../../tfjs-backend-webgl/src/kernels/StringNGrams.ts","../../../../tfjs-backend-webgl/src/kernels/StringSplit.ts","../../../../tfjs-backend-webgl/src/kernels/StringToHashBucketFast.ts","../../../../tfjs-backend-webgl/src/kernels/Tan.ts","../../../../tfjs-backend-webgl/src/kernels/Tanh.ts","../../../../tfjs-backend-webgl/src/kernels/TensorScatterUpdate.ts","../../../../tfjs-backend-webgl/src/tile_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/Tile.ts","../../../../tfjs-backend-webgl/src/top_k_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/TopK.ts","../../../../tfjs-backend-webgl/src/transform_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/Transform.ts","../../../../tfjs-backend-webgl/src/kernels/Unique.ts","../../../../tfjs-backend-webgl/src/kernels/Unpack.ts","../../../../tfjs-backend-webgl/src/segment_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/UnsortedSegmentSum.ts","../../../../tfjs-backend-webgl/src/register_all_kernels.ts","../../../../tfjs-backend-webgl/src/version.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env} from '@tensorflow/tfjs-core';\n\nconst contexts: {[key: string]: WebGLRenderingContext} = {};\n\nconst WEBGL_ATTRIBUTES: WebGLContextAttributes = {\n  alpha: false,\n  antialias: false,\n  premultipliedAlpha: false,\n  preserveDrawingBuffer: false,\n  depth: false,\n  stencil: false,\n  failIfMajorPerformanceCaveat: true\n};\n\nexport function clearWebGLContext(webGLVersion: number) {\n  delete contexts[webGLVersion];\n}\n\nexport function setWebGLContext(\n    webGLVersion: number, gl: WebGLRenderingContext) {\n  contexts[webGLVersion] = gl;\n}\n\nexport function getWebGLContext(\n    webGLVersion: number,\n    customCanvas?: HTMLCanvasElement|OffscreenCanvas): WebGLRenderingContext {\n  if (!(webGLVersion in contexts) || customCanvas != null) {\n    const newCtx = getWebGLRenderingContext(webGLVersion, customCanvas);\n    if (newCtx !== null) {\n      contexts[webGLVersion] = newCtx;\n    } else {\n      console.log('Could not get context for WebGL version', webGLVersion);\n      return null;\n    }\n  }\n  const gl = contexts[webGLVersion];\n  if (gl == null || gl.isContextLost()) {\n    delete contexts[webGLVersion];\n    return getWebGLContext(webGLVersion);\n  }\n\n  gl.disable(gl.DEPTH_TEST);\n  gl.disable(gl.STENCIL_TEST);\n  gl.disable(gl.BLEND);\n  gl.disable(gl.DITHER);\n  gl.disable(gl.POLYGON_OFFSET_FILL);\n  gl.disable(gl.SAMPLE_COVERAGE);\n  gl.enable(gl.SCISSOR_TEST);\n  gl.enable(gl.CULL_FACE);\n  gl.cullFace(gl.BACK);\n\n  return contexts[webGLVersion];\n}\n\nfunction createCanvas(webGLVersion: number) {\n  // Use canvas element for Safari, since its offscreen canvas does not support\n  // fencing.\n  if (!env().getBool('IS_SAFARI') && typeof OffscreenCanvas !== 'undefined' &&\n      webGLVersion === 2) {\n    return new OffscreenCanvas(300, 150);\n  } else if (typeof document !== 'undefined') {\n    return document.createElement('canvas');\n  } else {\n    throw new Error('Cannot create a canvas in this context');\n  }\n}\n\nfunction getWebGLRenderingContext(\n    webGLVersion: number,\n    customCanvas?: HTMLCanvasElement|OffscreenCanvas): WebGLRenderingContext {\n  if (webGLVersion !== 1 && webGLVersion !== 2) {\n    throw new Error('Cannot get WebGL rendering context, WebGL is disabled.');\n  }\n  const canvas =\n      customCanvas == null ? createCanvas(webGLVersion) : customCanvas;\n\n  canvas.addEventListener('webglcontextlost', (ev: Event) => {\n    ev.preventDefault();\n    delete contexts[webGLVersion];\n  }, false);\n\n  if (env().getBool('SOFTWARE_WEBGL_ENABLED')) {\n    WEBGL_ATTRIBUTES.failIfMajorPerformanceCaveat = false;\n  }\n\n  if (webGLVersion === 1) {\n    return (\n        canvas.getContext('webgl', WEBGL_ATTRIBUTES) ||\n        (canvas as HTMLCanvasElement)\n            .getContext('experimental-webgl', WEBGL_ATTRIBUTES));\n  }\n  return canvas.getContext('webgl2', WEBGL_ATTRIBUTES) as WebGLRenderingContext;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataId, DataType, env, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nexport enum PackingScheme {\n  /**\n   * All values in a single texel are densely packed without any constraints.\n   *\n   * This is how the shader encodes a tensor with shape = [2, 3, 4]\n   * (indices are [batch, row, col]).\n   *\n   * 000|001   010|011   020|021\n   * -------   -------   -------\n   * 002|003   012|013   022|023\n   *\n   * 100|101   110|111   120|121\n   * -------   -------   -------\n   * 102|103   112|113   122|123\n   *\n   */\n  DENSE,\n\n  /**\n   * Single texels contain only values from the same batch, and from adjacent\n   * rows and columns.\n   *\n   * This is how the shader encodes a tensor with shape = [2, 3, 5]\n   * (indices are [batch, row, col]).\n   *\n   * 000|001   002|003   004|xxx   020|021   022|023   024|xxx\n   * -------   -------   -------   -------   -------   -------\n   * 010|011   012|013   014|xxx   xxx|xxx   xxx|xxx   xxx|xxx\n   *\n   * 100|101   102|103   104|xxx   120|121   122|123   124|xxx\n   * -------   -------   -------   -------   -------   -------\n   * 110|111   112|113   114|xxx   xxx|xxx   xxx|xxx   xxx|xxx\n   *\n   */\n  SHARED_BATCH\n}\n\nexport enum TextureUsage {\n  RENDER,\n  UPLOAD,\n  PIXELS,\n  DOWNLOAD\n}\n\nexport enum PhysicalTextureType {\n  UNPACKED_FLOAT16,\n  UNPACKED_FLOAT32,\n  PACKED_4X1_UNSIGNED_BYTE,\n  PACKED_2X2_FLOAT32,\n  PACKED_2X2_FLOAT16\n}\n\nexport interface Texture {\n  texture: WebGLTexture;\n  texShape: [number, number];\n}\nexport interface TextureData {\n  // Required.\n  shape: number[];\n  dtype: DataType;\n\n  // Optional.\n  values?: backend_util.BackendValues;\n  texture?: Texture;\n  // For complex numbers, the real and imaginary parts are stored as their own\n  // individual tensorInfos, with a parent joining the two with the\n  // complexTensors field. When this is defined, texture will be null.\n  complexTensorInfos?: {real: TensorInfo, imag: TensorInfo};\n  /** [rows, columns] shape of the texture. */\n  texShape?: [number, number];\n  usage?: TextureUsage;\n  isPacked?: boolean;\n\n  refCount: number;\n\n  // Available when the tensor has been sliced.\n  slice?: {\n    // Offset in the 'flat index' space.\n    flatOffset: number;\n    // Used for counting how many sliced tensors point to the same texture.\n    origDataId: DataId;\n  };\n}\n\nexport function getUnpackedMatrixTextureShapeWidthHeight(\n    rows: number, columns: number): [number, number] {\n  return [columns, rows];\n}\n\nexport function getUnpackedArraySizeFromMatrixSize(\n    matrixSize: number, channelsPerTexture: number): number {\n  return matrixSize * channelsPerTexture;\n}\n\nexport function getColorMatrixTextureShapeWidthHeight(\n    rows: number, columns: number): [number, number] {\n  return [columns * 4, rows];\n}\n\n/**\n * Get shape for densely packed RGBA texture.\n */\nexport function getDenseTexShape(shape: number[]): [number, number] {\n  const size = util.sizeFromShape(shape);\n  const texelsNeeded = Math.ceil(size / 4);\n  return util.sizeToSquarishShape(texelsNeeded);\n}\n\nexport function getMatrixSizeFromUnpackedArraySize(\n    unpackedSize: number, channelsPerTexture: number): number {\n  if (unpackedSize % channelsPerTexture !== 0) {\n    throw new Error(\n        `unpackedSize (${unpackedSize}) must be a multiple of ` +\n        `${channelsPerTexture}`);\n  }\n  return unpackedSize / channelsPerTexture;\n}\n\nexport function decodeMatrixFromUnpackedColorRGBAArray(\n    unpackedArray: Float32Array, matrix: Float32Array, channels: number) {\n  const requiredSize = unpackedArray.length * channels / 4;\n  if (matrix.length < requiredSize) {\n    throw new Error(\n        `matrix length (${matrix.length}) must be >= ${requiredSize}`);\n  }\n  let dst = 0;\n  for (let src = 0; src < unpackedArray.length; src += 4) {\n    for (let c = 0; c < channels; c++) {\n      matrix[dst++] = unpackedArray[src + c];\n    }\n  }\n}\n\nexport function getPackedMatrixTextureShapeWidthHeight(\n    rows: number, columns: number): [number, number] {\n  return [\n    Math.max(1, Math.ceil(columns / 2)), Math.max(1, Math.ceil(rows / 2))\n  ];\n}\n\nexport function getPackedRGBAArraySizeFromMatrixShape(\n    rows: number, columns: number): number {\n  const [w, h] = getPackedMatrixTextureShapeWidthHeight(rows, columns);\n  return w * h * 4;\n}\n\nexport interface TextureConfig {\n  internalFormatFloat: number;\n  textureFormatFloat: number;\n  internalFormatPackedHalfFloat: number;\n  internalFormatHalfFloat: number;\n  internalFormatPackedFloat: number;\n\n  // The format to use during a gl.readPixels call.\n  downloadTextureFormat: number;\n  // How many channels need to be unpacked after a gl.readPixels call.\n  downloadUnpackNumChannels: number;\n\n  defaultNumChannels: number;\n  textureTypeHalfFloat: number;\n  textureTypeFloat: number;\n}\n\nexport function getTextureConfig(\n    // tslint:disable-next-line:no-any\n    gl: WebGLRenderingContext, textureHalfFloatExtension?: any): TextureConfig {\n  // tslint:disable-next-line:no-any\n  const glany = gl as any;\n\n  let internalFormatFloat: number;\n  let internalFormatHalfFloat: number;\n  let internalFormatPackedHalfFloat: number;\n  let internalFormatPackedFloat: number;\n  let textureFormatFloat: number;\n\n  let downloadTextureFormat: number;\n  let downloadUnpackNumChannels: number;\n\n  let defaultNumChannels: number;\n  let textureTypeHalfFloat: number;\n  let textureTypeFloat: number;\n\n  if (env().getNumber('WEBGL_VERSION') === 2) {\n    internalFormatFloat = glany.R32F;\n    internalFormatHalfFloat = glany.R16F;\n    internalFormatPackedHalfFloat = glany.RGBA16F;\n    internalFormatPackedFloat = glany.RGBA32F;\n    textureFormatFloat = glany.RED;\n    downloadUnpackNumChannels = 4;\n    defaultNumChannels = 1;\n    textureTypeHalfFloat = glany.HALF_FLOAT;\n    textureTypeFloat = glany.FLOAT;\n    downloadTextureFormat = glany.RGBA8;\n  } else {\n    internalFormatFloat = gl.RGBA;\n    internalFormatHalfFloat = gl.RGBA;\n    internalFormatPackedHalfFloat = gl.RGBA;\n    internalFormatPackedFloat = glany.RGBA;\n    textureFormatFloat = gl.RGBA;\n    downloadUnpackNumChannels = 4;\n    defaultNumChannels = 4;\n    textureTypeHalfFloat = textureHalfFloatExtension != null ?\n        textureHalfFloatExtension.HALF_FLOAT_OES :\n        null;\n    textureTypeFloat = gl.FLOAT;\n    downloadTextureFormat = gl.RGBA;\n  }\n\n  return {\n    internalFormatFloat,\n    internalFormatHalfFloat,\n    internalFormatPackedHalfFloat,\n    internalFormatPackedFloat,\n    textureFormatFloat,\n    downloadTextureFormat,\n    downloadUnpackNumChannels,\n    defaultNumChannels,\n    textureTypeHalfFloat,\n    textureTypeFloat\n  };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {getWebGLContext} from './canvas_util';\nimport {getTextureConfig} from './tex_util';\n\nexport function callAndCheck<T>(gl: WebGLRenderingContext, func: () => T): T {\n  const returnValue = func();\n  if (env().getBool('DEBUG')) {\n    checkWebGLError(gl);\n  }\n  return returnValue;\n}\n\nfunction checkWebGLError(gl: WebGLRenderingContext) {\n  const error = gl.getError();\n  if (error !== gl.NO_ERROR) {\n    throw new Error('WebGL Error: ' + getWebGLErrorMessage(gl, error));\n  }\n}\n\n// https://en.wikipedia.org/wiki/Half-precision_floating-point_format\nconst MIN_FLOAT16 = 5.96e-8;\nconst MAX_FLOAT16 = 65504;\n\nexport function canBeRepresented(num: number): boolean {\n  if (env().getBool('WEBGL_RENDER_FLOAT32_ENABLED') || num === 0 ||\n      (MIN_FLOAT16 < Math.abs(num) && Math.abs(num) < MAX_FLOAT16)) {\n    return true;\n  }\n  return false;\n}\n\nexport function getWebGLErrorMessage(\n    gl: WebGLRenderingContext, status: number): string {\n  switch (status) {\n    case gl.NO_ERROR:\n      return 'NO_ERROR';\n    case gl.INVALID_ENUM:\n      return 'INVALID_ENUM';\n    case gl.INVALID_VALUE:\n      return 'INVALID_VALUE';\n    case gl.INVALID_OPERATION:\n      return 'INVALID_OPERATION';\n    case gl.INVALID_FRAMEBUFFER_OPERATION:\n      return 'INVALID_FRAMEBUFFER_OPERATION';\n    case gl.OUT_OF_MEMORY:\n      return 'OUT_OF_MEMORY';\n    case gl.CONTEXT_LOST_WEBGL:\n      return 'CONTEXT_LOST_WEBGL';\n    default:\n      return `Unknown error code ${status}`;\n  }\n}\n\nexport function getExtensionOrThrow(\n    gl: WebGLRenderingContext, extensionName: string): {} {\n  return throwIfNull<{}>(\n      gl, () => gl.getExtension(extensionName),\n      'Extension \"' + extensionName + '\" not supported on this browser.');\n}\n\nexport function createVertexShader(\n    gl: WebGLRenderingContext, vertexShaderSource: string): WebGLShader {\n  const vertexShader: WebGLShader = throwIfNull<WebGLShader>(\n      gl, () => gl.createShader(gl.VERTEX_SHADER),\n      'Unable to create vertex WebGLShader.');\n  callAndCheck(gl, () => gl.shaderSource(vertexShader, vertexShaderSource));\n  callAndCheck(gl, () => gl.compileShader(vertexShader));\n  if (gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS) === false) {\n    console.log(gl.getShaderInfoLog(vertexShader));\n    throw new Error('Failed to compile vertex shader.');\n  }\n  return vertexShader;\n}\n\nexport function createFragmentShader(\n    gl: WebGLRenderingContext, fragmentShaderSource: string): WebGLShader {\n  const fragmentShader: WebGLShader = throwIfNull<WebGLShader>(\n      gl, () => gl.createShader(gl.FRAGMENT_SHADER),\n      'Unable to create fragment WebGLShader.');\n  callAndCheck(gl, () => gl.shaderSource(fragmentShader, fragmentShaderSource));\n  callAndCheck(gl, () => gl.compileShader(fragmentShader));\n  if (env().get('ENGINE_COMPILE_ONLY')) {\n    return fragmentShader;\n  }\n  if (gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS) === false) {\n    logShaderSourceAndInfoLog(\n        fragmentShaderSource, gl.getShaderInfoLog(fragmentShader));\n    throw new Error('Failed to compile fragment shader.');\n  }\n  return fragmentShader;\n}\n\nconst lineNumberRegex = /ERROR: [0-9]+:([0-9]+):/g;\nexport function logShaderSourceAndInfoLog(\n    shaderSource: string, shaderInfoLog: string) {\n  const lineNumberRegexResult = lineNumberRegex.exec(shaderInfoLog);\n  if (lineNumberRegexResult == null) {\n    console.log(`Couldn't parse line number in error: ${shaderInfoLog}`);\n    console.log(shaderSource);\n    return;\n  }\n\n  const lineNumber = +lineNumberRegexResult[1];\n\n  const shaderLines = shaderSource.split('\\n');\n  const pad = shaderLines.length.toString().length + 2;\n  const linesWithLineNumbers = shaderLines.map(\n      (line, lineNumber) =>\n          util.rightPad((lineNumber + 1).toString(), pad) + line);\n  let maxLineLength = 0;\n  for (let i = 0; i < linesWithLineNumbers.length; i++) {\n    maxLineLength = Math.max(linesWithLineNumbers[i].length, maxLineLength);\n  }\n\n  const beforeErrorLines = linesWithLineNumbers.slice(0, lineNumber - 1);\n  const errorLine = linesWithLineNumbers.slice(lineNumber - 1, lineNumber);\n  const afterErrorLines = linesWithLineNumbers.slice(lineNumber);\n\n  console.log(beforeErrorLines.join('\\n'));\n  console.log(shaderInfoLog.split('\\n')[0]);\n  console.log(\n      `%c ${util.rightPad(errorLine[0], maxLineLength)}`,\n      'border:1px solid red; background-color:#e3d2d2; color:#a61717');\n  console.log(afterErrorLines.join('\\n'));\n}\n\nexport function createProgram(gl: WebGLRenderingContext): WebGLProgram {\n  return throwIfNull<WebGLProgram>(\n      gl, () => gl.createProgram(), 'Unable to create WebGLProgram.');\n}\n\nexport function linkProgram(gl: WebGLRenderingContext, program: WebGLProgram) {\n  callAndCheck(gl, () => gl.linkProgram(program));\n  if (env().get('ENGINE_COMPILE_ONLY')) {\n    return;\n  }\n  if (gl.getProgramParameter(program, gl.LINK_STATUS) === false) {\n    console.log(gl.getProgramInfoLog(program));\n    throw new Error('Failed to link vertex and fragment shaders.');\n  }\n}\n\n/// validateProgram is effectively \"If we `useProgram(program); drawArrays();`,\n/// give feedback in log about perf/correctness warnings or errors that would\n/// occur.\"\n/// So make sure we set up all vertex/texture/sampler/uniform data before\n/// calling validateProgram!\nexport function validateProgram(\n    gl: WebGLRenderingContext, program: WebGLProgram) {\n  callAndCheck(gl, () => gl.validateProgram(program));\n  if (gl.getProgramParameter(program, gl.VALIDATE_STATUS) === false) {\n    console.log(gl.getProgramInfoLog(program));\n    throw new Error('Shader program validation failed.');\n  }\n}\n\nexport function createStaticVertexBuffer(\n    gl: WebGLRenderingContext, data: Float32Array): WebGLBuffer {\n  const buffer: WebGLBuffer = throwIfNull<WebGLBuffer>(\n      gl, () => gl.createBuffer(), 'Unable to create WebGLBuffer');\n  callAndCheck(gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, buffer));\n  callAndCheck(gl, () => gl.bufferData(gl.ARRAY_BUFFER, data, gl.STATIC_DRAW));\n  return buffer;\n}\n\nexport function createStaticIndexBuffer(\n    gl: WebGLRenderingContext, data: Uint16Array): WebGLBuffer {\n  const buffer: WebGLBuffer = throwIfNull<WebGLBuffer>(\n      gl, () => gl.createBuffer(), 'Unable to create WebGLBuffer');\n  callAndCheck(gl, () => gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffer));\n  callAndCheck(\n      gl, () => gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, data, gl.STATIC_DRAW));\n  return buffer;\n}\n\nexport function getNumChannels(): number {\n  if (env().getNumber('WEBGL_VERSION') === 2) {\n    return 1;\n  }\n  return 4;\n}\n\nexport function createTexture(gl: WebGLRenderingContext): WebGLTexture {\n  return throwIfNull<WebGLTexture>(\n      gl, () => gl.createTexture(), 'Unable to create WebGLTexture.');\n}\n\nexport function validateTextureSize(width: number, height: number) {\n  const maxTextureSize = env().getNumber('WEBGL_MAX_TEXTURE_SIZE');\n  if ((width <= 0) || (height <= 0)) {\n    const requested = `[${width}x${height}]`;\n    throw new Error('Requested texture size ' + requested + ' is invalid.');\n  }\n  if ((width > maxTextureSize) || (height > maxTextureSize)) {\n    const requested = `[${width}x${height}]`;\n    const max = `[${maxTextureSize}x${maxTextureSize}]`;\n    throw new Error(\n        'Requested texture size ' + requested +\n        ' greater than WebGL maximum on this browser / GPU ' + max + '.');\n  }\n}\n\nexport function createFramebuffer(gl: WebGLRenderingContext): WebGLFramebuffer {\n  return throwIfNull<WebGLFramebuffer>(\n      gl, () => gl.createFramebuffer(), 'Unable to create WebGLFramebuffer.');\n}\n\nexport function bindVertexBufferToProgramAttribute(\n    gl: WebGLRenderingContext, program: WebGLProgram, attribute: string,\n    buffer: WebGLBuffer, arrayEntriesPerItem: number, itemStrideInBytes: number,\n    itemOffsetInBytes: number): boolean {\n  const loc = gl.getAttribLocation(program, attribute);\n  if (loc === -1) {\n    // The GPU compiler decided to strip out this attribute because it's unused,\n    // thus no need to bind.\n    return false;\n  }\n  callAndCheck(gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, buffer));\n  callAndCheck(\n      gl,\n      () => gl.vertexAttribPointer(\n          loc, arrayEntriesPerItem, gl.FLOAT, false, itemStrideInBytes,\n          itemOffsetInBytes));\n  callAndCheck(gl, () => gl.enableVertexAttribArray(loc));\n  return true;\n}\n\nexport function bindTextureUnit(\n    gl: WebGLRenderingContext, texture: WebGLTexture, textureUnit: number) {\n  validateTextureUnit(gl, textureUnit);\n  callAndCheck(gl, () => gl.activeTexture(gl.TEXTURE0 + textureUnit));\n  callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, texture));\n}\n\nexport function unbindTextureUnit(\n    gl: WebGLRenderingContext, textureUnit: number) {\n  validateTextureUnit(gl, textureUnit);\n  callAndCheck(gl, () => gl.activeTexture(gl.TEXTURE0 + textureUnit));\n  callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));\n}\n\nexport function getProgramUniformLocationOrThrow(\n    gl: WebGLRenderingContext, program: WebGLProgram,\n    uniformName: string): WebGLUniformLocation {\n  return throwIfNull<WebGLUniformLocation>(\n      gl, () => gl.getUniformLocation(program, uniformName),\n      'uniform \"' + uniformName + '\" not present in program.');\n}\n\nexport function getProgramUniformLocation(\n    gl: WebGLRenderingContext, program: WebGLProgram,\n    uniformName: string): WebGLUniformLocation {\n  return gl.getUniformLocation(program, uniformName);\n}\n\nexport function bindTextureToProgramUniformSampler(\n    gl: WebGLRenderingContext, texture: WebGLTexture,\n    uniformSamplerLocation: WebGLUniformLocation, textureUnit: number) {\n  callAndCheck(gl, () => bindTextureUnit(gl, texture, textureUnit));\n  callAndCheck(gl, () => gl.uniform1i(uniformSamplerLocation, textureUnit));\n}\n\nexport function bindCanvasToFramebuffer(gl: WebGLRenderingContext) {\n  callAndCheck(gl, () => gl.bindFramebuffer(gl.FRAMEBUFFER, null));\n  callAndCheck(gl, () => gl.viewport(0, 0, gl.canvas.width, gl.canvas.height));\n  callAndCheck(gl, () => gl.scissor(0, 0, gl.canvas.width, gl.canvas.height));\n}\n\nexport function bindColorTextureToFramebuffer(\n    gl: WebGLRenderingContext, texture: WebGLTexture,\n    framebuffer: WebGLFramebuffer) {\n  callAndCheck(gl, () => gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer));\n  callAndCheck(\n      gl,\n      () => gl.framebufferTexture2D(\n          gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0));\n}\n\nexport function unbindColorTextureFromFramebuffer(\n    gl: WebGLRenderingContext, framebuffer: WebGLFramebuffer) {\n  callAndCheck(gl, () => gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer));\n  callAndCheck(\n      gl,\n      () => gl.framebufferTexture2D(\n          gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, null, 0));\n}\n\nexport function validateFramebuffer(gl: WebGLRenderingContext) {\n  const status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\n  if (status !== gl.FRAMEBUFFER_COMPLETE) {\n    throw new Error(\n        'Error binding framebuffer: ' + getFramebufferErrorMessage(gl, status));\n  }\n}\n\nexport function getFramebufferErrorMessage(\n    gl: WebGLRenderingContext, status: number): string {\n  switch (status) {\n    case gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:\n      return 'FRAMEBUFFER_INCOMPLETE_ATTACHMENT';\n    case gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:\n      return 'FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT';\n    case gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:\n      return 'FRAMEBUFFER_INCOMPLETE_DIMENSIONS';\n    case gl.FRAMEBUFFER_UNSUPPORTED:\n      return 'FRAMEBUFFER_UNSUPPORTED';\n    default:\n      return `unknown error ${status}`;\n  }\n}\n\nfunction throwIfNull<T>(\n    gl: WebGLRenderingContext, returnTOrNull: () => T | null,\n    failureMessage: string): T {\n  const tOrNull: T|null = callAndCheck(gl, () => returnTOrNull());\n  if (tOrNull == null) {\n    throw new Error(failureMessage);\n  }\n  return tOrNull;\n}\n\nfunction validateTextureUnit(gl: WebGLRenderingContext, textureUnit: number) {\n  const maxTextureUnit = gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS - 1;\n  const glTextureUnit = textureUnit + gl.TEXTURE0;\n  if (glTextureUnit < gl.TEXTURE0 || glTextureUnit > maxTextureUnit) {\n    const textureUnitRange = `[gl.TEXTURE0, gl.TEXTURE${maxTextureUnit}]`;\n    throw new Error(`textureUnit must be in ${textureUnitRange}.`);\n  }\n}\n\nexport function getBatchDim(shape: number[], dimsToSkip = 2): number {\n  return util.sizeFromShape(shape.slice(0, shape.length - dimsToSkip));\n}\n\nexport function getRowsCols(shape: number[]): [number, number] {\n  if (shape.length === 0) {\n    throw Error('Cannot get rows and columns of an empty shape array.');\n  }\n\n  return [\n    shape.length > 1 ? shape[shape.length - 2] : 1, shape[shape.length - 1]\n  ];\n}\n\nexport function getShapeAs3D(shape: number[]): [number, number, number] {\n  let shapeAs3D: [number, number, number] = [1, 1, 1];\n  const isScalar = shape.length === 0 || (shape.length === 1 && shape[0] === 1);\n  if (!isScalar) {\n    shapeAs3D =\n        [getBatchDim(shape), ...getRowsCols(shape)] as [number, number, number];\n  }\n  return shapeAs3D;\n}\n\nexport function getTextureShapeFromLogicalShape(\n    logShape: number[], isPacked = false): [number, number] {\n  let maxTexSize = env().getNumber('WEBGL_MAX_TEXTURE_SIZE');\n  let maxSizeForNarrowTex =\n      env().getNumber('WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE');\n  if (maxSizeForNarrowTex === Infinity &&\n      env().getBool('WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE')) {\n    maxSizeForNarrowTex = maxTexSize / 2;\n  }\n\n  if (isPacked) {\n    maxTexSize = maxTexSize * 2;\n    maxSizeForNarrowTex = maxSizeForNarrowTex * 2;\n\n    // This logic ensures we accurately count the number of packed texels needed\n    // to accommodate the tensor. We can only pack values in the same texel if\n    // they are from adjacent pairs of rows/cols within the same batch. So if a\n    // tensor has 3 rows, we pretend it has 4 rows in order to account for the\n    // fact that the texels containing the third row are half empty.\n    logShape = logShape.map(\n        (d, i) => i >= logShape.length - 2 ?\n            util.nearestLargerEven(logShape[i]) :\n            logShape[i]);\n\n    // Packed texture height is at least 2 (the channel height of a single\n    // texel).\n    if (logShape.length === 1) {\n      logShape = [2, logShape[0]];\n    }\n  }\n\n  // If logical shape is 2, we don't squeeze, since we want to match physical.\n  if (logShape.length !== 2) {\n    const squeezeResult = util.squeezeShape(logShape);\n    logShape = squeezeResult.newShape;\n  }\n\n  let size = util.sizeFromShape(logShape);\n  let textureShape: [number, number] = null;\n  if (logShape.length <= 1 && size <= maxTexSize) {\n    textureShape = [1, size];\n  } else if (\n      logShape.length === 2 && logShape[0] <= maxTexSize &&\n      logShape[1] <= maxTexSize) {\n    textureShape = logShape as [number, number];\n  } else if (\n      logShape.length === 3 && logShape[0] * logShape[1] <= maxTexSize &&\n      logShape[2] <= maxTexSize) {\n    textureShape = [logShape[0] * logShape[1], logShape[2]];\n  } else if (\n      logShape.length === 3 && logShape[0] <= maxTexSize &&\n      logShape[1] * logShape[2] <= maxTexSize) {\n    textureShape = [logShape[0], logShape[1] * logShape[2]];\n  } else if (\n      logShape.length === 4 &&\n      logShape[0] * logShape[1] * logShape[2] <= maxTexSize &&\n      logShape[3] <= maxTexSize) {\n    textureShape = [logShape[0] * logShape[1] * logShape[2], logShape[3]];\n  } else if (\n      logShape.length === 4 && logShape[0] <= maxTexSize &&\n      logShape[1] * logShape[2] * logShape[3] <= maxTexSize) {\n    textureShape = [logShape[0], logShape[1] * logShape[2] * logShape[3]];\n  }\n\n  // true if one edge length is 1 (1 or 2, if packed), while another edge\n  // length exceeds maxSizeForNarrowTex.\n  const isLongNarrowTex = textureShape != null &&\n      Math.max(...textureShape) > maxSizeForNarrowTex &&\n      Math.min(...textureShape) <= (isPacked ? 2 : 1) &&\n      Math.min(...textureShape) > 0;\n\n  if (textureShape == null || isLongNarrowTex) {\n    if (isPacked) {\n      // For packed textures size equals the number of channels required to\n      // accommodate the texture data. However in order to squarify such that\n      // inner dimensions stay even, we rewrite size to equal the number of\n      // texels. Then in the return statement we rehydrate the squarified\n      // dimensions to channel units.\n\n      const batchDim = getBatchDim(logShape);\n      let rows = 2, cols = 2;\n      if (logShape.length) {\n        [rows, cols] = getRowsCols(logShape);\n      }\n      size = batchDim * (rows / 2) * (cols / 2);\n      textureShape =\n          util.sizeToSquarishShape(size).map(d => d * 2) as [number, number];\n    } else {\n      textureShape = util.sizeToSquarishShape(size);\n    }\n  }\n\n  return textureShape;\n}\n\nfunction isEven(n: number): boolean {\n  return n % 2 === 0;\n}\n\n/**\n * This determines whether reshaping a packed texture requires rearranging\n * the data within the texture, assuming 2x2 packing.\n */\nexport function isReshapeFree(shape1: number[], shape2: number[]): boolean {\n  shape1 = shape1.slice(-2);\n  shape2 = shape2.slice(-2);\n\n  if (util.arraysEqual(shape1, shape2)) {\n    return true;\n  }\n\n  if (!shape1.length || !shape2.length) {  // One of the shapes is a scalar.\n    return true;\n  }\n\n  if (shape1[0] === 0 || shape1[1] === 0 || shape2[0] === 0 ||\n      shape2[1] === 0) {\n    return true;\n  }\n\n  if (shape1.length !== shape2.length) {  // One of the shapes is a vector.\n    const shape1Cols = shape1[shape1.length - 1];\n    const shape2Cols = shape2[shape2.length - 1];\n    if (shape1Cols === shape2Cols) {\n      return true;\n    }\n\n    if (isEven(shape1Cols) && isEven(shape2Cols) &&\n        (shape1[0] === 1 || shape2[0] === 1)) {\n      return true;\n    }\n  }\n  return shape1[1] === shape2[1] && isEven(shape1[0]) && isEven(shape2[0]);\n}\n\n// We cache webgl params because the environment gets reset between\n// unit tests and we don't want to constantly query the WebGLContext for\n// MAX_TEXTURE_SIZE.\nlet MAX_TEXTURE_SIZE: number;\nlet MAX_TEXTURES_IN_SHADER: number;\n\nexport function getWebGLMaxTextureSize(webGLVersion: number): number {\n  if (MAX_TEXTURE_SIZE == null) {\n    const gl = getWebGLContext(webGLVersion);\n    MAX_TEXTURE_SIZE = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n  }\n  return MAX_TEXTURE_SIZE;\n}\n\nexport function resetMaxTextureSize() {\n  MAX_TEXTURE_SIZE = null;\n}\nexport function resetMaxTexturesInShader() {\n  MAX_TEXTURES_IN_SHADER = null;\n}\n\nexport function getMaxTexturesInShader(webGLVersion: number): number {\n  if (MAX_TEXTURES_IN_SHADER == null) {\n    const gl = getWebGLContext(webGLVersion);\n    MAX_TEXTURES_IN_SHADER = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n  }\n  // We cap at 16 to avoid spurious runtime \"memory exhausted\" error.\n  return Math.min(16, MAX_TEXTURES_IN_SHADER);\n}\n\nexport function getWebGLDisjointQueryTimerVersion(webGLVersion: number):\n    number {\n  if (webGLVersion === 0) {\n    return 0;\n  }\n\n  let queryTimerVersion: number;\n  const gl = getWebGLContext(webGLVersion);\n\n  if (hasExtension(gl, 'EXT_disjoint_timer_query_webgl2') &&\n      webGLVersion === 2) {\n    queryTimerVersion = 2;\n  } else if (hasExtension(gl, 'EXT_disjoint_timer_query')) {\n    queryTimerVersion = 1;\n  } else {\n    queryTimerVersion = 0;\n  }\n  return queryTimerVersion;\n}\n\nexport function hasExtension(gl: WebGLRenderingContext, extensionName: string) {\n  const ext = gl.getExtension(extensionName);\n  return ext != null;\n}\n\nexport function isWebGLVersionEnabled(webGLVersion: 1|2) {\n  try {\n    const gl = getWebGLContext(webGLVersion);\n    if (gl != null) {\n      return true;\n    }\n  } catch (e) {\n    console.log('Error when getting WebGL context: ', e);\n    return false;\n  }\n  return false;\n}\n\nexport function isCapableOfRenderingToFloatTexture(webGLVersion: number):\n    boolean {\n  if (webGLVersion === 0) {\n    return false;\n  }\n\n  const gl = getWebGLContext(webGLVersion);\n\n  if (webGLVersion === 1) {\n    if (!hasExtension(gl, 'OES_texture_float')) {\n      return false;\n    }\n  } else {\n    if (!hasExtension(gl, 'EXT_color_buffer_float')) {\n      return false;\n    }\n  }\n\n  const isFrameBufferComplete = createFloatTextureAndBindToFramebuffer(gl);\n  return isFrameBufferComplete;\n}\n\n/**\n * Check if we can download values from a float/half-float texture.\n *\n * Note that for performance reasons we use binding a texture to a framebuffer\n * as a proxy for ability to download float values later using readPixels. The\n * texture params of this texture will not match those in readPixels exactly\n * but if we are unable to bind some kind of float texture to the frameBuffer\n * then we definitely will not be able to read float values from it.\n */\nexport function isDownloadFloatTextureEnabled(webGLVersion: number): boolean {\n  if (webGLVersion === 0) {\n    return false;\n  }\n\n  const gl = getWebGLContext(webGLVersion);\n\n  if (webGLVersion === 1) {\n    if (!hasExtension(gl, 'OES_texture_float')) {\n      return false;\n    }\n    if (!hasExtension(gl, 'WEBGL_color_buffer_float')) {\n      return false;\n    }\n  } else {\n    if (hasExtension(gl, 'EXT_color_buffer_float')) {\n      return createFloatTextureAndBindToFramebuffer(gl);\n    }\n\n    const COLOR_BUFFER_HALF_FLOAT = 'EXT_color_buffer_half_float';\n    if (hasExtension(gl, COLOR_BUFFER_HALF_FLOAT)) {\n      const textureHalfFloatExtension =\n          gl.getExtension(COLOR_BUFFER_HALF_FLOAT);\n      return createHalfFloatTextureAndBindToFramebuffer(\n          gl, textureHalfFloatExtension);\n    }\n\n    return false;\n  }\n\n  const isFrameBufferComplete = createFloatTextureAndBindToFramebuffer(gl);\n  return isFrameBufferComplete;\n}\n\nfunction createFloatTextureAndBindToFramebuffer(gl: WebGLRenderingContext):\n    boolean {\n  const texConfig = getTextureConfig(gl);\n\n  const texture = gl.createTexture();\n  gl.bindTexture(gl.TEXTURE_2D, texture);\n\n  const width = 1;\n  const height = 1;\n  gl.texImage2D(\n      gl.TEXTURE_2D, 0, texConfig.internalFormatFloat, width, height, 0,\n      texConfig.textureFormatFloat, texConfig.textureTypeFloat, null);\n\n  const frameBuffer = gl.createFramebuffer();\n  gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n  gl.framebufferTexture2D(\n      gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n\n  const isFrameBufferComplete =\n      gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE;\n\n  gl.bindTexture(gl.TEXTURE_2D, null);\n  gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n  gl.deleteTexture(texture);\n  gl.deleteFramebuffer(frameBuffer);\n\n  return isFrameBufferComplete;\n}\n\nfunction createHalfFloatTextureAndBindToFramebuffer(\n    // tslint:disable-next-line:no-any\n    gl: WebGLRenderingContext, textureHalfFloatExtension: any): boolean {\n  const texConfig = getTextureConfig(gl, textureHalfFloatExtension);\n  const texture = gl.createTexture();\n  gl.bindTexture(gl.TEXTURE_2D, texture);\n\n  const width = 1;\n  const height = 1;\n  gl.texImage2D(\n      gl.TEXTURE_2D, 0, texConfig.internalFormatHalfFloat, width, height, 0,\n      texConfig.textureFormatFloat, texConfig.textureTypeHalfFloat, null);\n\n  const frameBuffer = gl.createFramebuffer();\n  gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n  gl.framebufferTexture2D(\n      gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n\n  const isFrameBufferComplete =\n      gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE;\n\n  gl.bindTexture(gl.TEXTURE_2D, null);\n  gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n  gl.deleteTexture(texture);\n  gl.deleteFramebuffer(frameBuffer);\n\n  return isFrameBufferComplete;\n}\n\nexport function isWebGLFenceEnabled(webGLVersion: number) {\n  if (webGLVersion !== 2) {\n    return false;\n  }\n  const gl = getWebGLContext(webGLVersion);\n\n  // tslint:disable-next-line:no-any\n  const isEnabled = (gl as any).fenceSync != null;\n  return isEnabled;\n}\n\nexport function assertNotComplex(\n    tensor: TensorInfo|TensorInfo[], opName: string): void {\n  if (!Array.isArray(tensor)) {\n    tensor = [tensor];\n  }\n  tensor.forEach(t => {\n    if (t != null) {\n      util.assert(\n          t.dtype !== 'complex64',\n          () => `${opName} does not support complex64 tensors ` +\n              'in the WebGL backend.');\n    }\n  });\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {device_util, env} from '@tensorflow/tfjs-core';\n\nimport {getMaxTexturesInShader, getWebGLDisjointQueryTimerVersion, getWebGLMaxTextureSize, isCapableOfRenderingToFloatTexture, isDownloadFloatTextureEnabled, isWebGLFenceEnabled, isWebGLVersionEnabled} from './webgl_util';\n\nconst ENV = env();\n\n/**\n * This file contains WebGL-specific flag registrations.\n */\n\n/**\n * True if WebGL is supported.\n */\nENV.registerFlag('HAS_WEBGL', () => ENV.getNumber('WEBGL_VERSION') > 0);\n\n/** 0: No WebGL, 1: WebGL 1.0, 2: WebGL 2.0. */\nENV.registerFlag('WEBGL_VERSION', () => {\n  if (isWebGLVersionEnabled(2)) {\n    return 2;\n  } else if (isWebGLVersionEnabled(1)) {\n    return 1;\n  }\n  return 0;\n});\n\n/** Whether to check for numerical representation problems. */\nENV.registerFlag('WEBGL_CHECK_NUMERICAL_PROBLEMS', () => false);\n\nENV.registerFlag(\n    'WEBGL_BUFFER_SUPPORTED', () => ENV.get('WEBGL_VERSION') === 2);\n\n/** Whether the WebGL backend will sometimes forward ops to the CPU. */\nENV.registerFlag('WEBGL_CPU_FORWARD', () => true);\n\n/** Whether the WebGL backend will always use f16 textures for rendering. */\nENV.registerFlag('WEBGL_FORCE_F16_TEXTURES', () => false);\n\n/** Whether to turn all packing related flags on. */\nENV.registerFlag('WEBGL_PACK', () => ENV.getBool('HAS_WEBGL'));\n\n/** Whether we will pack the batchnormalization op. */\nENV.registerFlag('WEBGL_PACK_NORMALIZATION', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack the clip op. */\nENV.registerFlag('WEBGL_PACK_CLIP', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack the depthwise conv op. */\nENV.registerFlag('WEBGL_PACK_DEPTHWISECONV', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack binary ops. */\nENV.registerFlag(\n    'WEBGL_PACK_BINARY_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack unary ops. */\nENV.registerFlag(\n    'WEBGL_PACK_UNARY_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack array ops. */\nENV.registerFlag(\n    'WEBGL_PACK_ARRAY_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack image ops. */\nENV.registerFlag(\n    'WEBGL_PACK_IMAGE_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack reduce ops. */\nENV.registerFlag('WEBGL_PACK_REDUCE', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether packed WebGL kernels lazily unpack their outputs. */\nENV.registerFlag('WEBGL_LAZILY_UNPACK', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will use the im2col algorithm to speed up convolutions. */\nENV.registerFlag('WEBGL_CONV_IM2COL', () => ENV.getBool('WEBGL_PACK'));\n\n/** The maximum texture dimension. */\nENV.registerFlag(\n    'WEBGL_MAX_TEXTURE_SIZE',\n    () => getWebGLMaxTextureSize(ENV.getNumber('WEBGL_VERSION')));\n\n/** The maximum texture dimension. */\nENV.registerFlag(\n    'WEBGL_MAX_TEXTURES_IN_SHADER',\n    () => getMaxTexturesInShader(ENV.getNumber('WEBGL_VERSION')));\n\n/**\n * The disjoint_query_timer extension version.\n * 0: disabled, 1: EXT_disjoint_timer_query, 2:\n * EXT_disjoint_timer_query_webgl2.\n * In Firefox with WebGL 2.0,\n * EXT_disjoint_timer_query_webgl2 is not available, so we must use the\n * WebGL 1.0 extension.\n */\nENV.registerFlag('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION', () => {\n  const webGLVersion = ENV.getNumber('WEBGL_VERSION');\n\n  if (webGLVersion === 0) {\n    return 0;\n  }\n  return getWebGLDisjointQueryTimerVersion(webGLVersion);\n});\n\n/**\n * Whether the timer object from the disjoint_query_timer extension gives\n * timing information that is reliable.\n */\nENV.registerFlag(\n    'WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE',\n    () => ENV.getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') > 0 &&\n        !device_util.isMobile());\n\n/**\n * Whether the device is physically capable of rendering to float32 textures.\n */\nENV.registerFlag(\n    'WEBGL_RENDER_FLOAT32_CAPABLE',\n    () => isCapableOfRenderingToFloatTexture(ENV.getNumber('WEBGL_VERSION')));\n\n/**\n * Whether rendering to float32 textures is enabled. If disabled, renders to\n * float16 textures.\n */\nENV.registerFlag('WEBGL_RENDER_FLOAT32_ENABLED', () => {\n  return ENV.getBool('WEBGL_FORCE_F16_TEXTURES') ?\n      false :\n      ENV.getBool('WEBGL_RENDER_FLOAT32_CAPABLE');\n});\n\n/**\n * Whether downloading float textures is enabled (16 or 32 bit). If disabled,\n * uses IEEE 754 encoding of the float32 values to 4 uint8 when downloading.\n */\nENV.registerFlag(\n    'WEBGL_DOWNLOAD_FLOAT_ENABLED',\n    () => isDownloadFloatTextureEnabled(ENV.getNumber('WEBGL_VERSION')));\n\n/** Whether the fence API is available. */\nENV.registerFlag(\n    'WEBGL_FENCE_API_ENABLED',\n    () => isWebGLFenceEnabled(ENV.getNumber('WEBGL_VERSION')));\n\n/**\n * Tensors with size <= than this will be uploaded as uniforms, not textures.\n */\nENV.registerFlag('WEBGL_SIZE_UPLOAD_UNIFORM', () => {\n  // Use uniform uploads only when 32bit floats are supported. In\n  // 16bit\n  // environments there are problems with comparing a 16bit texture value\n  // with a 32bit uniform value.\n  const useUniforms = ENV.getBool('WEBGL_RENDER_FLOAT32_ENABLED');\n  return useUniforms ? 4 : 0;\n});\n\n/**\n * If the total number of bytes allocated on the GPU is greater than this\n * number, we will aggressively delete textures upon disposal with\n * gl.deleteMatrixTexture, rather than making them available for reuse.\n *\n * Default value -1 indicates that we will never aggressively delete textures.\n */\nENV.registerFlag(\n    'WEBGL_DELETE_TEXTURE_THRESHOLD',\n    () => {\n      return -1;\n    },\n    threshold => {\n      if (threshold < 0 && threshold !== -1) {\n        throw new Error(\n            `WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never ` +\n            `delete) or at least 0, but got ${threshold}.`);\n      }\n    });\n\n/**\n * Trigger a manual GL command flush if the threshold of time has passed since\n * previous Kernel execution. This can be useful for Andorid device where GL\n * command flush are delayed un til the end of javascript task. This value is\n * measured in millisecond. Typically you want to set this value to close to 1.\n *\n * Default value 1 for mobile chrome, and -1 for rest cases. -1 indicates that\n * we will not enforce manual flush and depend on system default flush schedule.\n */\nENV.registerFlag(\n    'WEBGL_FLUSH_THRESHOLD',\n    () => {\n      return device_util.isMobile() ? 1 : -1;\n    },\n    threshold => {\n      if (threshold < 0 && threshold !== -1) {\n        throw new Error(\n            `WEBGL_FLUSH_THRESHOLD must be -1 (indicating never ` +\n            `manual flush) or at least 0, but got ${threshold}.`);\n      }\n    });\n\n/**\n * Threshold for input tensor size that determines whether WebGL backend will\n * delegate computation to CPU.\n *\n * Default value is 128.\n */\nENV.registerFlag('CPU_HANDOFF_SIZE_THRESHOLD', () => 128);\n\n/** Whether we will use shapes uniforms. */\nENV.registerFlag('WEBGL_USE_SHAPES_UNIFORMS', () => false);\n\n/**\n * Threshold for last dimension of input tensor that determines whether\n * WebGL backend for the Top K op will delegate computation to CPU. If input\n * is smaller than threshold then CPU will be used\n *\n * Default value is 100000.\n */\nENV.registerFlag('TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD', () => 100000);\n\n/**\n * Threshold for K that determines whether\n * WebGL backend for the Top K op will delegate computation to CPU. If k\n * is larger than threshold then CPU will be used\n *\n * Default value is 128.\n */\nENV.registerFlag('TOPK_K_CPU_HANDOFF_THRESHOLD', () => 128);\n\n/** Whether we will use the experimental conv op. */\nENV.registerFlag('WEBGL_EXP_CONV', () => false);\n\n/**\n * If the device performance is low or if no hardware GPU is available, whether\n * software WebGL will be used.\n */\nENV.registerFlag('SOFTWARE_WEBGL_ENABLED', () => ENV.getBool('IS_TEST'));\n\n/**\n * For narrow texture (physical height or physical width is 1), if the length of\n * any texture edges exceed the threshold, the texture will be reshaped to be\n * more squarish.\n *\n * This flag is used to help some GPUs that could not provide correct\n * interpolations for long skinny triangles. We found Mali GPU probably has this\n * problem: https://github.com/tensorflow/tfjs/issues/6775.\n */\nENV.registerFlag('WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE', () => Infinity);\n\n/**\n * If the flag is set to true, the max size of the narrow texture will be auto\n * computed and it will be considerred as a threshold to reshape the narrow\n * texture to be more squarish.\n *\n * This flag is used to help some GPUs that could not provide correct\n * interpolations for long skinny triangles. We found Mali GPU probably has this\n * problem: https://github.com/tensorflow/tfjs/issues/6775.\n */\nENV.registerFlag('WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE', () => false);\n\n/**\n * Whether to use the customized isnan. It's only useful for webgl2 since webgl1\n * doesn't have the builtin isnan.\n */\nENV.registerFlag('WEBGL2_ISNAN_CUSTOM', () => false);\n\n/** Experimental flag, whether enter compile only phase. */\nENV.registerFlag('ENGINE_COMPILE_ONLY', () => false);\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {env} from '@tensorflow/tfjs-core';\n\nexport type GLSL = {\n  version: string,\n  attribute: string,\n  varyingVs: string,\n  varyingFs: string,\n  texture2D: string,\n  output: string,\n  defineOutput: string,\n  defineSpecialNaN: string,\n  defineSpecialInf: string,\n  defineRound: string\n};\n\nexport function getGlslDifferences(): GLSL {\n  let version: string;\n  let attribute: string;\n  let varyingVs: string;\n  let varyingFs: string;\n  let texture2D: string;\n  let output: string;\n  let defineOutput: string;\n  let defineSpecialNaN: string;\n  let defineSpecialInf: string;\n  let defineRound: string;\n\n  if (env().getNumber('WEBGL_VERSION') === 2) {\n    version = '#version 300 es';\n    attribute = 'in';\n    varyingVs = 'out';\n    varyingFs = 'in';\n    texture2D = 'texture';\n    output = 'outputColor';\n    defineOutput = 'out vec4 outputColor;';\n\n    // Use custom isnan definition to work across differences between\n    // implementations on various platforms. While this should happen in ANGLE\n    // we still see differences between android and windows (on chrome) when\n    // using isnan directly. Since WebGL2 supports uint type and\n    // floatBitsToUinT built-in function, we could implment isnan following\n    // IEEE 754 rules.\n    // NaN defination in IEEE 754-1985 is :\n    //   - sign = either 0 or 1.\n    //   - biased exponent = all 1 bits.\n    //   - fraction = anything except all 0 bits (since all 0 bits represents\n    //   infinity).\n    // https://en.wikipedia.org/wiki/IEEE_754-1985#Representation_of_non-numbers\n    defineSpecialNaN = env().getBool('WEBGL2_ISNAN_CUSTOM') ? `\n      bool isnan_custom(float val) {\n        uint floatToUint = floatBitsToUint(val);\n        return (floatToUint & 0x7fffffffu) > 0x7f800000u;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    ` :\n                                                              '';\n    // In webgl 2 we do not need to specify a custom isinf so there is no\n    // need for a special INFINITY constant.\n    defineSpecialInf = ``;\n    defineRound = `\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    `;\n  } else {\n    version = '';\n    attribute = 'attribute';\n    varyingVs = 'varying';\n    varyingFs = 'varying';\n    texture2D = 'texture2D';\n    output = 'gl_FragColor';\n    defineOutput = '';\n    // WebGL1 has no built in isnan so we define one here.\n    defineSpecialNaN = `\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    `;\n    defineSpecialInf = `\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    `;\n    defineRound = `\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    `;\n  }\n\n  return {\n    version,\n    attribute,\n    varyingVs,\n    varyingFs,\n    texture2D,\n    output,\n    defineOutput,\n    defineSpecialNaN,\n    defineSpecialInf,\n    defineRound\n  };\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {util} from '@tensorflow/tfjs-core';\n\n/**\n * Produces GLSL code that derives logical coordinates from a flat\n * index. The code performs integer division with each stride and decrements\n * the index until the index equals the final dimension coordinate.\n */\nexport function getLogicalCoordinatesFromFlatIndex(\n    coords: string[], shape: number[], index = 'index'): string {\n  const strides = util.computeStrides(shape);\n  return strides\n      .map((stride, i) => {\n        const line1 = `int ${coords[i]} = ${index} / ${stride}`;\n        const line2 = i === strides.length - 1 ?\n            `int ${coords[i + 1]} = ${index} - ${coords[i]} * ${stride}` :\n            `index -= ${coords[i]} * ${stride}`;\n        return `${line1}; ${line2};`;\n      })\n      .join('');\n}\n\nexport function getOutputLogicalCoordinatesFromFlatIndexByUniform(\n    coords: string[], shape: number[], index = 'index'): string {\n  const strides = util.computeStrides(shape);\n  return strides\n      .map((_, i) => {\n        const line1 = `int ${coords[i]} = ${index} / outShapeStrides[${i}]`;\n        const line2 = i === strides.length - 1 ?\n            `int ${coords[i + 1]} = ${index} - ${coords[i]} * outShapeStrides[${\n                i}]` :\n            `index -= ${coords[i]} * outShapeStrides[${i}]`;\n        return `${line1}; ${line2};`;\n      })\n      .join('');\n}\n\n// Produces GLSL code that computes strides.\nfunction symbolicallyComputeStrides(\n    indicesArr: number[], variableName: string): string[] {\n  const numCoords = indicesArr.length;\n  const shape = indicesArr.map(d => `${variableName}[${d}]`);\n  const strides = new Array(numCoords - 1);\n  strides[numCoords - 2] = shape[numCoords - 1];\n  for (let i = numCoords - 3; i >= 0; --i) {\n    strides[i] = `(${strides[i + 1]} * ${shape[i + 1]})`;\n  }\n\n  return strides;\n}\n\nexport function getLogicalCoordinatesFromFlatIndexByUniform(\n    coords: string[], variableName: string, index = 'index'): string {\n  const indicesArray = coords.map((_, i) => i);\n  const strides = symbolicallyComputeStrides(indicesArray, variableName);\n  return strides\n      .map((_, i) => {\n        const line1 = `int ${coords[i]} = ${index} / ${strides[i]}`;\n        const line2 = i === strides.length - 1 ?\n            `int ${coords[i + 1]} = ${index} - ${coords[i]} * ${strides[i]}` :\n            `index -= ${coords[i]} * ${strides[i]}`;\n        return `${line1}; ${line2};`;\n      })\n      .join('');\n}\n\nfunction buildVec(x: string[]): string {\n  if (x.length === 1) {\n    return `${x[0]}`;\n  }\n  return `vec${x.length}(${x.join(',')})`;\n}\n\n/**\n * Produces GLSL code that computes the dot product of the input x and y\n * vectors. Handles splitting inputs into increments of vec4s when necessary.\n */\nexport function dotify(x: string[], y: string[]): string {\n  if (x.length !== y.length) {\n    throw new Error(\n        `Vectors to be dotted must be of the same length -` +\n        `got ${x.length} and ${y.length}`);\n  }\n\n  const slices: string[] = [];\n  const nearestVec4 = Math.floor(x.length / 4);\n  const nearestVec4Remainder = x.length % 4;\n\n  for (let i = 0; i < nearestVec4; i++) {\n    const xSlice = x.slice(i * 4, i * 4 + 4);\n    const ySlice = y.slice(i * 4, i * 4 + 4);\n    slices.push(`${buildVec(xSlice)}, ${buildVec(ySlice)}`);\n  }\n\n  if (nearestVec4Remainder !== 0) {\n    let xSlice = x.slice(nearestVec4 * 4);\n    let ySlice = y.slice(nearestVec4 * 4);\n    if (xSlice.length === 1) {\n      xSlice = xSlice.map(d => `float(${d})`);\n      ySlice = ySlice.map(d => `float(${d})`);\n    }\n    slices.push(`${buildVec(xSlice)}, ${buildVec(ySlice)}`);\n  }\n\n  return slices.map((d, i) => `dot(${d})`).join('+');\n}\n\n/**\n * Produces GLSL that computes the flat index from 3D coordinates.\n */\nexport function getFlatIndexFrom3D(shape: [number, number, number]): string {\n  const strides = util.computeStrides(shape).map(d => d.toString());\n\n  return `\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * ${strides[0]} + coords.y * ${strides[1]} + coords.z;\n  }\n`;\n}\n\nexport function getFlatIndexFrom3DOutput(): string {\n  return `\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n`;\n}\n\nexport const ENCODE_FLOAT_SNIPPET = `\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n`;\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// Please make sure the shaker key in makeShaderKey in gpgpu_math.ts is well\n// mapped if any shader source code is changed in this file.\n\nimport {backend_util, util} from '@tensorflow/tfjs-core';\nconst {getBroadcastDims} = backend_util;\nimport {getGlslDifferences, GLSL} from './glsl_version';\nimport * as shader_util from './shader_compiler_util';\n\nexport type ShapeInfo = {\n  logicalShape: number[],\n  texShape: [number, number],\n  isUniform: boolean,\n  isPacked: boolean,\n  flatOffset: number\n};\n\nexport type InputInfo = {\n  name: string,\n  shapeInfo: ShapeInfo\n};\n\nexport type UniformType =\n    'float'|'vec2'|'vec3'|'vec4'|'int'|'ivec2'|'ivec3'|'ivec4';\n\ninterface ProgramParams {\n  userCode: string;\n  enableShapeUniforms?: boolean;\n  packedInputs?: boolean;\n  customUniforms?:\n      Array<{name: string; arrayIndex?: number; type: UniformType;}>;\n}\n\nexport function makeShader(\n    inputsInfo: InputInfo[], outputShape: ShapeInfo,\n    program: ProgramParams): string {\n  const prefixSnippets: string[] = [];\n  inputsInfo.forEach(x => {\n    const size = util.sizeFromShape(x.shapeInfo.logicalShape);\n\n    // Snippet when we decided to upload the values as uniform.\n    if (x.shapeInfo.isUniform) {\n      prefixSnippets.push(\n          `uniform float ${x.name}${size > 1 ? `[${size}]` : ''};`);\n    } else {\n      prefixSnippets.push(`uniform sampler2D ${x.name};`);\n      prefixSnippets.push(`uniform int offset${x.name};`);\n    }\n\n    if (program.enableShapeUniforms) {\n      const {uniformShape} = getUniformInfoFromShape(\n          program.packedInputs, x.shapeInfo.logicalShape, x.shapeInfo.texShape);\n      switch (uniformShape.length) {\n        case 1:\n          prefixSnippets.push(`uniform int ${x.name}Shape;`);\n          break;\n        case 2:\n          prefixSnippets.push(`uniform ivec2 ${x.name}Shape;`);\n          break;\n        case 3:\n          prefixSnippets.push(`uniform ivec3 ${x.name}Shape;`);\n          break;\n        case 4:\n          prefixSnippets.push(`uniform ivec4 ${x.name}Shape;`);\n          break;\n        default:\n          break;\n      }\n      prefixSnippets.push(`uniform ivec2 ${x.name}TexShape;`);\n    }\n  });\n\n  if (program.enableShapeUniforms) {\n    switch (outputShape.logicalShape.length) {\n      case 1:\n        prefixSnippets.push(`uniform int outShape;`);\n        break;\n      case 2:\n        prefixSnippets.push(`uniform ivec2 outShape;`);\n        prefixSnippets.push(`uniform int outShapeStrides;`);\n        break;\n      case 3:\n        prefixSnippets.push(`uniform ivec3 outShape;`);\n        prefixSnippets.push(`uniform ivec2 outShapeStrides;`);\n        break;\n      case 4:\n        prefixSnippets.push(`uniform ivec4 outShape;`);\n        prefixSnippets.push(`uniform ivec3 outShapeStrides;`);\n        break;\n      default:\n        break;\n    }\n    prefixSnippets.push(`uniform ivec2 outTexShape;`);\n  }\n  if (program.customUniforms) {\n    program.customUniforms.forEach((d) => {\n      prefixSnippets.push(`uniform ${d.type} ${d.name}${\n          d.arrayIndex ? `[${d.arrayIndex}]` : ''};`);\n    });\n  }\n  const inputPrefixSnippet = prefixSnippets.join('\\n');\n\n  const inputSamplingSnippet = inputsInfo\n                                   .map(\n                                       x => getInputSamplingSnippet(\n                                           x, outputShape, program.packedInputs,\n                                           program.enableShapeUniforms))\n                                   .join('\\n');\n  const outTexShape = outputShape.texShape;\n  const glsl = getGlslDifferences();\n  const floatTextureSampleSnippet = getFloatTextureSampleSnippet(glsl);\n  let outputSamplingSnippet: string;\n  let floatTextureSetOutputSnippet: string;\n  let shaderPrefix = getShaderPrefix(glsl);\n\n  if (outputShape.isPacked) {\n    outputSamplingSnippet = getPackedOutputSamplingSnippet(\n        outputShape.logicalShape, outTexShape, program.enableShapeUniforms);\n    floatTextureSetOutputSnippet = getFloatTextureSetRGBASnippet(glsl);\n  } else {\n    outputSamplingSnippet = getOutputSamplingSnippet(\n        outputShape.logicalShape, outTexShape, program.enableShapeUniforms);\n    floatTextureSetOutputSnippet = getFloatTextureSetRSnippet(glsl);\n  }\n\n  if (program.packedInputs) {\n    shaderPrefix += SHADER_PACKED_PREFIX;\n  }\n\n  const source = [\n    shaderPrefix, floatTextureSampleSnippet, floatTextureSetOutputSnippet,\n    inputPrefixSnippet, outputSamplingSnippet, inputSamplingSnippet,\n    program.userCode\n  ].join('\\n');\n  return source;\n}\n\nfunction getSamplerFromInInfo(\n    inInfo: InputInfo, enableShapeUniforms = false): string {\n  const shape = inInfo.shapeInfo.logicalShape;\n  switch (shape.length) {\n    case 0:\n      return getSamplerScalar(inInfo, enableShapeUniforms);\n    case 1:\n      return getSampler1D(inInfo, enableShapeUniforms);\n    case 2:\n      return getSampler2D(inInfo, enableShapeUniforms);\n    case 3:\n      return getSampler3D(inInfo, enableShapeUniforms);\n    case 4:\n      return getSampler4D(inInfo, enableShapeUniforms);\n    case 5:\n      return getSampler5D(inInfo);\n    case 6:\n      return getSampler6D(inInfo);\n    default:\n      throw new Error(\n          `${shape.length}-D input sampling` +\n          ` is not yet supported`);\n  }\n}\n\nfunction getPackedSamplerFromInInfo(\n    inInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const shape = inInfo.shapeInfo.logicalShape;\n  switch (shape.length) {\n    case 0:\n      return getPackedSamplerScalar(inInfo);\n    case 1:\n      return getPackedSampler1D(inInfo, enableShapeUniforms);\n    case 2:\n      return getPackedSampler2D(inInfo, enableShapeUniforms);\n    case 3:\n      return getPackedSampler3D(inInfo, enableShapeUniforms);\n    default:\n      return getPackedSamplerND(inInfo, enableShapeUniforms);\n  }\n}\n\nfunction getInputSamplingSnippet(\n    inInfo: InputInfo, outShapeInfo: ShapeInfo, usesPackedTextures = false,\n    enableShapeUniforms: boolean): string {\n  let res = '';\n  if (usesPackedTextures) {\n    res += getPackedSamplerFromInInfo(inInfo, enableShapeUniforms);\n  } else {\n    res += getSamplerFromInInfo(inInfo, enableShapeUniforms);\n  }\n\n  const inShape = inInfo.shapeInfo.logicalShape;\n  const outShape = outShapeInfo.logicalShape;\n  if (inShape.length <= outShape.length) {\n    if (usesPackedTextures) {\n      res += getPackedSamplerAtOutputCoords(inInfo, outShapeInfo);\n    } else {\n      res += getSamplerAtOutputCoords(inInfo, outShapeInfo);\n    }\n  }\n  return res;\n}\n\nfunction getPackedOutputSamplingSnippet(\n    outShape: number[], outTexShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  switch (outShape.length) {\n    case 0:\n      return getOutputScalarCoords();\n    case 1:\n      return getOutputPacked1DCoords(\n          outShape as [number], outTexShape, enableShapeUniforms);\n    case 2:\n      return getOutputPacked2DCoords(\n          outShape as [number, number], outTexShape, enableShapeUniforms);\n    case 3:\n      return getOutputPacked3DCoords(\n          outShape as [number, number, number], outTexShape,\n          enableShapeUniforms);\n    default:\n      return getOutputPackedNDCoords(\n          outShape, outTexShape, enableShapeUniforms);\n  }\n}\n\nfunction getOutputSamplingSnippet(\n    outShape: number[], outTexShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  switch (outShape.length) {\n    case 0:\n      return getOutputScalarCoords();\n    case 1:\n      return getOutput1DCoords(\n          outShape as [number], outTexShape, enableShapeUniforms);\n    case 2:\n      return getOutput2DCoords(\n          outShape as [number, number], outTexShape, enableShapeUniforms);\n    case 3:\n      return getOutput3DCoords(\n          outShape as [number, number, number], outTexShape,\n          enableShapeUniforms);\n    case 4:\n      return getOutput4DCoords(\n          outShape as [number, number, number, number], outTexShape,\n          enableShapeUniforms);\n    case 5:\n      return getOutput5DCoords(\n          outShape as [number, number, number, number, number], outTexShape);\n    case 6:\n      return getOutput6DCoords(\n          outShape as [number, number, number, number, number, number],\n          outTexShape);\n    default:\n      throw new Error(\n          `${outShape.length}-D output sampling is not yet supported`);\n  }\n}\n\nfunction getFloatTextureSampleSnippet(glsl: GLSL): string {\n  return `\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${glsl.texture2D}(textureSampler, uv).r;\n    }\n  `;\n}\n\nfunction getFloatTextureSetRSnippet(glsl: GLSL): string {\n  return `\n    void setOutput(float val) {\n      ${glsl.output} = vec4(val, 0, 0, 0);\n    }\n  `;\n}\n\nfunction getFloatTextureSetRGBASnippet(glsl: GLSL): string {\n  return `\n    void setOutput(vec4 val) {\n      ${glsl.output} = val;\n    }\n  `;\n}\n\nfunction getShaderPrefix(glsl: GLSL): string {\n  const SHADER_PREFIX = `${glsl.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${glsl.varyingFs} vec2 resultUV;\n    ${glsl.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${glsl.defineSpecialNaN}\n    ${glsl.defineSpecialInf}\n    ${glsl.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${SAMPLE_1D_SNIPPET}\n    ${SAMPLE_2D_SNIPPET}\n    ${SAMPLE_3D_SNIPPET}\n  `;\n\n  return SHADER_PREFIX;\n}\n\nconst SAMPLE_1D_SNIPPET = `\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\n\nconst SAMPLE_2D_SNIPPET = `\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\n\nconst SAMPLE_3D_SNIPPET = `\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\n\nconst SHADER_PACKED_PREFIX = `\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n`;\n\nfunction getOutputScalarCoords() {\n  return `\n    int getOutputCoords() {\n      return 0;\n    }\n  `;\n}\n\nfunction getOutputPacked1DCoords(\n    shape: [number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  if (packedTexShape[0] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));\n      }\n    `;\n    }\n\n    return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${packedTexShape[1]}.0);\n      }\n    `;\n  }\n\n  if (packedTexShape[1] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));\n      }\n    `;\n    }\n\n    return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${packedTexShape[0]}.0);\n      }\n    `;\n  }\n\n  if (enableShapeUniforms) {\n    return `\n    int getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);\n    }\n  `;\n  }\n\n  return `\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      return 2 * (resTexRC.x * ${packedTexShape[1]} + resTexRC.y);\n    }\n  `;\n}\n\nfunction getOutput1DCoords(\n    shape: [number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  if (texShape[0] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      int getOutputCoords() {\n        return int(resultUV.x * float(outTexShape[1]));\n      }\n    `;\n    }\n    return `\n      int getOutputCoords() {\n        return int(resultUV.x * ${texShape[1]}.0);\n      }\n    `;\n  }\n  if (texShape[1] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      int getOutputCoords() {\n        return int(resultUV.y * float(outTexShape[0]));\n      }\n    `;\n    }\n    return `\n      int getOutputCoords() {\n        return int(resultUV.y * ${texShape[0]}.0);\n      }\n    `;\n  }\n  if (enableShapeUniforms) {\n    return `\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      return resTexRC.x * outTexShape[1] + resTexRC.y;\n    }\n  `;\n  }\n  return `\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      return resTexRC.x * ${texShape[1]} + resTexRC.y;\n    }\n  `;\n}\n\nfunction getOutputPacked3DCoords(\n    shape: [number, number, number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  if (enableShapeUniforms) {\n    return `\n    ivec3 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `;\n  }\n\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const texelsInLogicalRow = Math.ceil(shape[2] / 2);\n  const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[1] / 2);\n\n  return `\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n\n      int b = index / ${texelsInBatch};\n      index -= b * ${texelsInBatch};\n\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `;\n}\n\nfunction getOutput3DCoords(\n    shape: [number, number, number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  if (enableShapeUniforms) {\n    const coordsFromIndexSnippet =\n        shader_util.getOutputLogicalCoordinatesFromFlatIndexByUniform(\n            ['r', 'c', 'd'], shape);\n\n    return `\n  ivec3 getOutputCoords() {\n    ivec2 resTexRC = ivec2(resultUV.yx *\n                           vec2(outTexShape[0], outTexShape[1]));\n    int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n    ${coordsFromIndexSnippet}\n    return ivec3(r, c, d);\n  }\n`;\n  }\n  const coordsFromIndexSnippet =\n      shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd'], shape);\n\n  return `\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      ${coordsFromIndexSnippet}\n      return ivec3(r, c, d);\n    }\n  `;\n}\n\nfunction getOutputPackedNDCoords(\n    shape: number[], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  if (enableShapeUniforms) {\n    // TODO: support 5d and 6d\n    return `\n    ivec4 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatchN = texelsInBatch * outShape[1];\n\n      int b2 = index / texelsInBatchN;\n      index -= b2 * texelsInBatchN;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec4(b2, b, r, c);\n    }\n  `;\n  }\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n\n  const texelsInLogicalRow = Math.ceil(shape[shape.length - 1] / 2);\n  const texelsInBatch =\n      texelsInLogicalRow * Math.ceil(shape[shape.length - 2] / 2);\n  let texelsInBatchN = texelsInBatch;\n  let batches = ``;\n  let coords = 'b, r, c';\n\n  for (let b = 2; b < shape.length - 1; b++) {\n    texelsInBatchN *= shape[shape.length - b - 1];\n    batches = `\n      int b${b} = index / ${texelsInBatchN};\n      index -= b${b} * ${texelsInBatchN};\n    ` + batches;\n    coords = `b${b}, ` + coords;\n  }\n\n  return `\n    ivec${shape.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n\n      ${batches}\n\n      int b = index / ${texelsInBatch};\n      index -= b * ${texelsInBatch};\n\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec${shape.length}(${coords});\n    }\n  `;\n}\n\nfunction getOutput4DCoords(\n    shape: [number, number, number, number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  if (enableShapeUniforms) {\n    const coordsFromIndexSnippet =\n        shader_util.getOutputLogicalCoordinatesFromFlatIndexByUniform(\n            ['r', 'c', 'd', 'd2'], shape);\n\n    return `\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      ${coordsFromIndexSnippet}\n      return ivec4(r, c, d, d2);\n    }\n  `;\n  }\n  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(\n      ['r', 'c', 'd', 'd2'], shape);\n\n  return `\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      ${coordsFromIndexSnippet}\n      return ivec4(r, c, d, d2);\n    }\n  `;\n}\n\nfunction getOutput5DCoords(\n    shape: [number, number, number, number, number],\n    texShape: [number, number]): string {\n  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(\n      ['r', 'c', 'd', 'd2', 'd3'], shape);\n\n  return `\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${texShape[0]},\n                             ${texShape[1]}));\n\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n\n      ${coordsFromIndexSnippet}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `;\n}\n\nfunction getOutput6DCoords(\n    shape: [number, number, number, number, number, number],\n    texShape: [number, number]): string {\n  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(\n      ['r', 'c', 'd', 'd2', 'd3', 'd4'], shape);\n\n  return `\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n\n      ${coordsFromIndexSnippet}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `;\n}\n\nfunction getOutputPacked2DCoords(\n    shape: [number, number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  if (util.arraysEqual(shape, texShape)) {\n    if (enableShapeUniforms) {\n      return `\n      ivec2 getOutputCoords() {\n        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));\n      }\n    `;\n    }\n\n    return `\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${packedTexShape[0]}, ${\n        packedTexShape[1]}));\n      }\n    `;\n  }\n\n  // texels needed to accommodate a logical row\n  const texelsInLogicalRow = Math.ceil(shape[1] / 2);\n\n  /**\n   * getOutputCoords\n   *\n   * resTexRC: The rows and columns of the texels. If you move over one\n   * texel to the right in the packed texture, you are moving over one column\n   * (not two).\n   *\n   * index: The texel index\n   */\n  if (enableShapeUniforms) {\n    return `\n    ivec2 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec2(r, c);\n    }\n  `;\n  }\n\n  return `\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec2(r, c);\n    }\n  `;\n}\n\nfunction getOutput2DCoords(\n    shape: [number, number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  if (util.arraysEqual(shape, texShape)) {\n    if (enableShapeUniforms) {\n      return `\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));\n      }\n    `;\n    }\n    return `\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${texShape[0]}, ${texShape[1]}));\n      }\n    `;\n  }\n  if (shape[1] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `;\n    }\n    return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${texShape[0]}, ${texShape[1]}));\n        int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `;\n  }\n  if (shape[0] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `;\n    }\n    return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${texShape[0]}, ${texShape[1]}));\n        int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `;\n  }\n  if (enableShapeUniforms) {\n    return `\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      int r = index / outShape[1];\n      int c = index - r * outShape[1];\n      return ivec2(r, c);\n    }\n  `;\n  }\n  return `\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      int r = index / ${shape[1]};\n      int c = index - r * ${shape[1]};\n      return ivec2(r, c);\n    }\n  `;\n}\n\nfunction getFlatOffsetUniformName(texName: string): string {\n  return `offset${texName}`;\n}\n\nfunction getPackedSamplerScalar(inputInfo: InputInfo): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const glsl = getGlslDifferences();\n  return `\n    vec4 ${funcName}() {\n      return ${glsl.texture2D}(${texName}, halfCR);\n    }\n  `;\n}\n\nfunction getSamplerScalar(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  if (inputInfo.shapeInfo.isUniform) {\n    return `float ${funcName}() {return ${texName};}`;\n  }\n  const [texNumR, texNumC] = inputInfo.shapeInfo.texShape;\n  if (texNumR === 1 && texNumC === 1) {\n    return `\n      float ${funcName}() {\n        return sampleTexture(${texName}, halfCR);\n      }\n    `;\n  }\n\n  const offset = getFlatOffsetUniformName(texName);\n  if (enableShapeUniforms) {\n    return `\n    float ${funcName}() {\n      vec2 uv = uvFromFlat(${texName}TexShape[0], ${texName}TexShape[1], ${\n        offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  const [tNumR, tNumC] = inputInfo.shapeInfo.texShape;\n  return `\n    float ${funcName}() {\n      vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getPackedSampler1D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n  const glsl = getGlslDifferences();\n  if (enableShapeUniforms) {\n    return `\n    vec4 ${funcName}(int index) {\n      ivec2 packedTexShape = ivec2(ceil(float(${\n        texName}TexShape[0]) / 2.0), ceil(float(${texName}TexShape[1]) / 2.0));\n      vec2 uv = packedUVfrom1D(\n        packedTexShape[0], packedTexShape[1], index);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n  }\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  return `\n    vec4 ${funcName}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${packedTexShape[0]}, ${packedTexShape[1]}, index);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler1D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int index) {\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const texShape = inputInfo.shapeInfo.texShape;\n  const tNumR = texShape[0];\n  const tNumC = texShape[1];\n\n  if (tNumC === 1 && tNumR === 1) {\n    return `\n      float ${funcName}(int index) {\n        return sampleTexture(${texName}, halfCR);\n      }\n    `;\n  }\n  const offset = getFlatOffsetUniformName(texName);\n  if (tNumC === 1) {\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${offset}) + 0.5) / float(${\n          texName}TexShape[0]));\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n\n    return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${offset}) + 0.5) / ${tNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  if (tNumR === 1) {\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2((float(index + ${offset}) + 0.5) / float(${\n          texName}TexShape[1]), 0.5);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n\n    return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2((float(index + ${offset}) + 0.5) / ${tNumC}.0, 0.5);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  if (enableShapeUniforms) {\n    return `\n    float ${funcName}(int index) {\n      vec2 uv = uvFromFlat(${texName}TexShape[0], ${\n        texName}TexShape[1], index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  return `\n    float ${funcName}(int index) {\n      vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getPackedSampler2D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  const glsl = getGlslDifferences();\n  if (texShape != null && util.arraysEqual(shape, texShape)) {\n    if (enableShapeUniforms) {\n      return `\n      vec4 ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texName}TexShape[1], ${\n          texName}TexShape[0]);\n\n        return ${glsl.texture2D}(${texName}, uv);\n      }\n    `;\n    }\n    return `\n      vec4 ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n\n        return ${glsl.texture2D}(${texName}, uv);\n      }\n    `;\n  }\n\n  if (enableShapeUniforms) {\n    return `\n    vec4 ${funcName}(int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${\n        texName}TexShape[0]) / 2.0), ceil(float(${texName}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${texName}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n  }\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const valuesPerRow = Math.ceil(shape[1] / 2);\n\n  return `\n    vec4 ${funcName}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${valuesPerRow}, ${packedTexShape[0]}, ${\n      packedTexShape[1]}, row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler2D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n\n  if (texShape != null && util.arraysEqual(shape, texShape)) {\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texName}TexShape[1], ${\n          texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n\n    const texNumR = texShape[0];\n    const texNumC = texShape[1];\n    return `\n    float ${funcName}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  const squeezedShape = newShape;\n  if (squeezedShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    const params = ['row', 'col'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo, enableShapeUniforms)}\n      float ${funcName}(int row, int col) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${shape[1]}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  const offset = getFlatOffsetUniformName(texName);\n  if (texNumC === 1) {\n    // index is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col) {\n        float index = dot(vec3(row, col, ${offset}), vec3(${\n          texName}Shape[1], 1, 1));\n        vec2 uv = vec2(0.5, (index + 0.5) / float(${texName}TexShape[0]));\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n    float ${funcName}(int row, int col) {\n      float index = dot(vec3(row, col, ${offset}), vec3(${shape[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n  if (texNumR === 1) {\n    // index is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col) {\n        float index = dot(vec3(row, col, ${offset}), vec3(${\n          texName}Shape[1], 1, 1));\n        vec2 uv = vec2((index + 0.5) / float(${texName}TexShape[1]), 0.5);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n    float ${funcName}(int row, int col) {\n      float index = dot(vec3(row, col, ${offset}), vec3(${shape[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${texNumC}.0, 0.5);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  if (enableShapeUniforms) {\n    return `\n      float ${funcName}(int row, int col) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${texName}Shape[1] + col + ${offset};\n        vec2 uv = uvFromFlat(${texName}TexShape[0], ${\n        texName}TexShape[1], index);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  return `\n  float ${funcName}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${shape[1]} + col + ${offset};\n    vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n    return sampleTexture(${texName}, uv);\n  }\n`;\n}\n\nfunction getPackedSampler3D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n\n  if (shape[0] === 1) {\n    const squeezedShape = shape.slice(1);\n    const keptDims = [1, 2];\n    const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    const params = ['b', 'row', 'col'];\n    return `\n        ${getPackedSamplerFromInInfo(newInputInfo, enableShapeUniforms)}\n        vec4 ${funcName}(int b, int row, int col) {\n          return ${funcName}(${getSqueezedParams(params, keptDims)});\n        }\n      `;\n  }\n\n  const glsl = getGlslDifferences();\n  if (enableShapeUniforms) {\n    return `\n    vec4 ${funcName}(int b, int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${\n        texName}TexShape[0]) / 2.0), ceil(float(${texName}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${texName}Shape[2]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${\n        texName}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom3D(\n        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n  }\n\n  const texNumR = packedTexShape[0];\n  const texNumC = packedTexShape[1];\n\n  const valuesPerRow = Math.ceil(shape[2] / 2);\n  const texelsInBatch = valuesPerRow * Math.ceil(shape[1] / 2);\n\n  return `\n    vec4 ${funcName}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${texNumR}, ${texNumC}, ${texelsInBatch}, ${valuesPerRow}, b, row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler3D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const stride0 = shape[1] * shape[2];\n  const stride1 = shape[2];\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  const squeezedShape = newShape;\n  if (squeezedShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    const params = ['row', 'col', 'depth'];\n    return `\n        ${getSamplerFromInInfo(newInputInfo, enableShapeUniforms)}\n        float ${funcName}(int row, int col, int depth) {\n          return ${funcName}(${getSqueezedParams(params, keptDims)});\n        }\n      `;\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${stride0}, ${stride1}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col, int depth) {\n        int stride1 = ${texName}Shape[2];\n        float texR = float(row);\n        float texC = dot(vec2(col, depth), vec2(stride1, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texName}TexShape[1], ${texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n        float ${funcName}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${stride1}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${texNumC}.0, ${texNumR}.0);\n          return sampleTexture(${texName}, uv);\n        }\n      `;\n  }\n\n  if (texNumC === stride1 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col, int depth) {\n        float texR = dot(vec2(row, col), vec2(${texName}Shape[1], 1));\n        float texC = float(depth);\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texName}TexShape[1], ${\n          texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n    float ${funcName}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${shape[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  const offset = getFlatOffsetUniformName(texName);\n  if (enableShapeUniforms) {\n    return `\n    float ${funcName}(int row, int col, int depth) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int stride0 = ${texName}Shape[1] * ${texName}Shape[2];\n      int stride1 = ${texName}Shape[2];\n      int index = row * stride0 + col * stride1 + depth + ${offset};\n      vec2 uv = uvFromFlat(${texName}TexShape[0], ${texName}TexShape[1], index);\n      return sampleTexture(${texName}, uv);\n    }\n    `;\n  }\n  return `\n      float ${funcName}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${stride0} + col * ${stride1} + depth + ${offset};\n        vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n        return sampleTexture(${texName}, uv);\n      }\n  `;\n}\n\nfunction getPackedSamplerND(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const glsl = getGlslDifferences();\n  if (enableShapeUniforms) {\n    // TODO: support 5d and 6d\n    return `\n    vec4 ${funcName}(int b2, int b, int row, int col) {\n      int valuesPerRow = int(ceil(float(${texName}Shape[3]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${\n        texName}Shape[2]) / 2.0));\n      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);\n      texelsInBatch *= ${texName}Shape[1];\n      index = b2 * texelsInBatch + index;\n      ivec2 packedTexShape = ivec2(ceil(float(${\n        texName}TexShape[0]) / 2.0), ceil(float(${texName}TexShape[1]) / 2.0));\n      int texR = index / packedTexShape[1];\n      int texC = index - texR * packedTexShape[1];\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return ${\n        glsl.texture2D}(${texName}, uv);\n    }\n  `;\n  }\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const rank = shape.length;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const texNumR = packedTexShape[0];\n  const texNumC = packedTexShape[1];\n\n  const valuesPerRow = Math.ceil(shape[rank - 1] / 2);\n  let texelsInBatch = valuesPerRow * Math.ceil(shape[rank - 2] / 2);\n  let params = `int b, int row, int col`;\n  let index = `b * ${texelsInBatch} + (row / 2) * ${valuesPerRow} + (col / 2)`;\n  for (let b = 2; b < rank - 1; b++) {\n    params = `int b${b}, ` + params;\n    texelsInBatch *= shape[rank - b - 1];\n    index = `b${b} * ${texelsInBatch} + ` + index;\n  }\n  return `\n    vec4 ${funcName}(${params}) {\n      int index = ${index};\n      int texR = index / ${texNumC};\n      int texC = index - texR * ${texNumC};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}, ${texNumR});\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler4D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const stride2 = shape[3];\n  const stride1 = shape[2] * stride2;\n  const stride0 = shape[1] * stride1;\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  if (newShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    const params = ['row', 'col', 'depth', 'depth2'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo, enableShapeUniforms)}\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${stride0}, ${stride1}, ${stride2}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n\n  const stride2Str = `int stride2 = ${texName}Shape[3];`;\n  const stride1Str = `int stride1 = ${texName}Shape[2] * stride2;`;\n  const stride0Str = `int stride0 = ${texName}Shape[1] * stride1;`;\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        ${stride2Str}\n        ${stride1Str}\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(stride1, stride2, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texName}TexShape[1], ${texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${stride1}, ${stride2}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  if (texNumC === stride2 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${texName}Shape[1] * ${texName}Shape[2], ${\n          texName}Shape[2], 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texName}TexShape[1], ${texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${shape[1] * shape[2]}, ${shape[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  const offset = getFlatOffsetUniformName(texName);\n  if (enableShapeUniforms) {\n    return `\n    float ${funcName}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      ${stride2Str}\n      ${stride1Str}\n      ${stride0Str}\n      int index = row * stride0 + col * stride1 +\n          depth * stride2 + depth2;\n      vec2 uv = uvFromFlat(${texName}TexShape[0], ${\n        texName}TexShape[1], index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n  return `\n    float ${funcName}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} +\n          depth * ${stride2} + depth2;\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler5D(inputInfo: InputInfo): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const stride3 = shape[4];\n  const stride2 = shape[3] * stride3;\n  const stride1 = shape[2] * stride2;\n  const stride0 = shape[1] * stride1;\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  if (newShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    const params = ['row', 'col', 'depth', 'depth2', 'depth3'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo)}\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${stride0}, ${stride1}, ${stride2}, ${stride3})) +\n          depth3;\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${stride1}, ${stride2}, ${stride3}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  if (texNumC === stride3 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${shape[1] * shape[2] * shape[3]},\n               ${shape[2] * shape[3]}, ${shape[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  const offset = getFlatOffsetUniformName(texName);\n  return `\n    float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n          depth2 * ${stride3} + depth3 + ${offset};\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler6D(inputInfo: InputInfo): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  if (newShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    const params = ['row', 'col', 'depth', 'depth2', 'depth3', 'depth4'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo)}\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n\n  const stride4 = shape[5];\n  const stride3 = shape[4] * stride4;\n  const stride2 = shape[3] * stride3;\n  const stride1 = shape[2] * stride2;\n  const stride0 = shape[1] * stride1;\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${stride0}, ${stride1}, ${stride2}, ${stride3})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${stride4}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${stride1}, ${stride2}, ${stride3}, ${stride4})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  if (texNumC === stride4 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${shape[1] * shape[2] * shape[3] * shape[4]},\n               ${shape[2] * shape[3] * shape[4]},\n               ${shape[3] * shape[4]},\n               ${shape[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  const offset = getFlatOffsetUniformName(texName);\n  return `\n    float ${funcName}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n          depth2 * ${stride3} + depth3 * ${stride4} + depth4 + ${offset};\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getUniformSampler(inputInfo: InputInfo): string {\n  const texName = inputInfo.name;\n  const inSize = util.sizeFromShape(inputInfo.shapeInfo.logicalShape);\n\n  if (inSize < 2) {\n    return `return ${texName};`;\n  }\n\n  return `\n    for (int i = 0; i < ${inSize}; i++) {\n      if (i == index) {\n        return ${texName}[i];\n      }\n    }\n  `;\n}\n\nfunction getPackedSamplerAtOutputCoords(\n    inputInfo: InputInfo, outShapeInfo: ShapeInfo) {\n  const texName = inputInfo.name;\n  const texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);\n  const funcName = 'get' + texFuncSnippet + 'AtOutCoords';\n  const inRank = inputInfo.shapeInfo.logicalShape.length;\n  const outRank = outShapeInfo.logicalShape.length;\n\n  const broadcastDims = getBroadcastDims(\n      inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);\n\n  const type = getCoordsDataType(outRank);\n  const rankDiff = outRank - inRank;\n  let coordsSnippet: string;\n  const fields = ['x', 'y', 'z', 'w', 'u', 'v'];\n\n  if (inRank === 0) {\n    coordsSnippet = '';\n  } else if (outRank < 2 && broadcastDims.length >= 1) {\n    coordsSnippet = 'coords = 0;';\n  } else {\n    coordsSnippet =\n        broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`)\n            .join('\\n');\n  }\n  let unpackedCoordsSnippet = '';\n  if (outRank < 2 && inRank > 0) {\n    unpackedCoordsSnippet = 'coords';\n  } else {\n    unpackedCoordsSnippet = inputInfo.shapeInfo.logicalShape\n                                .map((s, i) => `coords.${fields[i + rankDiff]}`)\n                                .join(', ');\n  }\n\n  let output = `return outputValue;`;\n  const inSize = util.sizeFromShape(inputInfo.shapeInfo.logicalShape);\n  const isInputScalar = inSize === 1;\n  const outSize = util.sizeFromShape(outShapeInfo.logicalShape);\n  const isOutputScalar = outSize === 1;\n\n  if (inRank === 1 && !isInputScalar && !isOutputScalar) {\n    output = `\n      return vec4(outputValue.xy, outputValue.xy);\n    `;\n  } else if (isInputScalar && !isOutputScalar) {\n    if (outRank === 1) {\n      output = `\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      `;\n    } else {\n      output = `\n        return vec4(outputValue.x);\n      `;\n    }\n  } else if (broadcastDims.length) {\n    const rows = inRank - 2;\n    const cols = inRank - 1;\n\n    if (broadcastDims.indexOf(rows) > -1 && broadcastDims.indexOf(cols) > -1) {\n      output = `return vec4(outputValue.x);`;\n    } else if (broadcastDims.indexOf(rows) > -1) {\n      output = `return vec4(outputValue.x, outputValue.y, ` +\n          `outputValue.x, outputValue.y);`;\n    } else if (broadcastDims.indexOf(cols) > -1) {\n      output = `return vec4(outputValue.xx, outputValue.zz);`;\n    }\n  }\n\n  return `\n    vec4 ${funcName}() {\n      ${type} coords = getOutputCoords();\n      ${coordsSnippet}\n      vec4 outputValue = get${texFuncSnippet}(${unpackedCoordsSnippet});\n      ${output}\n    }\n  `;\n}\n\nfunction getSamplerAtOutputCoords(\n    inputInfo: InputInfo, outShapeInfo: ShapeInfo) {\n  const texName = inputInfo.name;\n  const texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);\n  const funcName = 'get' + texFuncSnippet + 'AtOutCoords';\n  const outTexShape = outShapeInfo.texShape;\n  const inTexShape = inputInfo.shapeInfo.texShape;\n  const inRank = inputInfo.shapeInfo.logicalShape.length;\n  const outRank = outShapeInfo.logicalShape.length;\n\n  if (!inputInfo.shapeInfo.isUniform && inRank === outRank &&\n      inputInfo.shapeInfo.flatOffset == null &&\n      util.arraysEqual(inTexShape, outTexShape)) {\n    return `\n      float ${funcName}() {\n        return sampleTexture(${texName}, resultUV);\n      }\n    `;\n  }\n\n  const type = getCoordsDataType(outRank);\n  const broadcastDims = getBroadcastDims(\n      inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);\n  const rankDiff = outRank - inRank;\n  let coordsSnippet: string;\n  const fields = ['x', 'y', 'z', 'w', 'u', 'v'];\n\n  if (inRank === 0) {\n    coordsSnippet = '';\n  } else if (outRank < 2 && broadcastDims.length >= 1) {\n    coordsSnippet = 'coords = 0;';\n  } else {\n    coordsSnippet =\n        broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`)\n            .join('\\n');\n  }\n  let unpackedCoordsSnippet = '';\n  if (outRank < 2 && inRank > 0) {\n    unpackedCoordsSnippet = 'coords';\n  } else {\n    unpackedCoordsSnippet = inputInfo.shapeInfo.logicalShape\n                                .map((s, i) => `coords.${fields[i + rankDiff]}`)\n                                .join(', ');\n  }\n\n  return `\n    float ${funcName}() {\n      ${type} coords = getOutputCoords();\n      ${coordsSnippet}\n      return get${texFuncSnippet}(${unpackedCoordsSnippet});\n    }\n  `;\n}\n\nexport function getCoordsDataType(rank: number): string {\n  if (rank <= 1) {\n    return 'int';\n  } else if (rank === 2) {\n    return 'ivec2';\n  } else if (rank === 3) {\n    return 'ivec3';\n  } else if (rank === 4) {\n    return 'ivec4';\n  } else if (rank === 5) {\n    return 'ivec5';\n  } else if (rank === 6) {\n    return 'ivec6';\n  } else {\n    throw Error(`GPU for rank ${rank} is not yet supported`);\n  }\n}\n\nexport function getUniformInfoFromShape(\n    isPacked: boolean, shape: number[], texShape: number[]) {\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  const rank = shape.length;\n  const useSqueezePackedShape = isPacked && rank === 3 && shape[0] === 1;\n  const squeezeShape = useSqueezePackedShape ? shape.slice(1) : newShape;\n  const useSqueezeShape =\n      (!isPacked && rank > 1 && !util.arraysEqual(shape, texShape) &&\n       newShape.length < rank) ||\n      useSqueezePackedShape;\n  const uniformShape = useSqueezeShape ? squeezeShape : shape;\n  return {useSqueezeShape, uniformShape, keptDims};\n}\n\n/** Returns a new input info (a copy) that has a squeezed logical shape. */\nexport function squeezeInputInfo(\n    inInfo: InputInfo, squeezedShape: number[]): InputInfo {\n  // Deep copy.\n  const newInputInfo: InputInfo = JSON.parse(JSON.stringify(inInfo));\n  newInputInfo.shapeInfo.logicalShape = squeezedShape;\n  return newInputInfo;\n}\n\nfunction getSqueezedParams(params: string[], keptDims: number[]): string {\n  return keptDims.map(d => params[d]).join(', ');\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, env, Tensor, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {GPGPUContext, GPGPUContextProgram} from './gpgpu_context';\nimport * as shader_compiler from './shader_compiler';\nimport {InputInfo, ShapeInfo, UniformType} from './shader_compiler';\nimport {PackingScheme, TextureData, TextureUsage} from './tex_util';\nimport {createFragmentShader} from './webgl_util';\n\nexport interface GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[];\n  userCode: string;\n  enableShapeUniforms?: boolean;\n  /** If true, this program expects packed input textures. Defaults to false. */\n  packedInputs?: boolean;\n  /** If true, this program produces a packed texture. Defaults to false. */\n  packedOutput?: boolean;\n  /**\n   * Affects what type of texture we allocate for the output. Defaults to\n   * `TextureUsage.RENDER`.\n   */\n  outTexUsage?: TextureUsage;\n  /**\n   * The type of scheme to use when packing texels for the output values.\n   * See `PackingScheme` for details. Defaults to `PackingScheme.SHARED_BATCH`.\n   */\n  outPackingScheme?: PackingScheme;\n  customUniforms?:\n      Array<{name: string; arrayIndex?: number; type: UniformType;}>;\n}\n\nexport interface GPGPUBinary extends GPGPUBinaryLocations {\n  webGLProgram: GPGPUContextProgram;\n  program: GPGPUProgram;\n  source: string;\n  fragmentShader: WebGLShader;\n  inShapeInfos: ShapeInfo[];\n  outShapeInfo: ShapeInfo;\n}\n\nexport interface GPGPUBinaryLocations {\n  customUniformLocations?: WebGLUniformLocation[];\n  infLoc: WebGLUniformLocation;\n  nanLoc: WebGLUniformLocation;\n  outShapeLocation?: WebGLUniformLocation;\n  outShapeStridesLocation?: WebGLUniformLocation;\n  outTexShapeLocation?: WebGLUniformLocation;\n  variablesLocations?: GPGPUVariableLocations[];\n}\n\nexport interface GPGPUVariableLocations {\n  name: string;\n  uniform: WebGLUniformLocation;\n  offset: WebGLUniformLocation;\n  shape?: WebGLUniformLocation;\n  texShape?: WebGLUniformLocation;\n}\n\nexport interface TensorData {\n  shape: number[];\n  texData: TextureData;\n  isUniform: boolean;\n  // Available when we decide to upload as uniform instead of texture.\n  uniformValues?: TypedArray;\n}\n\nexport function compileProgram<T extends Tensor, K extends Tensor>(\n    gpgpu: GPGPUContext, program: GPGPUProgram, inputs: TensorData[],\n    output: TensorData): GPGPUBinary {\n  const inputInfos: InputInfo[] = inputs.map((input, i) => {\n    const shapeInfo: ShapeInfo = {\n      logicalShape: input.shape,\n      texShape: input.isUniform ? null : input.texData.texShape,\n      isUniform: input.isUniform,\n      isPacked: input.isUniform ? false : input.texData.isPacked,\n      flatOffset: null\n    };\n    if (input.texData != null && input.texData.slice != null &&\n        input.texData.slice.flatOffset > 0) {\n      shapeInfo.flatOffset = input.texData.slice.flatOffset;\n    }\n    return {name: program.variableNames[i], shapeInfo};\n  });\n  const inShapeInfos = inputInfos.map(x => x.shapeInfo);\n  const outShapeInfo: ShapeInfo = {\n    logicalShape: output.shape,\n    texShape: output.texData.texShape,\n    isUniform: false,\n    isPacked: output.texData.isPacked,\n    flatOffset: null\n  };\n  const source = shader_compiler.makeShader(inputInfos, outShapeInfo, program);\n  const fragmentShader = createFragmentShader(gpgpu.gl, source);\n  const webGLProgram = gpgpu.createProgram(fragmentShader);\n\n  if (!env().get('ENGINE_COMPILE_ONLY')) {\n    return {\n      program,\n      fragmentShader,\n      source,\n      webGLProgram,\n      inShapeInfos,\n      outShapeInfo,\n      ...getUniformLocations(gpgpu, program, webGLProgram)\n    };\n  } else {\n    return {\n      program,\n      fragmentShader,\n      source,\n      webGLProgram,\n      inShapeInfos,\n      outShapeInfo,\n      variablesLocations: null,\n      customUniformLocations: null,\n      infLoc: null,\n      nanLoc: null,\n      outShapeLocation: null,\n      outShapeStridesLocation: null,\n      outTexShapeLocation: null\n    };\n  }\n}\n\nexport function getUniformLocations(\n    gpgpu: GPGPUContext, program: GPGPUProgram,\n    webGLProgram: WebGLProgram): GPGPUBinaryLocations {\n  const variablesLocations: GPGPUVariableLocations[] = [];\n  const customUniformLocations: WebGLUniformLocation[] = [];\n  let outShapeLocation: WebGLUniformLocation;\n  let outTexShapeLocation: WebGLUniformLocation;\n  let outShapeStridesLocation: WebGLUniformLocation;\n  let infLoc: WebGLUniformLocation = null;\n  let nanLoc: WebGLUniformLocation = null;\n\n  // Add special uniforms (NAN, INFINITY)\n  nanLoc = gpgpu.getUniformLocation(webGLProgram, 'NAN', false);\n  if (env().getNumber('WEBGL_VERSION') === 1) {\n    infLoc = gpgpu.getUniformLocation(webGLProgram, 'INFINITY', false);\n  }\n\n  // Add user-defined uniforms\n  const shouldThrow = false;\n  for (const varName of program.variableNames) {\n    const varLocs: GPGPUVariableLocations = {\n      name: varName,\n      uniform: gpgpu.getUniformLocation(webGLProgram, varName, shouldThrow),\n      offset: gpgpu.getUniformLocation(\n          webGLProgram, `offset${varName}`, shouldThrow),\n    };\n    if (program.enableShapeUniforms) {\n      varLocs.shape = gpgpu.getUniformLocation(\n          webGLProgram, `${varName}Shape`, shouldThrow);\n      varLocs.texShape = gpgpu.getUniformLocation(\n          webGLProgram, `${varName}TexShape`, shouldThrow);\n    }\n\n    variablesLocations.push(varLocs);\n  }\n\n  if (program.enableShapeUniforms) {\n    outShapeLocation =\n        gpgpu.getUniformLocation(webGLProgram, 'outShape', shouldThrow);\n    outShapeStridesLocation =\n        gpgpu.getUniformLocation(webGLProgram, 'outShapeStrides', shouldThrow);\n    outTexShapeLocation =\n        gpgpu.getUniformLocation(webGLProgram, 'outTexShape', shouldThrow);\n  }\n\n  if (program.customUniforms) {\n    for (const d of program.customUniforms) {\n      customUniformLocations.push(\n          gpgpu.getUniformLocation(webGLProgram, d.name, shouldThrow));\n    }\n  }\n\n  return {\n    variablesLocations,\n    customUniformLocations,\n    infLoc,\n    nanLoc,\n    outShapeLocation,\n    outShapeStridesLocation,\n    outTexShapeLocation\n  };\n}\n\nfunction validateBinaryAndProgram(\n    shapeInfos: ShapeInfo[], inputs: TensorData[]) {\n  if (shapeInfos.length !== inputs.length) {\n    throw Error(\n        `Binary was compiled with ${shapeInfos.length} inputs, but ` +\n        `was executed with ${inputs.length} inputs`);\n  }\n\n  shapeInfos.forEach((s, i) => {\n    const shapeA = s.logicalShape;\n    const input = inputs[i];\n    const shapeB = input.shape;\n\n    if (!util.arraysEqual(shapeA, shapeB)) {\n      throw Error(\n          `Binary was compiled with different shapes than ` +\n          `the current args. Shapes ${shapeA} and ${shapeB} must match`);\n    }\n    // The input is uploaded as uniform.\n    if (s.isUniform && input.isUniform) {\n      return;\n    }\n\n    const texShapeA = s.texShape;\n    const texShapeB = input.isUniform ? null : input.texData.texShape;\n    if (!util.arraysEqual(texShapeA, texShapeB)) {\n      throw Error(\n          `Binary was compiled with different texture shapes than the` +\n          ` current args. Shape ${texShapeA} and ${texShapeB} must match`);\n    }\n  });\n}\n\nexport function runProgram<T extends Tensor, K extends Tensor>(\n    gpgpu: GPGPUContext, binary: GPGPUBinary, inputs: TensorData[],\n    output: TensorData, customUniformValues?: number[][]): void {\n  if (!binary.program.enableShapeUniforms) {\n    validateBinaryAndProgram(binary.inShapeInfos, inputs);\n    validateBinaryAndProgram([binary.outShapeInfo], [output]);\n  }\n\n  const outTex = output.texData.texture;\n  const outTexShape = output.texData.texShape;\n  if (output.texData.isPacked) {\n    gpgpu.setOutputPackedMatrixTexture(\n        outTex.texture, outTexShape[0], outTexShape[1]);\n  } else {\n    gpgpu.setOutputMatrixTexture(\n        outTex.texture, outTexShape[0], outTexShape[1]);\n  }\n  gpgpu.setProgram(binary.webGLProgram);\n\n  // Set special uniforms (NAN, INFINITY)\n  if (env().getNumber('WEBGL_VERSION') === 1) {\n    if (binary.infLoc !== null) {\n      gpgpu.gl.uniform1f(binary.infLoc, Infinity);\n    }\n  }\n  if (binary.nanLoc !== null) {\n    gpgpu.gl.uniform1f(binary.nanLoc, NaN);\n  }\n\n  // Set user-defined inputs\n  for (let i = 0; i < inputs.length; ++i) {\n    const input = inputs[i];\n    const {\n      uniform: varLoc,\n      offset: varOffsetLoc,\n      shape: varShapeLoc,\n      texShape: varTexShapeLoc,\n    } = binary.variablesLocations[i];\n\n    if (varShapeLoc) {\n      const {uniformShape} = shader_compiler.getUniformInfoFromShape(\n          binary.program.packedInputs, input.shape, input.texData.texShape);\n      switch (uniformShape.length) {\n        case 1:\n          gpgpu.gl.uniform1iv(varShapeLoc, new Int32Array(uniformShape));\n          break;\n        case 2:\n          gpgpu.gl.uniform2iv(varShapeLoc, new Int32Array(uniformShape));\n          break;\n        case 3:\n          gpgpu.gl.uniform3iv(varShapeLoc, new Int32Array(uniformShape));\n          break;\n        case 4:\n          gpgpu.gl.uniform4iv(varShapeLoc, new Int32Array(uniformShape));\n          break;\n        default:\n          break;\n      }\n    }\n\n    if (varTexShapeLoc) {\n      gpgpu.gl.uniform2i(\n          varTexShapeLoc, input.texData.texShape[0], input.texData.texShape[1]);\n    }\n\n    if (varLoc == null) {\n      // The compiler inferred that this variable is not used in this shader.\n      continue;\n    }\n\n    if (input.isUniform) {\n      // Upload the values of the tensor as uniform.\n      if (util.sizeFromShape(input.shape) < 2) {\n        gpgpu.gl.uniform1f(varLoc, input.uniformValues[0]);\n      } else {\n        let vals = input.uniformValues;\n        if (!(vals instanceof Float32Array)) {\n          vals = new Float32Array(vals);\n        }\n        gpgpu.gl.uniform1fv(varLoc, vals);\n      }\n      continue;\n    }\n\n    // If the input was sliced, upload the flat offset index.\n    if (input.texData.slice != null && varOffsetLoc != null) {\n      gpgpu.gl.uniform1i(varOffsetLoc, input.texData.slice.flatOffset);\n    }\n\n    gpgpu.setInputMatrixTexture(input.texData.texture.texture, varLoc, i);\n  }\n\n  const outShapeLoc = binary.outShapeLocation;\n  if (outShapeLoc) {\n    switch (output.shape.length) {\n      case 1:\n        gpgpu.gl.uniform1iv(outShapeLoc, new Int32Array(output.shape));\n        break;\n      case 2:\n        gpgpu.gl.uniform2iv(outShapeLoc, new Int32Array(output.shape));\n        break;\n      case 3:\n        gpgpu.gl.uniform3iv(outShapeLoc, new Int32Array(output.shape));\n        break;\n      case 4:\n        gpgpu.gl.uniform4iv(outShapeLoc, new Int32Array(output.shape));\n        break;\n      default:\n        break;\n    }\n  }\n  if (binary.outShapeStridesLocation) {\n    const strides = util.computeStrides(output.shape);\n    switch (output.shape.length) {\n      case 2:\n        gpgpu.gl.uniform1iv(\n            binary.outShapeStridesLocation, new Int32Array(strides));\n        break;\n      case 3:\n        gpgpu.gl.uniform2iv(\n            binary.outShapeStridesLocation, new Int32Array(strides));\n        break;\n      case 4:\n        gpgpu.gl.uniform3iv(\n            binary.outShapeStridesLocation, new Int32Array(strides));\n        break;\n      default:\n        break;\n    }\n  }\n  if (binary.outTexShapeLocation) {\n    gpgpu.gl.uniform2i(\n        binary.outTexShapeLocation, output.texData.texShape[0],\n        output.texData.texShape[1]);\n  }\n\n  if (binary.program.customUniforms && customUniformValues) {\n    for (let i = 0; i < binary.program.customUniforms.length; ++i) {\n      const d = binary.program.customUniforms[i];\n      const customLoc = binary.customUniformLocations[i];\n      const customValue = customUniformValues[i];\n      if (d.type === 'float') {\n        gpgpu.gl.uniform1fv(customLoc, customValue);\n      } else if (d.type === 'vec2') {\n        gpgpu.gl.uniform2fv(customLoc, customValue);\n      } else if (d.type === 'vec3') {\n        gpgpu.gl.uniform3fv(customLoc, customValue);\n      } else if (d.type === 'vec4') {\n        gpgpu.gl.uniform4fv(customLoc, customValue);\n      } else if (d.type === 'int') {\n        gpgpu.gl.uniform1iv(customLoc, customValue);\n      } else if (d.type === 'ivec2') {\n        gpgpu.gl.uniform2iv(customLoc, customValue);\n      } else if (d.type === 'ivec3') {\n        gpgpu.gl.uniform3iv(customLoc, customValue);\n      } else if (d.type === 'ivec4') {\n        gpgpu.gl.uniform4iv(customLoc, customValue);\n      } else {\n        throw Error(`uniform type ${d.type} is not supported yet.`);\n      }\n    }\n  }\n  gpgpu.executeProgram();\n}\n\nexport function makeShaderKey(\n    program: GPGPUProgram, inputs: TensorData[], output: TensorData): string {\n  let keyInputs = '';\n  inputs.concat(output).forEach(x => {\n    const hasOffset = x.texData != null && x.texData.slice != null &&\n        x.texData.slice.flatOffset > 0;\n    // TODO: Remove the condition of !x.isUniform.\n    if (program.enableShapeUniforms && !x.isUniform) {\n      const xTexShape = x.texData.texShape;\n      const {useSqueezeShape, uniformShape, keptDims} =\n          shader_compiler.getUniformInfoFromShape(\n              program.packedInputs, x.shape, xTexShape);\n      let rank1 = '', rank2 = '', rank34 = '';\n      if (uniformShape.length === 1 && program.packedInputs) {\n        const packedTexShape =\n            [Math.ceil(xTexShape[0] / 2), Math.ceil(xTexShape[1] / 2)];\n        rank1 = `${packedTexShape[0] > 1}_${packedTexShape[1] > 1}`;\n      } else if (uniformShape.length === 2 && !program.packedInputs) {\n        rank2 = `${uniformShape[0] > 1}_${uniformShape[1] > 1}`;\n      } else if (uniformShape.length > 2 && !program.packedInputs) {\n        const strides = util.computeStrides(uniformShape);\n        rank34 = `${strides[0] === xTexShape[1]}_${\n            strides[strides.length - 1] === xTexShape[1]}`;\n      }\n      const xRank = x.shape.length;\n      const isLogicalShapTexShapeEqual =\n          uniformShape.length === 2 && util.arraysEqual(x.shape, xTexShape);\n      const isScalar = util.sizeFromShape(x.shape) === 1;\n      const broadcastDims =\n          backend_util.getBroadcastDims(x.shape, output.shape);\n      const isInOutTexShapeEqual = !program.packedInputs &&\n          xRank === output.shape.length &&\n          util.arraysEqual(xTexShape, output.texData.texShape);\n      const isTexShapeGreaterThanOne =\n          program.packedInputs || uniformShape.length > 2 ?\n          '' :\n          `${xTexShape[0] > 1}_${xTexShape[1] > 1}`;\n      // These key components are needed due to shader_compiler is embedding\n      // them in the shader.\n      // |xRank| is used to determine the coords length. See\n      // get[Packed]SamplerAtOutputCoords.\n      // |isInOutTexShapeEqual| is used to determine whether going to an\n      // optimization path in getSamplerAtOutputCoords.\n      // |useSqueezeShape| is extracted from squeezeInputInfo of\n      // getSampler[2|3|4]D/getPackedSampler3D.\n      // |isScalar| is extracted from isInputScalar/isOutputScalar in\n      // getPackedSamplerAtOutputCoords.\n      // |broadcastDims| is extracted from get[Packed]SamplerAtOutputCoords.\n      // |isLogicalShapTexShapeEqual| is used in\n      // getOutput[Packed]2DCoords/get[Packed]Sampler2D.\n      // |rank1| is used in getOutputPacked1DCoords.\n      // |rank2| is used in getOutput2DCoords.\n      // |rank34| is used in getSampler3D/getSampler4D.\n      // |isTexShapeGreaterThanOne| are used in\n      // getSampler[Scalar|1D|2D]/getOutput1DCoords.\n      keyInputs += `${xRank}_${isInOutTexShapeEqual}_${\n          useSqueezeShape ? keptDims : ''}_${uniformShape.length}_${isScalar}_${\n          broadcastDims}_${isLogicalShapTexShapeEqual}_${rank1}_${rank2}_${\n          rank34}_${isTexShapeGreaterThanOne}_${hasOffset}`;\n    } else {\n      const texShape = x.isUniform ? 'uniform' : x.texData.texShape;\n      keyInputs += `${x.shape}_${texShape}_${hasOffset}`;\n    }\n  });\n  const keyUserCode = program.userCode;\n  let key = program.constructor.name;\n  // Fast string concat. See https://jsperf.com/string-concatenation/14.\n  key += '_' + keyInputs + '_' + keyUserCode +\n      `${env().getNumber('WEBGL_VERSION')}`;\n  return key;\n}\n\nexport function useShapeUniforms(rank: number) {\n  // TODO: Remove the limitaion of rank <= 4.\n  return env().getBool('WEBGL_USE_SHAPES_UNIFORMS') && rank <= 4;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\nimport {PackingScheme} from './tex_util';\n\nexport class DecodeMatrixProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: [number, number, number];\n  packedInputs = false;\n  packedOutput = true;\n  outPackingScheme = PackingScheme.DENSE;\n  enableShapeUniforms: boolean;\n  customUniforms = [{name: 'texShape', type: 'ivec2' as const }];\n\n  constructor(outputShape: [number, number, number]) {\n    const glsl = getGlslDifferences();\n    this.outputShape = outputShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n\n    this.userCode = `\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${\n        this.enableShapeUniforms ?\n            shader_util.getOutputLogicalCoordinatesFromFlatIndexByUniform(\n                ['r', 'c', 'd'], outputShape) :\n            shader_util.getLogicalCoordinatesFromFlatIndex(\n                ['r', 'c', 'd'], outputShape)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        ${glsl.output} = result;\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\nimport {PackingScheme} from './tex_util';\n\nexport class DecodeMatrixPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: [number, number, number];\n  outPackingScheme = PackingScheme.DENSE;\n  enableShapeUniforms: boolean;\n  customUniforms = [{name: 'texShape', type: 'ivec2' as const }];\n\n  constructor(outputShape: [number, number, number]) {\n    const glsl = getGlslDifferences();\n    this.outputShape = outputShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n\n    this.userCode = `\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${\n        this.enableShapeUniforms ?\n            shader_util.getOutputLogicalCoordinatesFromFlatIndexByUniform(\n                ['r', 'c', 'd'], outputShape) :\n            shader_util.getLogicalCoordinatesFromFlatIndex(\n                ['r', 'c', 'd'], outputShape)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        ${glsl.output} = result;\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram} from './gpgpu_math';\nimport {ENCODE_FLOAT_SNIPPET} from './shader_compiler_util';\nimport {TextureUsage} from './tex_util';\n\nexport class EncodeFloatProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n  outTexUsage = TextureUsage.DOWNLOAD;\n\n  constructor(outputShape: number[]) {\n    const glsl = getGlslDifferences();\n    this.outputShape = outputShape;\n    this.userCode = `\n      ${ENCODE_FLOAT_SNIPPET}\n\n      void main() {\n        float x = getAAtOutCoords();\n        ${glsl.output} = encode_float(x);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram} from './gpgpu_math';\nimport {ENCODE_FLOAT_SNIPPET} from './shader_compiler_util';\nimport {TextureUsage} from './tex_util';\n\nexport class EncodeFloatPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n  packedInputs = true;\n  packedOutput = false;\n  outTexUsage = TextureUsage.DOWNLOAD;\n\n  constructor(outputShape: [number, number, number]) {\n    const glsl = getGlslDifferences();\n    this.outputShape = outputShape;\n    this.userCode = `\n      ${ENCODE_FLOAT_SNIPPET}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        ${glsl.output} = encode_float(x);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\n\nconst CHANNEL_CHAR_TO_INDEX_MAP: Record<string, number> = {\n  'R': 0,\n  'G': 1,\n  'B': 2,\n  'A': 3\n};\n\nexport class EncodeMatrixProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n  enableShapeUniforms: boolean;\n  customUniforms = [{name: 'texShape', type: 'ivec2' as const }];\n\n  constructor(\n      outputShape: [number, number, number], inputIsUnsignedByte = false,\n      usedChannels = 'RGBA') {\n    const glsl = getGlslDifferences();\n    this.outputShape = outputShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n\n    let output = `result`;\n    if (inputIsUnsignedByte) {\n      output = `floor(result * 255. + 0.5)`;\n    }\n\n    let mainLoop = '';\n    for (let usedChannelIndex = 0; usedChannelIndex < usedChannels.length;\n         usedChannelIndex++) {\n      const curChannel = usedChannels[usedChannelIndex];\n      mainLoop += `\n          if(offset == ${usedChannelIndex}) {\n            result = values[${CHANNEL_CHAR_TO_INDEX_MAP[curChannel]}];\n          }`;\n    }\n\n    this.userCode = `\n      ${\n        this.enableShapeUniforms ? shader_util.getFlatIndexFrom3DOutput() :\n                                   shader_util.getFlatIndexFrom3D(outputShape)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int flatIndex = getFlatIndex(coords);\n        float result = 0.;\n        int offset = imod(flatIndex, ${usedChannels.length});\n\n        flatIndex = idiv(flatIndex, ${usedChannels.length}, 1.);\n\n        int r = flatIndex / texShape[1];\n        if (r < texShape[0]) {\n          int c = imod(flatIndex, texShape[1]);\n          vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n          vec4 values = ${glsl.texture2D}(A, uv);\n          ${mainLoop}\n        }\n        ${glsl.output} = vec4(${output}, 0., 0., 0.);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\n\n/*\nThis is how the shader encodes a tensor with shape = [2, 3, 5]\n(indices are [batch, row, col]).\n\n000|001   002|003   004|xxx   020|021   022|023   024|xxx\n-------   -------   -------   -------   -------   -------\n010|011   012|013   014|xxx   xxx|xxx   xxx|xxx   xxx|xxx\n\n100|101   102|103   104|xxx   120|121   122|123   124|xxx\n-------   -------   -------   -------   -------   -------\n110|111   112|113   114|xxx   xxx|xxx   xxx|xxx   xxx|xxx\n\nSingle texels contain only values from the same batch, and from adjacent rows\nand columns.\n */\n\nexport class EncodeMatrixPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n  packedInputs = false;\n  packedOutput = true;\n  enableShapeUniforms: boolean;\n  customUniforms = [{name: 'texShape', type: 'ivec2' as const }];\n\n  constructor(\n      outputShape: [number, number, number], inputIsUnsignedByte = false) {\n    const glsl = getGlslDifferences();\n    this.outputShape = outputShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n\n    let mainLoop = '';\n    let output = 'result';\n    if (inputIsUnsignedByte) {\n      output = 'floor(result * 255. + 0.5)';\n    }\n\n    for (let row = 0; row <= 1; row++) {\n      for (let col = 0; col <= 1; col++) {\n        const channel = row * 2 + col;\n\n        mainLoop += `\n          localCoords = coords;\n          if(localCoords[2] + ${col} < ${\n            this.enableShapeUniforms ? 'outShape[2]' : `${outputShape[2]}`}) {\n          localCoords[2] += ${col};\n          if (localCoords[1] + ${row} < ${\n            this.enableShapeUniforms ? 'outShape[1]' : `${outputShape[1]}`}) {\n            localCoords[1] += ${row};\n\n            flatIndex = getFlatIndex(localCoords);\n            offset = imod(flatIndex, 4);\n\n            flatIndex = idiv(flatIndex, 4, 1.);\n\n            int r = flatIndex / texShape[1];\n            int c = imod(flatIndex, texShape[1]);\n            vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n            values = ${glsl.texture2D}(A, uv);\n\n            if (offset == 0) {\n              result[${channel}] = values[0];\n            } else if (offset == 1) {\n              result[${channel}] = values[1];\n            } else if (offset == 2) {\n              result[${channel}] = values[2];\n            } else {\n              result[${channel}] = values[3];\n            }\n          }\n        }\n        `;\n      }\n    }\n\n    this.userCode = `\n        ${\n        this.enableShapeUniforms ? shader_util.getFlatIndexFrom3DOutput() :\n                                   shader_util.getFlatIndexFrom3D(outputShape)}\n\n        void main() {\n          ivec3 coords = getOutputCoords();\n\n          vec4 result = vec4(0.);\n          int flatIndex, r, c, offset;\n          ivec3 localCoords;\n          vec2 uv;\n          vec4 values;\n\n          ${mainLoop}\n\n          ${glsl.output} = ${output};\n        }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, PixelData, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {getGlslDifferences} from './glsl_version';\nimport * as tex_util from './tex_util';\nimport {Texture, TextureConfig} from './tex_util';\nimport * as webgl_util from './webgl_util';\n\nexport function createVertexShader(gl: WebGLRenderingContext): WebGLShader {\n  const glsl = getGlslDifferences();\n  const vertexShaderSource = `${glsl.version}\n    precision highp float;\n    ${glsl.attribute} vec3 clipSpacePos;\n    ${glsl.attribute} vec2 uv;\n    ${glsl.varyingVs} vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }`;\n  return webgl_util.createVertexShader(gl, vertexShaderSource);\n}\n\nexport function createVertexBuffer(gl: WebGLRenderingContext): WebGLBuffer {\n  // [x y z u v] * [upper-left, lower-left, upper-right, lower-right]\n  const vertexArray = new Float32Array(\n      [-1, 1, 0, 0, 1, -1, -1, 0, 0, 0, 1, 1, 0, 1, 1, 1, -1, 0, 1, 0]);\n  return webgl_util.createStaticVertexBuffer(gl, vertexArray);\n}\n\nexport function createIndexBuffer(gl: WebGLRenderingContext): WebGLBuffer {\n  // OpenGL (and WebGL) have \"CCW == front\" winding\n  const triangleVertexIndices = new Uint16Array([0, 1, 2, 2, 1, 3]);\n  return webgl_util.createStaticIndexBuffer(gl, triangleVertexIndices);\n}\n\nfunction createAndConfigureTexture(\n    gl: WebGLRenderingContext, width: number, height: number,\n    internalFormat: number, textureFormat: number,\n    textureType: number): Texture {\n  webgl_util.validateTextureSize(width, height);\n  const texture = webgl_util.createTexture(gl);\n\n  const tex2d = gl.TEXTURE_2D;\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(tex2d, texture));\n  webgl_util.callAndCheck(\n      gl, () => gl.texParameteri(tex2d, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE));\n  webgl_util.callAndCheck(\n      gl, () => gl.texParameteri(tex2d, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE));\n  webgl_util.callAndCheck(\n      gl, () => gl.texParameteri(tex2d, gl.TEXTURE_MIN_FILTER, gl.NEAREST));\n  webgl_util.callAndCheck(\n      gl, () => gl.texParameteri(tex2d, gl.TEXTURE_MAG_FILTER, gl.NEAREST));\n  if (env().getNumber('WEBGL_VERSION') === 1) {\n    webgl_util.callAndCheck(\n        gl,\n        () => gl.texImage2D(\n            tex2d, 0, internalFormat, width, height, 0, textureFormat,\n            textureType, null));\n  } else {\n    webgl_util.callAndCheck(\n        gl,\n        () => (gl as WebGL2RenderingContext)\n                  .texStorage2D(tex2d, 1, internalFormat, width, height));\n  }\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));\n\n  return {texture, texShape: [height, width]};\n}\n\nexport function getInternalFormatForFloat32MatrixTexture(\n    textureConfig: TextureConfig) {\n  return textureConfig.internalFormatFloat;\n}\n\nexport function createFloat32MatrixTexture(\n    gl: WebGLRenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig): Texture {\n  const [width, height] =\n      tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(\n      gl, width, height,\n      getInternalFormatForFloat32MatrixTexture(textureConfig),\n      textureConfig.textureFormatFloat, gl.FLOAT);\n}\n\nexport function getInternalFormatForFloat16MatrixTexture(\n    textureConfig: TextureConfig) {\n  return textureConfig.internalFormatHalfFloat;\n}\n\nexport function createFloat16MatrixTexture(\n    gl: WebGLRenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig): Texture {\n  const [width, height] =\n      tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(\n      gl, width, height,\n      getInternalFormatForFloat16MatrixTexture(textureConfig),\n      textureConfig.textureFormatFloat, textureConfig.textureTypeHalfFloat);\n}\n\nexport function getInternalFormatForUnsignedBytesMatrixTexture(\n    textureConfig: TextureConfig) {\n  return textureConfig.downloadTextureFormat;\n}\n\nexport function createUnsignedBytesMatrixTexture(\n    gl: WebGLRenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig): Texture {\n  const [width, height] =\n      tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(\n      gl, width, height,\n      getInternalFormatForUnsignedBytesMatrixTexture(textureConfig), gl.RGBA,\n      gl.UNSIGNED_BYTE);\n}\n\nexport function getInternalFormatForPackedMatrixTexture(\n    textureConfig: TextureConfig) {\n  return textureConfig.internalFormatPackedFloat;\n}\n\nexport function createPackedMatrixTexture(\n    gl: WebGLRenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig): Texture {\n  const [width, height] =\n      tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(\n      gl, width, height, getInternalFormatForPackedMatrixTexture(textureConfig),\n      gl.RGBA, gl.FLOAT);\n}\n\nexport function getInternalFormatForFloat16PackedMatrixTexture(\n    textureConfig: TextureConfig) {\n  return textureConfig.internalFormatPackedHalfFloat;\n}\n\nexport function createFloat16PackedMatrixTexture(\n    gl: WebGLRenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig): Texture {\n  const [width, height] =\n      tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(\n      gl, width, height,\n      getInternalFormatForFloat16PackedMatrixTexture(textureConfig), gl.RGBA,\n      textureConfig.textureTypeHalfFloat);\n}\n\nexport function bindVertexProgramAttributeStreams(\n    gl: WebGLRenderingContext, program: WebGLProgram,\n    vertexBuffer: WebGLBuffer): boolean {\n  const posOffset = 0;               // x is the first buffer element\n  const uvOffset = 3 * 4;            // uv comes after [x y z]\n  const stride = (3 * 4) + (2 * 4);  // xyz + uv, each entry is 4-byte float.\n  webgl_util.callAndCheck(\n      gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer));\n  const success = webgl_util.bindVertexBufferToProgramAttribute(\n      gl, program, 'clipSpacePos', vertexBuffer, 3, stride, posOffset);\n  return success &&\n      webgl_util.bindVertexBufferToProgramAttribute(\n          gl, program, 'uv', vertexBuffer, 2, stride, uvOffset);\n}\n\nexport function uploadDenseMatrixToTexture(\n    gl: WebGLRenderingContext, texture: WebGLTexture, width: number,\n    height: number, data: TypedArray, textureConfig: TextureConfig) {\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, texture));\n\n  let dataForUpload: TypedArray, texelDataType: number, internalFormat: number;\n  if (data instanceof Uint8Array) {\n    dataForUpload = new Uint8Array(width * height * 4);\n    texelDataType = gl.UNSIGNED_BYTE;\n    internalFormat = gl.RGBA;\n  } else {\n    dataForUpload = new Float32Array(width * height * 4);\n    texelDataType = gl.FLOAT;\n    internalFormat = textureConfig.internalFormatPackedFloat;\n  }\n\n  dataForUpload.set(data);\n  if (env().getNumber('WEBGL_VERSION') === 2) {\n    webgl_util.callAndCheck(\n        gl,\n        () => gl.texSubImage2D(\n            gl.TEXTURE_2D, 0, 0, 0, width, height, gl.RGBA, texelDataType,\n            dataForUpload));\n  } else {\n    webgl_util.callAndCheck(\n        gl,\n        () => gl.texImage2D(\n            gl.TEXTURE_2D, 0, internalFormat, width, height, 0, gl.RGBA,\n            texelDataType, dataForUpload));\n  }\n\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));\n}\n\nexport function uploadPixelDataToTexture(\n    gl: WebGLRenderingContext, texture: WebGLTexture,\n    pixels: PixelData|ImageData|HTMLImageElement|HTMLCanvasElement|\n    HTMLVideoElement|ImageBitmap) {\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, texture));\n  if ((pixels as PixelData).data instanceof Uint8Array) {\n    if (env().getNumber('WEBGL_VERSION') === 2) {\n      webgl_util.callAndCheck(\n          gl,\n          () => gl.texSubImage2D(\n              gl.TEXTURE_2D, 0, 0, 0, pixels.width, pixels.height, gl.RGBA,\n              gl.UNSIGNED_BYTE, (pixels as PixelData).data));\n    } else {\n      webgl_util.callAndCheck(\n          gl,\n          () => gl.texImage2D(\n              gl.TEXTURE_2D, 0, gl.RGBA, pixels.width, pixels.height, 0,\n              gl.RGBA, gl.UNSIGNED_BYTE, (pixels as PixelData).data));\n    }\n  } else {\n    if (env().getNumber('WEBGL_VERSION') === 2) {\n      webgl_util.callAndCheck(\n          gl,\n          () => gl.texSubImage2D(\n              gl.TEXTURE_2D, 0, 0, 0, gl.RGBA, gl.UNSIGNED_BYTE,\n              (pixels as ImageData | HTMLImageElement | HTMLCanvasElement |\n               HTMLVideoElement | ImageBitmap)));\n    } else {\n      webgl_util.callAndCheck(\n          gl,\n          () => gl.texImage2D(\n              gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE,\n              pixels as ImageData | HTMLImageElement | HTMLCanvasElement |\n                  HTMLVideoElement | ImageBitmap));\n    }\n  }\n\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));\n}\n\nexport function createBufferFromOutputTexture(\n    gl2: WebGL2RenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig): WebGLBuffer {\n  // Create and bind the buffer.\n  const buffer = gl2.createBuffer();\n  webgl_util.callAndCheck(\n      gl2, () => gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer));\n\n  // Initialize the buffer to the size of the texture in bytes.\n  const bytesPerFloat = 4;\n  const valuesPerTexel = 4;\n  const bufferSizeBytes = bytesPerFloat * valuesPerTexel * rows * columns;\n\n  webgl_util.callAndCheck(\n      gl2,\n      () => gl2.bufferData(\n          gl2.PIXEL_PACK_BUFFER, bufferSizeBytes, gl2.STREAM_READ));\n\n  // Enqueue a command on the GPU command queue to copy of texture into the\n  // buffer.\n  webgl_util.callAndCheck(\n      gl2, () => gl2.readPixels(0, 0, columns, rows, gl2.RGBA, gl2.FLOAT, 0));\n\n  webgl_util.callAndCheck(\n      gl2, () => gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null));\n\n  return buffer;\n}\n\nexport function downloadFloat32MatrixFromBuffer(\n    gl: WebGLRenderingContext, buffer: WebGLBuffer,\n    size: number): Float32Array {\n  const gl2 = gl as WebGL2RenderingContext;\n\n  const downloadTarget = new Float32Array(size);\n\n  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer);\n  gl2.getBufferSubData(gl2.PIXEL_PACK_BUFFER, 0, downloadTarget);\n  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null);\n\n  return downloadTarget;\n}\n\nexport function downloadByteEncodedFloatMatrixFromOutputTexture(\n    gl: WebGLRenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig) {\n  const [w, h] =\n      tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n\n  const numChannels = 4;\n  const downloadTarget = new Uint8Array(\n      tex_util.getUnpackedArraySizeFromMatrixSize(rows * columns, numChannels));\n\n  webgl_util.callAndCheck(\n      gl,\n      () => gl.readPixels(\n          0, 0, w, h, textureConfig.downloadTextureFormat, gl.UNSIGNED_BYTE,\n          downloadTarget));\n\n  // By wrapping the buffer in a Float32Array, we use native browser IEEE 754\n  // decoding of the 4 bytes that back each 32 bit float.\n  return new Float32Array(downloadTarget.buffer);\n}\n\nexport function downloadPackedMatrixFromBuffer(\n    gl: WebGLRenderingContext, buffer: WebGLBuffer, batch: number, rows: number,\n    cols: number, physicalRows: number, physicalCols: number,\n    textureConfig: TextureConfig): Float32Array {\n  const gl2 = gl as WebGL2RenderingContext;\n\n  const downloadTarget =\n      new Float32Array(tex_util.getPackedRGBAArraySizeFromMatrixShape(\n          physicalRows, physicalCols));\n\n  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer);\n  gl2.getBufferSubData(gl2.PIXEL_PACK_BUFFER, 0, downloadTarget);\n  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null);\n\n  return downloadTarget;\n}\n\nexport function downloadMatrixFromPackedOutputTexture(\n    gl: WebGLRenderingContext, physicalRows: number,\n    physicalCols: number): Float32Array {\n  const packedRGBA = new Float32Array(physicalRows * physicalCols * 4);\n  webgl_util.callAndCheck(\n      gl,\n      () => gl.readPixels(\n          0, 0, physicalCols, physicalRows, gl.RGBA, gl.FLOAT, packedRGBA));\n\n  return packedRGBA;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, PixelData, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {getWebGLContext, setWebGLContext} from './canvas_util';\nimport * as gpgpu_util from './gpgpu_util';\nimport * as tex_util from './tex_util';\nimport {Texture, TextureConfig} from './tex_util';\nimport {WebGL1DisjointQueryTimerExtension, WebGL2DisjointQueryTimerExtension, WebGLParallelCompilationExtension} from './webgl_types';\nimport * as webgl_util from './webgl_util';\n\nexport interface FenceContext {\n  query: WebGLQuery|WebGLSync;\n  isFencePassed(): boolean;\n}\n\ntype WebGLVao = WebGLVertexArrayObject|WebGLVertexArrayObjectOES;\n\nexport interface GPGPUContextProgram extends WebGLProgram {\n  vao: WebGLVao;\n}\n\nexport class GPGPUContext {\n  gl: WebGLRenderingContext;\n  textureFloatExtension: {};\n  textureHalfFloatExtension: {};\n  colorBufferFloatExtension: {};\n  colorBufferHalfFloatExtension: {};\n  disjointQueryTimerExtension: WebGL2DisjointQueryTimerExtension|\n      WebGL1DisjointQueryTimerExtension;\n  parallelCompilationExtension: WebGLParallelCompilationExtension;\n  vertexBuffer: WebGLBuffer;\n  indexBuffer: WebGLBuffer;\n  framebuffer: WebGLFramebuffer;\n  outputTexture: WebGLTexture|null = null;\n  program: GPGPUContextProgram|null = null;\n  private disposed = false;\n  private disjoint: boolean;\n  private vertexShader: WebGLShader;\n  textureConfig: TextureConfig;\n\n  createVertexArray: () => WebGLVao | null;\n  bindVertexArray: (vao: WebGLVao|null) => void;\n  deleteVertexArray: (vao: WebGLVao|null) => void;\n  getVertexArray: () => WebGLVao | null;\n\n  constructor(gl?: WebGLRenderingContext) {\n    const glVersion = env().getNumber('WEBGL_VERSION');\n    if (gl != null) {\n      this.gl = gl;\n      setWebGLContext(glVersion, gl);\n    } else {\n      this.gl = getWebGLContext(glVersion);\n    }\n    gl = this.gl;\n\n    if (env().getNumber('WEBGL_VERSION') === 2) {\n      const gl2 = gl as WebGL2RenderingContext;\n      this.createVertexArray = () => {\n        return webgl_util.callAndCheck(gl2, () => gl2.createVertexArray());\n      };\n      this.bindVertexArray = (vao: WebGLVao|null) => {\n        return webgl_util.callAndCheck(\n            gl2, () => gl2.bindVertexArray(vao as WebGLVertexArrayObject));\n      };\n      this.deleteVertexArray = (vao: WebGLVao|null) => {\n        return webgl_util.callAndCheck(\n            gl2, () => gl2.deleteVertexArray(vao as WebGLVertexArrayObject));\n      };\n      this.getVertexArray = () => {\n        return webgl_util.callAndCheck(\n            gl2, () => gl2.getParameter(gl2.VERTEX_ARRAY_BINDING));\n      };\n    } else if (gl != null) {\n      const ext = gl.getExtension('OES_vertex_array_object');\n      if (ext == null) {\n        throw new Error(\n            'All WebGL1 implementations are expected to offer' +\n            ' OES_vertex_array_object.');\n      }\n      this.createVertexArray = () => {\n        return webgl_util.callAndCheck(gl, () => ext.createVertexArrayOES());\n      };\n      this.bindVertexArray = (vao: WebGLVao|null) => {\n        return webgl_util.callAndCheck(\n            gl, () => ext.bindVertexArrayOES(vao as WebGLVertexArrayObjectOES));\n      };\n      this.deleteVertexArray = (vao: WebGLVao|null) => {\n        return webgl_util.callAndCheck(\n            gl,\n            () => ext.deleteVertexArrayOES(vao as WebGLVertexArrayObjectOES));\n      };\n      this.getVertexArray = () => {\n        return webgl_util.callAndCheck(\n            gl, () => gl.getParameter(ext.VERTEX_ARRAY_BINDING_OES));\n      };\n    }\n\n    // WebGL 2.0 enables texture floats without an extension.\n    let COLOR_BUFFER_FLOAT = 'WEBGL_color_buffer_float';\n    const COLOR_BUFFER_HALF_FLOAT = 'EXT_color_buffer_half_float';\n    this.parallelCompilationExtension =\n        this.gl.getExtension('KHR_parallel_shader_compile');\n    if (env().getNumber('WEBGL_VERSION') === 1) {\n      const TEXTURE_FLOAT = 'OES_texture_float';\n      const TEXTURE_HALF_FLOAT = 'OES_texture_half_float';\n\n      this.textureFloatExtension =\n          webgl_util.getExtensionOrThrow(this.gl, TEXTURE_FLOAT);\n      if (webgl_util.hasExtension(this.gl, TEXTURE_HALF_FLOAT)) {\n        this.textureHalfFloatExtension =\n            webgl_util.getExtensionOrThrow(this.gl, TEXTURE_HALF_FLOAT);\n      } else if (env().get('WEBGL_FORCE_F16_TEXTURES')) {\n        throw new Error(\n            'GL context does not support half float textures, yet the ' +\n            'environment flag WEBGL_FORCE_F16_TEXTURES is set to true.');\n      }\n\n      this.colorBufferFloatExtension = this.gl.getExtension(COLOR_BUFFER_FLOAT);\n      if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_HALF_FLOAT)) {\n        this.colorBufferHalfFloatExtension =\n            webgl_util.getExtensionOrThrow(this.gl, COLOR_BUFFER_HALF_FLOAT);\n      } else if (env().get('WEBGL_FORCE_F16_TEXTURES')) {\n        throw new Error(\n            'GL context does not support color renderable half floats, yet ' +\n            'the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.');\n      }\n    } else {\n      COLOR_BUFFER_FLOAT = 'EXT_color_buffer_float';\n      if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_FLOAT)) {\n        this.colorBufferFloatExtension =\n            this.gl.getExtension(COLOR_BUFFER_FLOAT);\n      } else if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_HALF_FLOAT)) {\n        this.colorBufferHalfFloatExtension =\n            this.gl.getExtension(COLOR_BUFFER_HALF_FLOAT);\n      } else {\n        throw new Error('GL context does not support color renderable floats');\n      }\n    }\n\n    this.vertexBuffer = gpgpu_util.createVertexBuffer(this.gl);\n    this.indexBuffer = gpgpu_util.createIndexBuffer(this.gl);\n    this.framebuffer = webgl_util.createFramebuffer(this.gl);\n\n    this.textureConfig =\n        tex_util.getTextureConfig(this.gl, this.textureHalfFloatExtension);\n  }\n\n  private get debug(): boolean {\n    return env().getBool('DEBUG');\n  }\n\n  public dispose() {\n    if (this.disposed) {\n      return;\n    }\n    if (this.program != null) {\n      console.warn(\n          'Disposing a GPGPUContext that still has a bound WebGLProgram.' +\n          ' This is probably a resource leak, delete the program with ' +\n          'GPGPUContext.deleteProgram before disposing.');\n    }\n    if (this.outputTexture != null) {\n      console.warn(\n          'Disposing a GPGPUContext that still has a bound output matrix ' +\n          'texture.  This is probably a resource leak, delete the output ' +\n          'matrix texture with GPGPUContext.deleteMatrixTexture before ' +\n          'disposing.');\n    }\n    const gl = this.gl;\n    webgl_util.callAndCheck(gl, () => gl.finish());\n    webgl_util.callAndCheck(gl, () => gl.bindFramebuffer(gl.FRAMEBUFFER, null));\n    webgl_util.callAndCheck(gl, () => gl.deleteFramebuffer(this.framebuffer));\n    webgl_util.callAndCheck(gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, null));\n    webgl_util.callAndCheck(\n        gl, () => gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null));\n    webgl_util.callAndCheck(gl, () => gl.deleteBuffer(this.indexBuffer));\n    this.disposed = true;\n  }\n\n  public createFloat32MatrixTexture(rows: number, columns: number): Texture {\n    this.throwIfDisposed();\n    return gpgpu_util.createFloat32MatrixTexture(\n        this.gl, rows, columns, this.textureConfig);\n  }\n\n  public createFloat16MatrixTexture(rows: number, columns: number): Texture {\n    this.throwIfDisposed();\n    return gpgpu_util.createFloat16MatrixTexture(\n        this.gl, rows, columns, this.textureConfig);\n  }\n\n  public createUnsignedBytesMatrixTexture(rows: number, columns: number):\n      Texture {\n    this.throwIfDisposed();\n    return gpgpu_util.createUnsignedBytesMatrixTexture(\n        this.gl, rows, columns, this.textureConfig);\n  }\n\n  public uploadPixelDataToTexture(\n      texture: WebGLTexture,\n      pixels: PixelData|ImageData|HTMLImageElement|HTMLCanvasElement|\n      ImageBitmap) {\n    this.throwIfDisposed();\n    gpgpu_util.uploadPixelDataToTexture(this.gl, texture, pixels);\n  }\n\n  public uploadDenseMatrixToTexture(\n      texture: WebGLTexture, width: number, height: number, data: TypedArray) {\n    this.throwIfDisposed();\n    gpgpu_util.uploadDenseMatrixToTexture(\n        this.gl, texture, width, height, data, this.textureConfig);\n  }\n\n  public createFloat16PackedMatrixTexture(rows: number, columns: number):\n      Texture {\n    this.throwIfDisposed();\n    return gpgpu_util.createFloat16PackedMatrixTexture(\n        this.gl, rows, columns, this.textureConfig);\n  }\n\n  public createPackedMatrixTexture(rows: number, columns: number): Texture {\n    this.throwIfDisposed();\n    return gpgpu_util.createPackedMatrixTexture(\n        this.gl, rows, columns, this.textureConfig);\n  }\n\n  public deleteMatrixTexture(texture: WebGLTexture) {\n    this.throwIfDisposed();\n    if (this.outputTexture === texture) {\n      webgl_util.unbindColorTextureFromFramebuffer(this.gl, this.framebuffer);\n      this.outputTexture = null;\n    }\n    webgl_util.callAndCheck(this.gl, () => this.gl.deleteTexture(texture));\n  }\n\n  public downloadByteEncodedFloatMatrixFromOutputTexture(\n      texture: WebGLTexture, rows: number, columns: number): Float32Array {\n    return this.downloadMatrixDriver(\n        texture,\n        () => gpgpu_util.downloadByteEncodedFloatMatrixFromOutputTexture(\n            this.gl, rows, columns, this.textureConfig));\n  }\n\n  public downloadPackedMatrixFromBuffer(\n      buffer: WebGLBuffer, batch: number, rows: number, columns: number,\n      physicalRows: number, physicalCols: number): Float32Array {\n    return gpgpu_util.downloadPackedMatrixFromBuffer(\n        this.gl, buffer, batch, rows, columns, physicalRows, physicalCols,\n        this.textureConfig);\n  }\n\n  public downloadFloat32MatrixFromBuffer(buffer: WebGLBuffer, size: number):\n      Float32Array {\n    return gpgpu_util.downloadFloat32MatrixFromBuffer(this.gl, buffer, size);\n  }\n\n  public createBufferFromTexture(\n      texture: WebGLTexture, rows: number, columns: number): WebGLBuffer {\n    this.bindTextureToFrameBuffer(texture);\n    const result = gpgpu_util.createBufferFromOutputTexture(\n        this.gl as WebGL2RenderingContext, rows, columns, this.textureConfig);\n    this.unbindTextureToFrameBuffer();\n    return result;\n  }\n\n  public createAndWaitForFence(): Promise<void> {\n    const fenceContext = this.createFence(this.gl);\n    return this.pollFence(fenceContext);\n  }\n\n  private createFence(gl: WebGLRenderingContext): FenceContext {\n    let query: WebGLQuery|WebGLSync;\n    let isFencePassed: () => boolean;\n\n    if (env().getBool('WEBGL_FENCE_API_ENABLED')) {\n      const gl2 = gl as WebGL2RenderingContext;\n\n      const sync = gl2.fenceSync(gl2.SYNC_GPU_COMMANDS_COMPLETE, 0);\n      gl.flush();\n\n      isFencePassed = () => {\n        const status = gl2.clientWaitSync(sync, 0, 0);\n        return status === gl2.ALREADY_SIGNALED ||\n            status === gl2.CONDITION_SATISFIED;\n      };\n\n      query = sync;\n    } else if (\n        env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') > 0) {\n      query = this.beginQuery();\n      this.endQuery();\n      isFencePassed = () => this.isQueryAvailable(\n          query,\n          env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION'));\n    } else {\n      // If we have no way to fence, return true immediately. This will fire in\n      // WebGL 1.0 when there is no disjoint query timer. In this case, because\n      // the fence passes immediately, we'll immediately ask for a download of\n      // the texture, which will cause the UI thread to hang.\n      isFencePassed = () => true;\n    }\n\n    return {query, isFencePassed};\n  }\n\n  public downloadMatrixFromPackedTexture(\n      texture: WebGLTexture, physicalRows: number,\n      physicalCols: number): Float32Array {\n    return this.downloadMatrixDriver(\n        texture,\n        () => gpgpu_util.downloadMatrixFromPackedOutputTexture(\n            this.gl, physicalRows, physicalCols));\n  }\n\n  public createProgram(fragmentShader: WebGLShader): GPGPUContextProgram {\n    this.throwIfDisposed();\n    const gl = this.gl;\n    if (this.vertexShader == null) {\n      this.vertexShader = gpgpu_util.createVertexShader(gl);\n    }\n    const program: WebGLProgram = webgl_util.createProgram(gl);\n    webgl_util.callAndCheck(\n        gl, () => gl.attachShader(program, this.vertexShader));\n    webgl_util.callAndCheck(gl, () => gl.attachShader(program, fragmentShader));\n    webgl_util.linkProgram(gl, program);\n\n    let program2: GPGPUContextProgram;\n    {\n      program2 = Object.assign(program, {\n        vao: this.createVertexArray(),\n      });\n      this.bindVertexArray(program2.vao);\n      // Bind index buffer, and vertex buffers based on program attrib\n      // locations.\n      webgl_util.callAndCheck(\n          gl, () => gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer));\n      console.assert(\n          gpgpu_util.bindVertexProgramAttributeStreams(\n              gl, program2, this.vertexBuffer),\n          'gpgpu_util.bindVertexProgramAttributeStreams not fully successful.');\n\n      if (this.debug) {\n        webgl_util.validateProgram(gl, program2);\n      }\n    }\n    this.setProgram(program2);\n\n    return program2;\n  }\n\n  public deleteProgram(program: GPGPUContextProgram) {\n    this.throwIfDisposed();\n    if (program === this.program) {\n      this.program = null;\n    }\n    if (program != null) {\n      webgl_util.callAndCheck(this.gl, () => this.gl.deleteProgram(program));\n      this.deleteVertexArray(program.vao);\n    }\n  }\n\n  public setProgram(program: GPGPUContextProgram|null) {\n    this.throwIfDisposed();\n    this.program = program;\n\n    if (this.program != null) {\n      this.bindVertexArray(this.program.vao);\n\n      if (this.debug) {\n        webgl_util.validateProgram(this.gl, this.program);\n      }\n    }\n    webgl_util.callAndCheck(this.gl, () => this.gl.useProgram(program));\n  }\n\n  public getUniformLocation(\n      program: WebGLProgram, uniformName: string,\n      shouldThrow = true): WebGLUniformLocation {\n    this.throwIfDisposed();\n    if (shouldThrow) {\n      return webgl_util.getProgramUniformLocationOrThrow(\n          this.gl, program, uniformName);\n    } else {\n      return webgl_util.getProgramUniformLocation(\n          this.gl, program, uniformName);\n    }\n  }\n\n  public getAttributeLocation(program: WebGLProgram, attribute: string):\n      number {\n    this.throwIfDisposed();\n    return webgl_util.callAndCheck(\n        this.gl, () => this.gl.getAttribLocation(program, attribute));\n  }\n\n  public getUniformLocationNoThrow(program: WebGLProgram, uniformName: string):\n      WebGLUniformLocation {\n    this.throwIfDisposed();\n    return this.gl.getUniformLocation(program, uniformName);\n  }\n\n  public setInputMatrixTexture(\n      inputMatrixTexture: WebGLTexture, uniformLocation: WebGLUniformLocation,\n      textureUnit: number) {\n    this.throwIfDisposed();\n    this.throwIfNoProgram();\n    webgl_util.bindTextureToProgramUniformSampler(\n        this.gl, inputMatrixTexture, uniformLocation, textureUnit);\n  }\n\n  public setOutputMatrixTexture(\n      outputMatrixTexture: WebGLTexture, rows: number, columns: number) {\n    this.setOutputMatrixTextureDriver(outputMatrixTexture, columns, rows);\n  }\n\n  public setOutputPackedMatrixTexture(\n      outputPackedMatrixTexture: WebGLTexture, rows: number, columns: number) {\n    this.throwIfDisposed();\n    const [width, height] =\n        tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns);\n    this.setOutputMatrixTextureDriver(outputPackedMatrixTexture, width, height);\n  }\n\n  public setOutputMatrixWriteRegion(\n      startRow: number, numRows: number, startColumn: number,\n      numColumns: number) {\n    this.setOutputMatrixWriteRegionDriver(\n        startColumn, startRow, numColumns, numRows);\n  }\n\n  public setOutputPackedMatrixWriteRegion(\n      startRow: number, numRows: number, startColumn: number,\n      numColumns: number) {\n    throw new Error('setOutputPackedMatrixWriteRegion not implemented.');\n  }\n\n  public debugValidate() {\n    if (this.program != null) {\n      webgl_util.validateProgram(this.gl, this.program);\n    }\n    webgl_util.validateFramebuffer(this.gl);\n  }\n\n  public executeProgram() {\n    this.throwIfDisposed();\n    this.throwIfNoProgram();\n    const gl = this.gl;\n    if (this.debug) {\n      const boundVao = this.getVertexArray();\n      console.assert(\n          boundVao === this.program.vao,\n          'VAO changed between setProgram and executeProgram!');\n\n      this.debugValidate();\n    }\n    webgl_util.callAndCheck(\n        gl, () => gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0));\n  }\n\n  public blockUntilAllProgramsCompleted() {\n    this.throwIfDisposed();\n    webgl_util.callAndCheck(this.gl, () => this.gl.finish());\n  }\n\n  private getQueryTimerExtension(): WebGL1DisjointQueryTimerExtension\n      |WebGL2DisjointQueryTimerExtension {\n    if (this.disjointQueryTimerExtension == null) {\n      this.disjointQueryTimerExtension =\n          webgl_util.getExtensionOrThrow(\n              this.gl,\n              env().getNumber(\n                  'WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2 ?\n                  'EXT_disjoint_timer_query_webgl2' :\n                  'EXT_disjoint_timer_query') as\n              WebGL1DisjointQueryTimerExtension |\n          WebGL2DisjointQueryTimerExtension;\n    }\n    return this.disjointQueryTimerExtension;\n  }\n\n  private getQueryTimerExtensionWebGL2(): WebGL2DisjointQueryTimerExtension {\n    return this.getQueryTimerExtension();\n  }\n\n  private getQueryTimerExtensionWebGL1(): WebGL1DisjointQueryTimerExtension {\n    return this.getQueryTimerExtension() as WebGL1DisjointQueryTimerExtension;\n  }\n\n  beginQuery(): WebGLQuery {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.getQueryTimerExtensionWebGL2();\n\n      const query = gl2.createQuery();\n      gl2.beginQuery(ext.TIME_ELAPSED_EXT, query);\n      return query;\n    }\n    const ext = this.getQueryTimerExtensionWebGL1();\n    const query = ext.createQueryEXT() as WebGLQuery;\n    ext.beginQueryEXT(ext.TIME_ELAPSED_EXT, query);\n    return query;\n  }\n\n  endQuery() {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.getQueryTimerExtensionWebGL2();\n      gl2.endQuery(ext.TIME_ELAPSED_EXT);\n      return;\n    }\n    const ext = this.getQueryTimerExtensionWebGL1();\n    ext.endQueryEXT(ext.TIME_ELAPSED_EXT);\n  }\n\n  public async waitForQueryAndGetTime(query: WebGLQuery): Promise<number> {\n    await util.repeatedTry(\n        () => this.disposed ||  // while testing contexts are created / disposed\n                                // in rapid succession, so without this check we\n                                // may poll for the query timer indefinitely\n            this.isQueryAvailable(\n                query,\n                env().getNumber(\n                    'WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION')));\n    return this.getQueryTime(\n        query, env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION'));\n  }\n\n  private getQueryTime(query: WebGLQuery, queryTimerVersion: number): number {\n    if (queryTimerVersion === 0) {\n      return null;\n    }\n\n    if (queryTimerVersion === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n\n      const timeElapsedNanos = gl2.getQueryParameter(query, gl2.QUERY_RESULT);\n      // Return milliseconds.\n      return timeElapsedNanos / 1000000;\n    } else {\n      const ext = this.getQueryTimerExtensionWebGL1();\n\n      const timeElapsedNanos =\n          ext.getQueryObjectEXT(query, ext.QUERY_RESULT_EXT);\n      // Return milliseconds.\n      return timeElapsedNanos / 1000000;\n    }\n  }\n\n  private isQueryAvailable(query: WebGLQuery, queryTimerVersion: number):\n      boolean {\n    if (queryTimerVersion === 0) {\n      return true;\n    }\n\n    if (queryTimerVersion === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.getQueryTimerExtensionWebGL2();\n\n      const available =\n          gl2.getQueryParameter(query, gl2.QUERY_RESULT_AVAILABLE);\n      if (this.disjoint == null) {\n        this.disjoint = this.gl.getParameter(ext.GPU_DISJOINT_EXT);\n      }\n\n      return available && !this.disjoint;\n    } else {\n      const ext = this.getQueryTimerExtensionWebGL1();\n\n      const available =\n          ext.getQueryObjectEXT(query, ext.QUERY_RESULT_AVAILABLE_EXT);\n      if (this.disjoint == null) {\n        this.disjoint = this.gl.getParameter(ext.GPU_DISJOINT_EXT);\n      }\n\n      return available && !this.disjoint;\n    }\n  }\n\n  pollFence(fenceContext: FenceContext) {\n    return new Promise<void>(resolve => {\n      this.addItemToPoll(() => fenceContext.isFencePassed(), () => resolve());\n    });\n  }\n\n  private itemsToPoll: PollItem[] = [];\n\n  pollItems(): void {\n    // Find the last query that has finished.\n    const index = linearSearchLastTrue(this.itemsToPoll.map(x => x.isDoneFn));\n    for (let i = 0; i <= index; ++i) {\n      const {resolveFn} = this.itemsToPoll[i];\n      resolveFn();\n    }\n    this.itemsToPoll = this.itemsToPoll.slice(index + 1);\n  }\n\n  private addItemToPoll(isDoneFn: () => boolean, resolveFn: () => void) {\n    this.itemsToPoll.push({isDoneFn, resolveFn});\n    if (this.itemsToPoll.length > 1) {\n      // We already have a running loop that polls.\n      return;\n    }\n    // Start a new loop that polls.\n    let scheduleFn = undefined;\n    if ('setTimeoutCustom' in env().platform) {\n      scheduleFn = env().platform.setTimeoutCustom.bind(env().platform);\n    }\n    util.repeatedTry(() => {\n      this.pollItems();\n      // End the loop if no more items to poll.\n      return this.itemsToPoll.length === 0;\n    }, () => 0, null, scheduleFn);\n  }\n\n  private bindTextureToFrameBuffer(texture: WebGLTexture) {\n    this.throwIfDisposed();\n    webgl_util.bindColorTextureToFramebuffer(\n        this.gl, texture, this.framebuffer);\n    if (this.debug) {\n      webgl_util.validateFramebuffer(this.gl);\n    }\n  }\n\n  private unbindTextureToFrameBuffer() {\n    if (this.outputTexture != null) {\n      webgl_util.bindColorTextureToFramebuffer(\n          this.gl, this.outputTexture, this.framebuffer);\n      if (this.debug) {\n        webgl_util.validateFramebuffer(this.gl);\n      }\n    } else {\n      webgl_util.unbindColorTextureFromFramebuffer(this.gl, this.framebuffer);\n    }\n  }\n\n  private downloadMatrixDriver(\n      texture: WebGLTexture,\n      downloadAndDecode: () => Float32Array): Float32Array {\n    this.bindTextureToFrameBuffer(texture);\n    const result = downloadAndDecode();\n    this.unbindTextureToFrameBuffer();\n\n    return result;\n  }\n\n  private setOutputMatrixTextureDriver(\n      outputMatrixTextureMaybePacked: WebGLTexture, width: number,\n      height: number) {\n    this.throwIfDisposed();\n    const gl = this.gl;\n    webgl_util.bindColorTextureToFramebuffer(\n        gl, outputMatrixTextureMaybePacked, this.framebuffer);\n    if (this.debug) {\n      webgl_util.validateFramebuffer(gl);\n    }\n    this.outputTexture = outputMatrixTextureMaybePacked;\n    webgl_util.callAndCheck(gl, () => gl.viewport(0, 0, width, height));\n    webgl_util.callAndCheck(gl, () => gl.scissor(0, 0, width, height));\n  }\n\n  private setOutputMatrixWriteRegionDriver(\n      x: number, y: number, width: number, height: number) {\n    this.throwIfDisposed();\n    webgl_util.callAndCheck(\n        this.gl, () => this.gl.scissor(x, y, width, height));\n  }\n\n  private throwIfDisposed() {\n    if (this.disposed) {\n      throw new Error('Attempted to use disposed GPGPUContext.');\n    }\n  }\n\n  private throwIfNoProgram() {\n    if (this.program == null) {\n      throw new Error('No GPU program is currently set.');\n    }\n  }\n}\n\ntype PollItem = {\n  isDoneFn: () => boolean,\n  resolveFn: () => void\n};\n\n/**\n * Finds the index of the last true element using linear search.\n * Note: We can't do binary search because Chrome expects us to explicitly\n * test all fences before download:\n * https://github.com/tensorflow/tfjs/issues/1145\n */\nexport function linearSearchLastTrue(arr: Array<() => boolean>): number {\n  let i = 0;\n  for (; i < arr.length; ++i) {\n    const isDone = arr[i]();\n    if (!isDone) {\n      break;\n    }\n  }\n  return i - 1;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, DataValues, NumericDataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {SimpleBinaryKernelImpl, SimpleBinaryOperation} from './binary_types';\n\n/**\n * Template that creates implementation for binary ops. Supports broadcast.\n */\nexport function createSimpleBinaryKernelImpl(op: SimpleBinaryOperation):\n    SimpleBinaryKernelImpl {\n  return (aShape: number[], bShape: number[], aVals: DataValues,\n          bVals: DataValues, dtype: DataType): [TypedArray, number[]] => {\n    const newShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n\n    const resultRank = newShape.length;\n    const resultStrides = util.computeStrides(newShape);\n    const resultSize = util.sizeFromShape(newShape);\n\n    const result =\n        util.getTypedArrayFromDType(dtype as NumericDataType, resultSize);\n\n    const aRank = aShape.length;\n    const bRank = bShape.length;\n\n    const aStrides = util.computeStrides(aShape);\n    const bStrides = util.computeStrides(bShape);\n\n    const aBroadcastDims = backend_util.getBroadcastDims(aShape, newShape);\n    const bBroadcastDims = backend_util.getBroadcastDims(bShape, newShape);\n\n    if (aBroadcastDims.length + bBroadcastDims.length === 0) {\n      for (let i = 0; i < result.length; ++i) {\n        result[i] = op(aVals[i % aVals.length], bVals[i % bVals.length]);\n      }\n    } else {\n      for (let i = 0; i < result.length; ++i) {\n        const loc = util.indexToLoc(i, resultRank, resultStrides);\n\n        const aLoc = loc.slice(-aRank);\n        aBroadcastDims.forEach(d => aLoc[d] = 0);\n        const aIndex = util.locToIndex(aLoc, aRank, aStrides);\n\n        const bLoc = loc.slice(-bRank);\n        bBroadcastDims.forEach(d => bLoc[d] = 0);\n        const bIndex = util.locToIndex(bLoc, bRank, bStrides);\n\n        result[i] = op(aVals[aIndex], bVals[bIndex]);\n      }\n    }\n\n    return [result, newShape];\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Add, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc, createComplexBinaryKernelImpl} from '../utils/binary_utils';\n\nexport const addImpl =\n    createSimpleBinaryKernelImpl(((a: number, b: number) => a + b));\nexport const addComplexImpl =\n    createComplexBinaryKernelImpl(((aReal, aImag, bReal, bImag) => {\n      return {real: aReal + bReal, imag: aImag + bImag};\n    }));\n\nexport const add = binaryKernelFunc(Add, addImpl, addComplexImpl);\n\nexport const addConfig: KernelConfig = {\n  kernelName: Add,\n  backendName: 'cpu',\n  kernelFunc: add\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {util} from '@tensorflow/tfjs-core';\n\nimport {SimpleUnaryImpl, SimpleUnaryOperation} from './unary_types';\n\n/**\n * Template that creates implementation for unary op.\n */\nexport function createSimpleUnaryImpl<I extends number | string = number,\n  O extends number | string = number>(op: SimpleUnaryOperation<I, O>):\n    SimpleUnaryImpl<I, O> {\n  return (values, dtype, attrs) => {\n    const newValues =\n        util.getArrayFromDType(dtype, values.length);\n    for (let i = 0; i < values.length; ++i) {\n      newValues[i] = op(values[i], attrs);\n    }\n    return newValues;\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Ceil, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const ceilImpl = createSimpleUnaryImpl((xi) => Math.ceil(xi));\nexport const ceil = unaryKernelFuncFromImpl(Ceil, ceilImpl);\n\nexport const ceilConfig: KernelConfig = {\n  kernelName: Ceil,\n  backendName: 'cpu',\n  kernelFunc: ceil,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Equal, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const equalImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a === b) ? 1 : 0);\nexport const equal =\n    binaryKernelFunc(Equal, equalImpl, null /* complexImpl */, 'bool');\n\nexport const equalConfig: KernelConfig = {\n  kernelName: Equal,\n  backendName: 'cpu',\n  kernelFunc: equal\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Exp, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const expImpl = createSimpleUnaryImpl((xi) => Math.exp(xi));\nexport const exp = unaryKernelFuncFromImpl(Exp, expImpl, 'float32');\n\nexport const expConfig: KernelConfig = {\n  kernelName: Exp,\n  backendName: 'cpu',\n  kernelFunc: exp,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Expm1, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const expm1Impl = createSimpleUnaryImpl((xi) => Math.expm1(xi));\nexport const expm1 = unaryKernelFuncFromImpl(Expm1, expm1Impl);\n\nexport const expm1Config: KernelConfig = {\n  kernelName: Expm1,\n  backendName: 'cpu',\n  kernelFunc: expm1,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Floor, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const floorImpl = createSimpleUnaryImpl((xi) => Math.floor(xi));\nexport const floor = unaryKernelFuncFromImpl(Floor, floorImpl);\n\nexport const floorConfig: KernelConfig = {\n  kernelName: Floor,\n  backendName: 'cpu',\n  kernelFunc: floor,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FloorDiv, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const floorDivImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => Math.floor(a / b));\nexport const floorDiv =\n    binaryKernelFunc(FloorDiv, floorDivImpl, null /* complexImpl */, 'int32');\n\nexport const floorDivConfig: KernelConfig = {\n  kernelName: FloorDiv,\n  backendName: 'cpu',\n  kernelFunc: floorDiv\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Greater, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const greaterImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a > b) ? 1 : 0);\nexport const greater =\n    binaryKernelFunc(Greater, greaterImpl, null /* complexImpl */, 'bool');\n\nexport const greaterConfig: KernelConfig = {\n  kernelName: Greater,\n  backendName: 'cpu',\n  kernelFunc: greater\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GreaterEqual, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const greaterEqualImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a >= b) ? 1 : 0);\nexport const greaterEqual = binaryKernelFunc(\n    GreaterEqual, greaterEqualImpl, null /* complexImpl */, 'bool');\n\nexport const greaterEqualConfig: KernelConfig = {\n  kernelName: GreaterEqual,\n  backendName: 'cpu',\n  kernelFunc: greaterEqual\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Less} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const lessImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a < b) ? 1 : 0);\nexport const less =\n    binaryKernelFunc(Less, lessImpl, null /* complexImpl */, 'bool');\n\nexport const lessConfig: KernelConfig = {\n  kernelName: Less,\n  backendName: 'cpu',\n  kernelFunc: less\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, LessEqual} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const lessEqualImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a <= b) ? 1 : 0);\nexport const lessEqual =\n    binaryKernelFunc(LessEqual, lessEqualImpl, null /* complexImpl */, 'bool');\n\nexport const lessEqualConfig: KernelConfig = {\n  kernelName: LessEqual,\n  backendName: 'cpu',\n  kernelFunc: lessEqual\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Log} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const logImpl = createSimpleUnaryImpl((xi) => Math.log(xi));\nexport const log = unaryKernelFuncFromImpl(Log, logImpl);\n\nexport const logConfig: KernelConfig = {\n  kernelName: Log,\n  backendName: 'cpu',\n  kernelFunc: log,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Maximum} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const maximumImpl = createSimpleBinaryKernelImpl(\n    ((aValue, bValue) => Math.max(aValue as number, bValue as number)));\nexport const maximum = binaryKernelFunc(Maximum, maximumImpl);\n\nexport const maximumConfig: KernelConfig = {\n  kernelName: Maximum,\n  backendName: 'cpu',\n  kernelFunc: maximum\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Minimum} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const minimumImpl = createSimpleBinaryKernelImpl(\n    ((aValue, bValue) => Math.min(aValue as number, bValue as number)));\nexport const minimum = binaryKernelFunc(Minimum, minimumImpl);\n\nexport const minimumConfig: KernelConfig = {\n  kernelName: Minimum,\n  backendName: 'cpu',\n  kernelFunc: minimum\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Multiply} from '@tensorflow/tfjs-core';\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc, createComplexBinaryKernelImpl} from '../utils/binary_utils';\n\nexport const multiplyImpl = createSimpleBinaryKernelImpl(\n    ((aValue: number, bValue: number) => aValue * bValue));\nexport const multiplyComplexImpl =\n    createComplexBinaryKernelImpl(((aReal, aImag, bReal, bImag) => {\n      return {\n        real: aReal * bReal - aImag * bImag,\n        imag: aReal * bImag + aImag * bReal\n      };\n    }));\n\nexport const multiply =\n    binaryKernelFunc(Multiply, multiplyImpl, multiplyComplexImpl);\n\nexport const multiplyConfig: KernelConfig = {\n  kernelName: Multiply,\n  backendName: 'cpu',\n  kernelFunc: multiply\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, NotEqual} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const notEqualImpl =\n    createSimpleBinaryKernelImpl(((a, b) => (a !== b) ? 1 : 0));\nexport const notEqual =\n    binaryKernelFunc(NotEqual, notEqualImpl, null /* complexOp */, 'bool');\n\nexport const notEqualConfig: KernelConfig = {\n  kernelName: NotEqual,\n  backendName: 'cpu',\n  kernelFunc: notEqual\n};\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nfunction validateIndices(\n    indices: TypedArray, indicesShape: number[], numParams: number) {\n  indices.forEach((index: number, i: number) => {\n    if (index < 0 || index >= numParams) {\n      const locString =\n          util.indexToLoc(\n                  i, indicesShape.length, util.computeStrides(indicesShape))\n              .join(',');\n      throw new Error(\n          `indices[${locString}] = ${index} is not in [0, ${numParams})`);\n    }\n  });\n}\n\nfunction validateSplits(\n    paramsNestedSplits: TypedArray[], numParamsDenseValues: number) {\n  // Validate\n  for (let dim = 0; dim < paramsNestedSplits.length; ++dim) {\n    const splits = paramsNestedSplits[dim];\n    const lastSplit = (dim === paramsNestedSplits.length - 1) ?\n        numParamsDenseValues :\n        paramsNestedSplits[dim + 1].length;\n    if (splits.length === 0) {\n      throw new Error('Ragged splits may not be empty');\n    }\n    if (splits[0] < 0) {\n      throw new Error('Ragged splits must be non-negative');\n    }\n    if (splits[splits.length - 1] > lastSplit) {\n      throw new Error('Ragged splits must not point past values');\n    }\n    for (let i = 1; i < splits.length; ++i) {\n      if (splits[i - 1] > splits[i]) {\n        throw new Error('Ragged splits must be sorted in ascending order');\n      }\n    }\n  }\n}\n\n// Construct the `splits` output tensors, encoded using a nested vector.\n// Also find the slices of values that need to be copied, and store them\n// in `valueSlices`.  The total number of values that will be copied (which\n// we need for allocating the output values tensor) is stored in `numValues`.\nfunction makeSplits(\n    indices: TypedArray, indicesShape: number[],\n    paramsNestedSplits: TypedArray[], numParamsDenseValues: number) {\n  const valueSlices: Array<[number, number]> = [];\n  let numValues = 0;\n\n  const numSplits = indicesShape.length - 1 + paramsNestedSplits.length;\n  const outSplits = new Array(numSplits).fill(null).map(() => [0]);\n\n  validateSplits(paramsNestedSplits, numParamsDenseValues);\n\n  // Add `splits` that come from all but the last dimension of the dense\n  // Tensor `indices`.  In particular, for each dimension D, we add a\n  // splits tensor whose values are:\n  //   range(reduceProd(splits.shape[:D]) + 1) * splits.shape[D+1]\n  // E.g., if indices.shape=[2, 3, 4] then we will add splits tensors:\n  //   [0, 3, 6]                    # length=2+1, stride=3\n  //   [0, 4, 8, 12, 16, 20, 24]    # length=2*3+1, stride=4\n  let nrows = 1;\n  for (let dim = 0; dim < indicesShape.length - 1; ++dim) {\n    nrows *= indicesShape[dim];\n    const rowLength = indicesShape[dim + 1];\n    for (let i = 1; i < nrows + 1; ++i) {\n      outSplits[dim].push(i * rowLength);\n    }\n  }\n\n  // Add `splits` that come from `paramsNestedSplits`.  Starting with the\n  // outermost ragged dimension (i.e., the first `splits` tensor), we work\n  // our way in, finding the range of values that should be copied.  As we\n  // go, we update the output `splits` for each dimension with the appropriate\n  // values.  In particular, the *lengths* of the slices from `param_splits`\n  // should be copied to generate corresponding slice lengths in the output\n  // splits.  E.g., if we are copying a ragged row with length 4, then we\n  // should add a new split point to outSplits that is 4 greater than the\n  // previous split point in outSplits.\n  for (let i = 0; i < indices.length; ++i) {\n    let start = indices[i];\n    let limit = indices[i] + 1;\n\n    // Copy splits.\n    for (let dim = 0; dim < paramsNestedSplits.length; ++dim) {\n      const splits = paramsNestedSplits[dim];\n      const outDim = dim + indicesShape.length - 1;\n      if (outDim >= 0) {\n        const outSplitsOutDim = outSplits[outDim];\n        const delta =\n            outSplitsOutDim[outSplitsOutDim.length - 1] - splits[start];\n        for (let j = start; j < limit; ++j) {\n          outSplits[outDim].push(splits[j + 1] + delta);\n        }\n      }\n      start = splits[start];\n      limit = splits[limit];\n    }\n    if (limit !== start) {\n      valueSlices.push([start, limit]);\n      numValues += limit - start;\n    }\n  }\n\n  return {outSplits, valueSlices, numValues};\n}\n\nfunction getSplits(outSplits: number[][]) {\n  const splitsOut: TypedArray[] = [];\n  for (let i = 0; i < outSplits.length; ++i) {\n    const numSplits = outSplits[i].length;\n    const splits = util.getArrayFromDType('int32', numSplits) as TypedArray;\n    splitsOut.push(splits);\n\n    outSplits[i].forEach((value, j: number) => splits[j] = value);\n  }\n\n  return splitsOut;\n}\n\nfunction computeFlatOuterDims(orig: number[], numOutDims: number) {\n  const outDims = orig.slice(0, numOutDims);\n  while (outDims.length < numOutDims) {\n    outDims.push(1);\n  }\n\n  for (let inDim = numOutDims; inDim < orig.length; inDim++) {\n    outDims[numOutDims - 1] *= orig[inDim];\n  }\n\n  return outDims;\n}\n// For each slice in `(start, limit)` in `valueSlices`, append\n// `paramsDenseValues[start,...,limit] to `values`.  `valueSize` indicates\n// the number of scalars contained in each value paramsDenseValues[i].\nfunction writeValueSlices(\n    paramsDenseValues: TypedArray, paramsDenseValuesShape: number[],\n    valueSlices: Array<[number, number]>, valueSize: number, values: TypedArray,\n    valuesShape: number[]) {\n  const denseM = computeFlatOuterDims(paramsDenseValuesShape, 2)[1];\n  const valuesM = computeFlatOuterDims(valuesShape, 2)[1];\n\n  let outPos = 0;\n  for (const slice of valueSlices) {\n    for (let i = slice[0]; i < slice[1]; ++i) {\n      for (let j = 0; j < valueSize; ++j) {\n        values[outPos * valuesM + j] = paramsDenseValues[i * denseM + j];\n      }\n      ++outPos;\n    }\n  }\n}\n\nfunction getValues(\n    paramsDenseValues: TypedArray, paramsDenseValuesShape: number[],\n    paramsDenseValuesDType: DataType, valueSlices: Array<[number, number]>,\n    numValues: number): [TypedArray, number[]] {\n  const valuesShape = paramsDenseValuesShape.slice();\n  valuesShape[0] = numValues;\n\n  const valuesOut = util.getArrayFromDType(\n                        paramsDenseValuesDType,\n                        util.sizeFromShape(valuesShape)) as TypedArray;\n\n  const numElements = paramsDenseValues.length;\n  const valueSize =\n      numElements === 0 ? 0 : (numElements / paramsDenseValuesShape[0]);\n  writeValueSlices(\n      paramsDenseValues, paramsDenseValuesShape, valueSlices, valueSize,\n      valuesOut, valuesShape);\n\n  return [valuesOut, valuesShape];\n}\nexport function raggedGatherImpl(\n    paramsNestedSplits: TypedArray[], paramsNestedSplitsShapes: number[][],\n    paramsDenseValues: TypedArray, paramsDenseValuesShape: number[],\n    paramsDenseValuesDType: DataType, indices: TypedArray,\n    indicesShape: number[],\n    outputRaggedRank: number): [TypedArray[], TypedArray, number[]] {\n  if (paramsNestedSplits.length === 0) {\n    throw new Error('paramsNestedSplits must be non empty');\n  }\n\n  if (paramsNestedSplitsShapes[0].length === 0) {\n    throw new Error('Split tensors must not be scalars');\n  }\n  const numParams = paramsNestedSplitsShapes[0][0] - 1;\n  validateIndices(indices, indicesShape, numParams);\n\n  if (paramsDenseValuesShape.length === 0) {\n    throw new Error('params.rank must be nonzero');\n  }\n  const numParamsDenseValues = paramsDenseValuesShape[0];\n\n  // Calculate the `splits`, and store the value slices that we need to\n  // copy in `valueSlices`.\n  const {outSplits, valueSlices, numValues} = makeSplits(\n      indices, indicesShape, paramsNestedSplits, numParamsDenseValues);\n\n  // Write the output tensors.\n  const outputNestedSplits = getSplits(outSplits);\n  const outputDenseValues = getValues(\n      paramsDenseValues, paramsDenseValuesShape, paramsDenseValuesDType,\n      valueSlices, numValues);\n\n  return [outputNestedSplits, outputDenseValues[0], outputDenseValues[1]];\n}\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nconst INT32_MAX = 2147483647;\n\nexport function raggedRangeImpl(\n    starts: TypedArray, startsShape: number[], startsDType: DataType,\n    limits: TypedArray, limitsShape: number[], deltas: TypedArray,\n    deltasShape: number[]): [TypedArray, TypedArray] {\n  // Check input tensor shapes.\n  if (startsShape.length > 1) {\n    throw new Error('starts must be a scalar or vector');\n  }\n  if (limitsShape.length > 1) {\n    throw new Error('limits must be a scalar or vector');\n  }\n  if (deltasShape.length > 1) {\n    throw new Error('deltas must be a scalar or vector');\n  }\n\n  // Determine which tensors we need to broadcast.\n  const broadcastStarts = startsShape.length === 0;\n  const broadcastLimits = limitsShape.length === 0;\n  const broadcastDeltas = deltasShape.length === 0;\n\n  // nRows (number of output rows) is the size of the non-broadcast inputs,\n  // or 1 if all inputs are scalars.\n  const inSizes: number[] = [];\n  if (!broadcastStarts) {\n    inSizes.push(startsShape[0]);\n  }\n  if (!broadcastLimits) {\n    inSizes.push(limitsShape[0]);\n  }\n  if (!broadcastDeltas) {\n    inSizes.push(deltasShape[0]);\n  }\n\n  for (let i = 1; i < inSizes.length; ++i) {\n    if (inSizes[i] !== inSizes[i - 1]) {\n      throw new Error('starts, limits, and deltas must have the same shape');\n    }\n  }\n  const nRows = inSizes.length === 0 ? 1 : inSizes[0];\n\n  // Construct the rtNestedSplits tensor.\n  const rtNestedSplits =\n      util.getArrayFromDType('int32', nRows + 1) as TypedArray;\n  rtNestedSplits[0] = 0;\n  for (let row = 0; row < nRows; ++row) {\n    const start = broadcastStarts ? starts[0] : starts[row];\n    const limit = broadcastLimits ? limits[0] : limits[row];\n    const delta = broadcastDeltas ? deltas[0] : deltas[row];\n    if (delta === 0) {\n      throw new Error('Requires delta != 0');\n    }\n    let size: number;  // The number of elements in the specified range.\n    if (((delta > 0) && (limit < start)) || ((delta < 0) && (limit > start))) {\n      size = 0;\n    } else {\n      size = Math.ceil(Math.abs((limit - start) / delta));\n\n      if (size > INT32_MAX) {\n        throw new Error(`Requires ((limit - start) / delta) <= ${INT32_MAX}`);\n      }\n    }\n    rtNestedSplits[row + 1] = rtNestedSplits[row] + size;\n  }\n\n  const nVals = rtNestedSplits[nRows];\n\n  // Construct the rtDenseValues tensor.\n  const rtDenseValues =\n      util.getArrayFromDType(startsDType, nVals) as TypedArray;\n\n  let valueIndex = 0;\n  for (let row = 0; row < nRows; ++row) {\n    const rowSize = rtNestedSplits[row + 1] - rtNestedSplits[row];\n    let value = broadcastStarts ? starts[0] : starts[row];\n    const delta = broadcastDeltas ? deltas[0] : deltas[row];\n    for (let i = 0; i < rowSize; ++i) {\n      rtDenseValues[valueIndex++] = value;\n      value += delta;\n    }\n  }\n\n  return [rtNestedSplits, rtDenseValues];\n}\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, broadcastTo, DataType, reshape, tidy, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport RowPartitionType = backend_util.RowPartitionType;\n// Based on\n// https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/ragged_tensor_to_tensor_op.cc\nclass RaggedTensorToTensorOp {\n  private readonly rowPartitionTypes: RowPartitionType[];\n  private readonly raggedRank: number;\n  constructor(\n      private shape: TypedArray, private shapeShape: number[],\n      private values: TypedArray, private valuesShape: number[],\n      private valuesDType: DataType, private defaultValue: TypedArray,\n      private defaultValueShape: number[],\n      private readonly rowPartitionValues: TypedArray[],\n      private readonly rowPartitionValuesShapes: number[][],\n      rowPartitionTypeStrings: string[]) {\n    this.rowPartitionTypes =\n        backend_util.getRowPartitionTypesHelper(rowPartitionTypeStrings);\n    this.raggedRank = backend_util.getRaggedRank(this.rowPartitionTypes);\n  }\n\n  private getRowPartitionTypeByDimension(dimension: number) {\n    if (this.rowPartitionTypes[0] === RowPartitionType.FIRST_DIM_SIZE) {\n      return this.rowPartitionTypes[dimension + 1];\n    } else {\n      return this.rowPartitionTypes[dimension];\n    }\n  }\n\n  // Returns the relationship between dimension and dimension + 1.\n  private getRowPartitionTensor(dimension: number) {\n    if (this.rowPartitionTypes[0] === RowPartitionType.FIRST_DIM_SIZE) {\n      return this.rowPartitionValues[dimension + 1];\n    } else {\n      return this.rowPartitionValues[dimension];\n    }\n  }\n\n  private getMaxWidth(dimension: number) {\n    const rowPartitionTensor = this.getRowPartitionTensor(dimension - 1);\n    switch (this.getRowPartitionTypeByDimension(dimension - 1)) {\n      case RowPartitionType.VALUE_ROWIDS:\n        return RaggedTensorToTensorOp.getMaxWidthValueRowID(rowPartitionTensor);\n      case RowPartitionType.ROW_SPLITS:\n        return RaggedTensorToTensorOp.getMaxWidthRowSplit(rowPartitionTensor);\n      default:\n        throw new Error(`Cannot handle partition type ${\n            RowPartitionType[this.getRowPartitionTypeByDimension(\n                dimension - 1)]}`);\n    }\n  }\n\n  static getMaxWidthRowSplit(rowSplit: TypedArray) {\n    const tensorLength = rowSplit.length;\n    if (tensorLength === 0 || tensorLength === 1) {\n      return 0;\n    }\n    let maxWidth = 0;\n    for (let i = 0; i < tensorLength - 1; ++i) {\n      const currentWidth = rowSplit[i + 1] - rowSplit[i];\n      if (currentWidth > maxWidth) {\n        maxWidth = currentWidth;\n      }\n    }\n    return maxWidth;\n  }\n\n  static getMaxWidthValueRowID(valueRowIds: TypedArray) {\n    const indexLength = valueRowIds.length;\n    if (indexLength === 0) {\n      return 0;\n    }\n    let firstEqualIndex = 0;\n    let firstEqualIndexValue = valueRowIds[0];\n    let maxWidth = 0;\n    for (let i = 1; i < indexLength; ++i) {\n      const value = valueRowIds[i];\n      if (value !== firstEqualIndexValue) {\n        firstEqualIndexValue = value;\n        maxWidth = Math.max(i - firstEqualIndex, maxWidth);\n        firstEqualIndex = i;\n      }\n    }\n    return Math.max(indexLength - firstEqualIndex, maxWidth);\n  }\n\n  private tensorShapeFromTensor(\n      t: TypedArray, tShape: number[], isPartial = true) {\n    if (tShape.length === 0) {\n      if (t[0] === -1) {\n        return [];\n      }\n      throw new Error(\n          `The only valid scalar shape tensor is the fully unknown shape specified as -1.`);\n    }\n    // MakePartialShape/MakeShapeHelper.\n    return makeShape(t, isPartial);\n  }\n\n  private calculateOutputSize(firstDim: number) {\n    const valueShape = this.valuesShape;\n    const defaultValueShape = this.defaultValueShape;\n\n    backend_util.validateDefaultValueShape(defaultValueShape, valueShape);\n\n    const shape = this.tensorShapeFromTensor(this.shape, this.shapeShape);\n    const outputShape = backend_util.combineRaggedTensorToTensorShapes(\n        this.raggedRank, shape, valueShape);\n\n    const result = outputShape;\n\n    if (result[0] < 0) {\n      result[0] = firstDim;\n    }\n    for (let i = 1; i <= this.raggedRank; ++i) {\n      if (result[i] < 0) {\n        result[i] = this.getMaxWidth(i);\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * The outputIndex represents the index in the output tensor\n   * where the first element of a particular dimension would be written.\n   * If it is -1, it indicates that the index is out of scope.\n   * Example, given firstDimension = 10, firstDimensionOutput = 6,\n   * and outputIndexMultiplier = 100:\n   * result = [0 100 200 300 400 500 -1 -1 -1 -1]\n   * If firstDimensionOutput = 11 instead, then:\n   * result = [0 100 200 300 400 500 600 700 800 900]\n   */\n  private calculateFirstParentOutputIndex(\n      firstDimension: number, outputIndexMultiplier: number,\n      firstDimensionOutput: number) {\n    const minDimension = Math.min(firstDimension, firstDimensionOutput);\n    const result: number[] = [];\n    let currentOutputIndex = 0;\n    for (let i = 0; i < minDimension;\n         ++i, currentOutputIndex += outputIndexMultiplier) {\n      result.push(currentOutputIndex);\n    }\n    for (let i = minDimension; i < firstDimension; ++i) {\n      result.push(-1);\n    }\n    util.assert(\n        result.length === firstDimension,\n        () => 'Final length of result must be equal to firstDimension.');\n\n    return result;\n  }\n\n  private calculateOutputIndexRowSplit(\n      rowSplit: TypedArray, parentOutputIndex: number[],\n      outputIndexMultiplier: number, outputSize: number) {\n    const rowSplitSize = rowSplit.length;\n    const result: number[] = [];\n    for (let i = 0; i < rowSplitSize - 1; ++i) {\n      const rowLength = rowSplit[i + 1] - rowSplit[i];\n      let realLength = Math.min(outputSize, rowLength);\n      let parentOutputIndexCurrent = parentOutputIndex[i];\n\n      if (parentOutputIndexCurrent === -1) {\n        realLength = 0;\n      }\n      for (let j = 0; j < realLength; ++j) {\n        result.push(parentOutputIndexCurrent);\n        parentOutputIndexCurrent += outputIndexMultiplier;\n      }\n      for (let j = 0; j < rowLength - realLength; ++j) {\n        result.push(-1);\n      }\n    }\n    if (rowSplitSize > 0 && result.length !== rowSplit[rowSplitSize - 1]) {\n      throw new Error('Invalid row split size.');\n    }\n\n    return result;\n  }\n\n  // Calculate the output index of the first element of a list.\n  // The parentOutputIndex is the same computation for the previous list.\n  // -1 indicates an element or list that is out of range.\n  // The outputIndexMultiplier is the number of output indices one moves\n  // forward for each column.\n  // E.g., given:\n  // valueRowIds:[0 1 2 2 2 3 5 5 6]\n  // parentOutputIndex:[1000 1100 2000 2100 -1 3000 4000]\n  // outputIndexMultiplier: 10\n  // outputSize: 2\n  // You get:\n  // result = [1000 1100 2000 2010 -1 2100 -1 -1 3000]\n  // result[0] = parentOutputIndex[valueRowIds[0]]\n  // result[1] = parentOutputIndex[valueRowIds[1]]\n  // result[2] = parentOutputIndex[valueRowIds[2]]\n  // result[3] = parentOutputIndex[valueRowIds[2] + 10]\n  // result[4] = -1 because it is the third element the size is 2.\n  // result[5] = parentOutputIndex[valueRowIds[3]]\n  // result[6] = -1 because parentOutputIndex[valueRowIds[6]] == -1\n  // result[7] = -1 because parentOutputIndex[valueRowIds[6]] == -1\n  // result[8] = parentOutputIndex[valueRowIds[7]]\n  private calculateOutputIndexValueRowID(\n      valueRowIds: TypedArray, parentOutputIndex: number[],\n      outputIndexMultiplier: number, outputSize: number) {\n    const indexSize = valueRowIds.length;\n    const result: number[] = [];\n    if (indexSize === 0) {\n      return [];\n    }\n\n    let currentOutputColumn = 0;\n    let currentValueRowId = valueRowIds[0];\n\n    if (currentValueRowId >= parentOutputIndex.length) {\n      throw new Error(\n          `Got currentValueRowId=${currentValueRowId}, which is not less than ${\n              parentOutputIndex.length}`);\n    }\n\n    let currentOutputIndex = parentOutputIndex[currentValueRowId];\n    result.push(currentOutputIndex);\n    for (let i = 1; i < indexSize; ++i) {\n      const nextValueRowId = valueRowIds[i];\n      if (nextValueRowId === currentValueRowId) {\n        if (currentOutputIndex >= 0) {\n          ++currentOutputColumn;\n          if (currentOutputColumn < outputSize) {\n            currentOutputIndex += outputIndexMultiplier;\n          } else {\n            currentOutputIndex = -1;\n          }\n        }\n      } else {\n        currentOutputColumn = 0;\n        currentValueRowId = nextValueRowId;\n\n        if (nextValueRowId >= parentOutputIndex.length) {\n          throw new Error(\n              `Got nextValueRowId=${nextValueRowId} which is not less than ${\n                  parentOutputIndex.length}`);\n        }\n\n        currentOutputIndex = parentOutputIndex[nextValueRowId];\n      }\n      result.push(currentOutputIndex);\n    }\n\n    if (result.length !== valueRowIds.length) {\n      throw new Error('Invalid row ids.');\n    }\n\n    return result;\n  }\n\n  private calculateOutputIndex(\n      dimension: number, parentOutputIndex: number[],\n      outputIndexMultiplier: number, outputSize: number) {\n    const rowPartitionTensor = this.getRowPartitionTensor(dimension);\n    const partitionType = this.getRowPartitionTypeByDimension(dimension);\n    switch (partitionType) {\n      case RowPartitionType.VALUE_ROWIDS:\n        return this.calculateOutputIndexValueRowID(\n            rowPartitionTensor, parentOutputIndex, outputIndexMultiplier,\n            outputSize);\n      case RowPartitionType.ROW_SPLITS:\n        if (rowPartitionTensor.length - 1 > parentOutputIndex.length) {\n          throw new Error(`Row partition size is greater than output size: ${\n              rowPartitionTensor.length - 1} > ${parentOutputIndex.length}`);\n        }\n        return this.calculateOutputIndexRowSplit(\n            rowPartitionTensor, parentOutputIndex, outputIndexMultiplier,\n            outputSize);\n      default:\n        throw new Error(\n            `Unsupported partition type: ${RowPartitionType[partitionType]}`);\n    }\n  }\n\n  private getFirstDimensionSize() {\n    const firstPartitionTensor = this.rowPartitionValues[0];\n    if (this.rowPartitionTypes.length === 0) {\n      throw new Error('No row_partition_types given.');\n    }\n    const firstPartitionType = this.rowPartitionTypes[0];\n    switch (firstPartitionType) {\n      case RowPartitionType.FIRST_DIM_SIZE:\n        return firstPartitionTensor[0];\n      case RowPartitionType.VALUE_ROWIDS:\n        throw new Error('Cannot handle VALUE_ROWIDS in first dimension.');\n      case RowPartitionType.ROW_SPLITS:\n        return this.rowPartitionValuesShapes[0][0] - 1;\n      default:\n        throw new Error(\n            `Cannot handle type ${RowPartitionType[firstPartitionType]}`);\n    }\n  }\n\n  compute(): [number[], TypedArray] {\n    const firstPartitionTensor = this.rowPartitionValues[0];\n    if (firstPartitionTensor.length <= 0) {\n      throw new Error(\n          'Invalid first partition input. ' +\n          'Tensor requires at least one element.');\n    }\n    const firstDimension = this.getFirstDimensionSize();\n    const outputSize = this.calculateOutputSize(firstDimension);\n    const multiplier: number[] = new Array(this.raggedRank + 1);\n\n    multiplier[multiplier.length - 1] = 1;\n    for (let i = multiplier.length - 2; i >= 0; --i) {\n      multiplier[i] = multiplier[i + 1] * outputSize[i + 1];\n    }\n    // Full size of the tensor.\n    const outputShape: number[] = makeShape(outputSize, false);\n    const outputTensor =\n        util.getArrayFromDType(\n            this.valuesDType, util.sizeFromShape(outputShape)) as TypedArray;\n\n    const fullSize = multiplier[0] * outputSize[0];\n    if (fullSize > 0) {\n      let outputIndex = this.calculateFirstParentOutputIndex(\n          firstDimension, multiplier[0], outputSize[0]);\n      for (let i = 1; i <= this.raggedRank; ++i) {\n        const newOutputIndex = this.calculateOutputIndex(\n            i - 1, outputIndex, multiplier[i], outputSize[i]);\n        outputIndex = newOutputIndex;\n      }\n\n      this.setOutput(this.raggedRank, outputIndex, outputTensor, outputShape);\n    }\n\n    return [outputShape, outputTensor];\n  }\n  setOutput(\n      raggedRank: number, outputIndex: number[], outputTensor: TypedArray,\n      outputShape: number[]) {\n    if (outputTensor.length === 0) {\n      return;\n    }\n\n    const valuesBase = this.values;\n    const outputBase = outputTensor;\n\n    let elementShape = outputShape.slice();\n    elementShape = elementShape.slice(raggedRank + 1);\n    const valueElementSize = util.sizeFromShape(elementShape);\n    const outputIndexSize = outputIndex.length;\n\n    // Broadcast the default value to value_element_size.  (We can skip this\n    // if defaultValueTensor.size == 1, since we use fill when that's true.)\n    let defaultValue = this.defaultValue;\n    if (defaultValue.length !== valueElementSize && defaultValue.length !== 1) {\n      const srcShape = this.defaultValueShape;\n      tidy(() => {\n        const defaultValueTensor = reshape(defaultValue, srcShape);\n        const bCastDefault = broadcastTo(defaultValueTensor, elementShape);\n        defaultValue = bCastDefault.dataSync();\n      });\n    }\n\n    // Loop through the outputIndex array, finding contiguous regions that\n    // should be copied.  Once we find the end of a contiguous region, copy it\n    // and add any necessary padding (with defaultValue).\n    let srcStart = 0;  // Start of contiguous region (in values)\n    let dstStart = 0;  // Destination for contiguous region (in output)\n    let dstEnd = 0;    // Destination for contiguous region (in output)\n    for (let srcI = 0; srcI <= outputIndexSize; ++srcI) {\n      // dstI is the destination where the value at srcI should be copied.\n      let dstI = srcI < outputIndexSize ? outputIndex[srcI] : -1;\n\n      // If we're still in a contiguous region, then update dstEnd go to the\n      // next srcI.\n      if (dstI === dstEnd) {\n        ++dstEnd;\n        continue;\n      }\n\n      // We found the end of contiguous region.  This can be because we found\n      // a gap (dstI > dstEnd), or a source value that shouldn't be copied\n      // because it's out-of-bounds (dstI == -1), or the end of the tensor\n      // (dstI === -1).\n      if (dstStart < dstEnd) {\n        // Copy the contiguous region.\n        const src = valuesBase.subarray(srcStart * valueElementSize);\n        const dst = outputBase.subarray(dstStart * valueElementSize);\n        const nVals = (dstEnd - dstStart) * valueElementSize;\n        copyArray(dst, src, nVals);\n      }\n\n      // Add any necessary padding (w/ defaultValue).\n      if (srcI >= outputIndexSize) {\n        // We reached the end of values: pad to the end of output.\n        const outputSize = outputTensor.length;\n        dstI = Math.floor(outputSize / valueElementSize);\n      }\n      if (dstI > dstEnd) {\n        if (this.defaultValue.length === 1) {\n          outputBase\n              .subarray(dstEnd * valueElementSize, dstI * valueElementSize)\n              .fill(this.defaultValue[0]);\n          dstEnd = dstI;\n        } else {\n          while (dstI > dstEnd) {\n            const dst = outputBase.slice(dstEnd * valueElementSize);\n            copyArray(dst, defaultValue, valueElementSize);\n            ++dstEnd;\n          }\n        }\n      }\n\n      // Update indices.\n      if (dstI < 0) {\n        // srcI should be skipped -- leave it out of the contiguous region.\n        srcStart = srcI + 1;\n        dstStart = dstEnd;\n      } else {\n        // srcI should be copied -- include it in the contiguous region.\n        srcStart = srcI;\n        dstStart = dstEnd;\n        dstEnd = dstStart + 1;\n      }\n    }\n  }\n}\n\nfunction copyArray(dst: TypedArray, src: TypedArray, size: number) {\n  for (let i = 0; i < size; i++) {\n    dst[i] = src[i];\n  }\n}\n\nfunction makeShape(shape: number[]|TypedArray, isPartial: boolean) {\n  const out: number[] = [];\n  for (let dim of shape) {\n    if (dim < 0) {\n      if (!isPartial) {\n        throw new Error(`Dimension ${dim} must be >= 0`);\n      }\n      if (dim < -1) {\n        throw new Error(`Dimension ${dim} must be >= -1`);\n      }\n      dim = -1;\n    }\n    out.push(dim);\n  }\n\n  return out;\n}\n\nexport function raggedTensorToTensorImpl(\n    shape: TypedArray, shapesShape: number[], values: TypedArray,\n    valuesShape: number[], valuesDType: DataType, defaultValue: TypedArray,\n    defaultValueShape: number[], rowPartitionValues: TypedArray[],\n    rowPartitionValuesShapes: number[][],\n    rowPartitionTypes: string[]): [number[], TypedArray] {\n  return new RaggedTensorToTensorOp(\n             shape, shapesShape, values, valuesShape, valuesDType, defaultValue,\n             defaultValueShape, rowPartitionValues, rowPartitionValuesShapes,\n             rowPartitionTypes)\n      .compute();\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Rsqrt} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const rsqrtImpl = createSimpleUnaryImpl((xi) => 1 / Math.sqrt(xi));\nexport const rsqrt = unaryKernelFuncFromImpl(Rsqrt, rsqrtImpl);\n\nexport const rsqrtConfig: KernelConfig = {\n  kernelName: Rsqrt,\n  backendName: 'cpu',\n  kernelFunc: rsqrt,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sigmoid} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const sigmoidImpl =\n    createSimpleUnaryImpl((xi) => 1 / (1 + Math.exp(-xi)));\nexport const sigmoid =\n    unaryKernelFunc(Sigmoid, (xi) => 1 / (1 + Math.exp(-xi)));\n\nexport const sigmoidConfig: KernelConfig = {\n  kernelName: Sigmoid,\n  backendName: 'cpu',\n  kernelFunc: sigmoid,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sqrt} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const sqrtImpl = createSimpleUnaryImpl((xi) => Math.sqrt(xi));\nexport const sqrt = unaryKernelFunc(Sqrt, (xi) => Math.sqrt(xi));\n\nexport const sqrtConfig: KernelConfig = {\n  kernelName: Sqrt,\n  backendName: 'cpu',\n  kernelFunc: sqrt,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, SquaredDifference} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const squaredDifferenceImpl =\n    createSimpleBinaryKernelImpl(((a: number, b: number) => {\n      const diff = a - b;\n      return diff * diff;\n    }));\nexport const squaredDifference =\n    binaryKernelFunc(SquaredDifference, squaredDifferenceImpl);\n\nexport const squaredDifferenceConfig: KernelConfig = {\n  kernelName: SquaredDifference,\n  backendName: 'cpu',\n  kernelFunc: squaredDifference\n};\n","/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, StaticRegexReplace, StaticRegexReplaceAttrs} from '@tensorflow/tfjs-core';\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const staticRegexReplaceImpl = createSimpleUnaryImpl<string,\n  string>((x: string, attrs) => {\n    const {pattern, replaceGlobal, rewrite} =\n      attrs as unknown as StaticRegexReplaceAttrs;\n    // TODO(mattSoulanille): Don't create a regex each time.\n    return x.replace(new RegExp(pattern, replaceGlobal ? 'g' : ''), rewrite);\n});\n\nconst staticRegexReplace =\n  unaryKernelFuncFromImpl(StaticRegexReplace, staticRegexReplaceImpl);\n\nexport const staticRegexReplaceConfig: KernelConfig = {\n  kernelName: StaticRegexReplace,\n  backendName: 'cpu',\n  kernelFunc: staticRegexReplace,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {util} from '@tensorflow/tfjs-core';\n\n/**\n * The StringNGramsOp class creates ngrams from ragged string data.\n * The constructor contains all attributes related to the operation such as\n * padding widths and strings, and the compute function can be used to\n * compute the ngrams for different ragged tensor inputs.\n */\nclass StringNGramsOp {\n  private separator: Uint8Array;\n  private nGramWidths: number[];\n  private padWidth: number;\n  private leftPad: Uint8Array;\n  private rightPad: Uint8Array;\n  private preserveShort: boolean;\n\n  constructor(\n      separator: string, nGramWidths: number[], leftPad: string,\n      rightPad: string, padWidth: number, preserveShortSequences: boolean) {\n    this.separator = util.encodeString(separator);\n    this.nGramWidths = nGramWidths;\n    this.leftPad = util.encodeString(leftPad);\n    this.rightPad = util.encodeString(rightPad);\n    this.padWidth = padWidth;\n    this.preserveShort = preserveShortSequences;\n  }\n\n  private getPadWidth(nGramWidth: number) {\n    // Ngrams can be padded with either a fixed pad width or a dynamic pad\n    // width depending on the 'padWidth' arg, but in no case should the padding\n    // ever be wider than 'nGramWidth' - 1.\n    return Math.min(\n        this.padWidth < 0 ? nGramWidth - 1 : this.padWidth, nGramWidth - 1);\n  }\n\n  private getNumNGrams(length: number, nGramWidth: number) {\n    const padWidth = this.getPadWidth(nGramWidth);\n    return Math.max(0, ((length + 2 * padWidth) - nGramWidth) + 1);\n  }\n\n  private createNGrams(\n      data: Uint8Array[], splitIndex: number, output: Uint8Array[],\n      outputStartIndex: number, numNGrams: number, nGramWidth: number) {\n    for (let nGramIndex = 0; nGramIndex < numNGrams; ++nGramIndex) {\n      const padWidth = this.getPadWidth(nGramWidth);\n      const leftPadding = Math.max(0, padWidth - nGramIndex);\n      const rightPadding =\n          Math.max(0, padWidth - (numNGrams - (nGramIndex + 1)));\n      const numTokens = nGramWidth - (leftPadding + rightPadding);\n      const dataStartIndex =\n          splitIndex + (leftPadding > 0 ? 0 : nGramIndex - padWidth);\n\n      // Calculate the total expected size of the nGram so we can reserve the\n      // correct amount of space in the string.\n      let nGramSize = 0;\n      // Size of the left padding.\n      nGramSize += leftPadding * this.leftPad.length;\n      // Size of the tokens.\n      for (let n = 0; n < numTokens; ++n) {\n        nGramSize += data[dataStartIndex + n].length;\n      }\n      // Size of the right padding.\n      nGramSize += rightPadding * this.rightPad.length;\n      // Size of the separators.\n      const numSeparators = leftPadding + rightPadding + numTokens - 1;\n      nGramSize += numSeparators * this.separator.length;\n\n      // Build the nGram.\n      output[outputStartIndex + nGramIndex] = new Uint8Array(nGramSize);\n      const nGram = output[outputStartIndex + nGramIndex];\n\n      let nextNGramIndex = 0;\n      const appendToNGram = (str: Uint8Array) =>\n          str.forEach((value) => nGram[nextNGramIndex++] = value);\n\n      for (let n = 0; n < leftPadding; ++n) {\n        appendToNGram(this.leftPad);\n        appendToNGram(this.separator);\n      }\n      // Only output first numTokens - 1 pairs of data and separator\n      for (let n = 0; n < numTokens - 1; ++n) {\n        appendToNGram(data[dataStartIndex + n]);\n        appendToNGram(this.separator);\n      }\n      // Handle case when there are no tokens or no right padding as these\n      // can result in consecutive separators.\n      if (numTokens > 0) {\n        // If we have tokens, then output last and then pair each separator\n        // with the right padding that follows, to ensure nGram ends either with\n        // the token or with the right pad.\n        appendToNGram(data[dataStartIndex + numTokens - 1]);\n        for (let n = 0; n < rightPadding; ++n) {\n          appendToNGram(this.separator);\n          appendToNGram(this.rightPad);\n        }\n      } else {\n        // If we don't have tokens, then the last item inserted into the nGram\n        // has been the separator from the left padding loop above. Hence,\n        // output right pad and separator and make sure to finish with a\n        // padding, not a separator.\n        for (let n = 0; n < rightPadding - 1; ++n) {\n          appendToNGram(this.rightPad);\n          appendToNGram(this.separator);\n        }\n        appendToNGram(this.rightPad);\n      }\n    }\n  }\n\n  // Data and splits together form the definition of the ragged tensor,\n  // where data is 1 dimensional and contains the values of the tensor\n  // and splits denotes the indices at which each row starts.\n  public compute(data: Uint8Array[], splits: Int32Array):\n      [Uint8Array[], Int32Array] {\n    // Validate that the splits are valid indices into data, only if there are\n    // splits specified.\n    const inputDataSize = data.length;\n    const splitsSize = splits.length;\n    if (splitsSize > 0) {\n      let prevSplit = splits[0];\n      if (prevSplit !== 0) {\n        throw new Error(`First split value must be 0, got ${prevSplit}`);\n      }\n      for (let i = 1; i < splitsSize; ++i) {\n        let validSplits = splits[i] >= prevSplit;\n        validSplits = validSplits && (splits[i] <= inputDataSize);\n        if (!validSplits) {\n          throw new Error(`Invalid split value ${splits[i]}, must be in [${\n              prevSplit}, ${inputDataSize}]`);\n        }\n        prevSplit = splits[i];\n      }\n      if (prevSplit !== inputDataSize) {\n        throw new Error(`Last split value must be data size. Expected ${\n            inputDataSize}, got ${prevSplit}`);\n      }\n    }\n\n    const numBatchItems = splitsSize - 1;\n    const nGramsSplits = util.getArrayFromDType('int32', splitsSize);\n    // If there is no data or size, return an empty ragged tensor.\n    if (inputDataSize === 0 || splitsSize === 0) {\n      const empty: Uint8Array[] = new Array(inputDataSize);\n      for (let i = 0; i <= numBatchItems; ++i) {\n        nGramsSplits[i] = 0;\n      }\n      return [empty, nGramsSplits];\n    }\n\n    nGramsSplits[0] = 0;\n    for (let i = 1; i <= numBatchItems; ++i) {\n      const length = splits[i] - splits[i - 1];\n      let numNGrams = 0;\n      this.nGramWidths.forEach((nGramWidth) => {\n        numNGrams += this.getNumNGrams(length, nGramWidth);\n      });\n      if (this.preserveShort && length > 0 && numNGrams === 0) {\n        numNGrams = 1;\n      }\n      nGramsSplits[i] = nGramsSplits[i - 1] + numNGrams;\n    }\n\n    const nGrams: Uint8Array[] = new Array(nGramsSplits[numBatchItems]);\n\n    for (let i = 0; i < numBatchItems; ++i) {\n      const splitIndex = splits[i];\n      let outputStartIdx = nGramsSplits[i];\n      this.nGramWidths.forEach((nGramWidth) => {\n        const length = splits[i + 1] - splits[i];\n        const numNGrams = this.getNumNGrams(length, nGramWidth);\n        this.createNGrams(\n            data, splitIndex, nGrams, outputStartIdx, numNGrams, nGramWidth);\n        outputStartIdx += numNGrams;\n      });\n      // If we're preserving short sequences, check to see if no sequence was\n      // generated by comparing the current output start idx to the original\n      // one (nGramSplitsdata). If no ngrams were generated, then they will\n      // be equal (since we increment outputStartIdx by numNGrams every\n      // time we create a set of ngrams.)\n      if (this.preserveShort && outputStartIdx === nGramsSplits[i]) {\n        const dataLength = splits[i + 1] - splits[i];\n        // One legitimate reason to not have any ngrams when this.preserveShort\n        // is true is if the sequence itself is empty. In that case, move on.\n        if (dataLength === 0) {\n          continue;\n        }\n        // We don't have to worry about dynamic padding sizes here: if padding\n        // was dynamic, every sequence would have had sufficient padding to\n        // generate at least one nGram.\n        const nGramWidth = dataLength + 2 * this.padWidth;\n        const numNGrams = 1;\n        this.createNGrams(\n            data, splitIndex, nGrams, outputStartIdx, numNGrams, nGramWidth);\n      }\n    }\n    return [nGrams, nGramsSplits];\n  }\n}\n\nexport function stringNGramsImpl(\n    data: Uint8Array[], dataSplits: Int32Array, separator: string,\n    nGramWidths: number[], leftPad: string, rightPad: string, padWidth: number,\n    preserveShortSequences: boolean): [Uint8Array[], Int32Array] {\n  return new StringNGramsOp(\n             separator, nGramWidths, leftPad, rightPad, padWidth,\n             preserveShortSequences)\n      .compute(data, dataSplits);\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TypedArray, util} from '@tensorflow/tfjs-core';\n\nfunction split(\n    str: Uint8Array, delimiters: Uint8Array, skipEmpty: boolean,\n    result: Uint8Array[]): void {\n  if (!str.length) {\n    return;\n  }\n  // When the delimiter is empty, the input is split into individual characters.\n  if (delimiters.length === 0) {\n    for (let i = 0; i < str.length; ++i) {\n      result.push(str.subarray(i, i + 1));\n    }\n    return;\n  }\n  // When there is one delimiter, the input is split only at that delimiter.\n  if (delimiters.length === 1) {\n    const delimiter = delimiters[0];\n    let f = str.indexOf(delimiter);\n    while (f !== -1) {\n      const token = str.subarray(0, f);\n      if (!skipEmpty || token.length !== 0) {\n        result.push(token);\n      }\n      str = str.subarray(f + 1);\n      f = str.indexOf(delimiter);\n    }\n    if (!skipEmpty || str.length !== 0) {\n      result.push(str);\n    }\n    return;\n  }\n  // When there are multiple delimiters, the input is split at every instance\n  // one of the delimiters appears.\n  let tokenStart = 0;\n  for (let i = 0; i < str.length + 1; i++) {\n    if ((i === str.length) || (delimiters.indexOf(str[i]) !== -1)) {\n      const token = str.subarray(tokenStart, i);\n      if (!skipEmpty || token.length !== 0) {\n        result.push(token);\n      }\n      tokenStart = i + 1;\n    }\n  }\n}\n\nexport function stringSplitImpl(\n    input: Uint8Array[], delimiter: Uint8Array,\n    skipEmpty: boolean): [TypedArray, Uint8Array[], [number, number]] {\n  const batchSize = input.length;\n\n  // Empty delimiter means split the input character by character.\n  const tokens: Uint8Array[] = [];\n\n  let outputSize = 0;\n  let maxNumEntries = 0;\n  const numIndices: number[] = new Array(batchSize);\n  for (let i = 0; i < batchSize; ++i) {\n    const prevTokensLength = tokens.length;\n    split(input[i], delimiter, skipEmpty, tokens);\n    const nEntries = tokens.length - prevTokensLength;\n    numIndices[i] = nEntries;\n    outputSize += nEntries;\n    maxNumEntries = Math.max(maxNumEntries, nEntries);\n  }\n\n  const indices = util.getArrayFromDType('int32', outputSize * 2) as TypedArray;\n  const values: Uint8Array[] = new Array(outputSize);\n  const shape: [number, number] = [batchSize, maxNumEntries];\n\n  let c = 0;\n  for (let i = 0; i < batchSize; ++i) {\n    for (let j = 0; j < numIndices[i]; ++j) {\n      // indices is a 2d tensor with shape of [outputSize, 2]\n      indices[c * 2] = i;\n      indices[c * 2 + 1] = j;\n      values[c] = tokens[c];\n      ++c;\n    }\n  }\n\n  return [indices, values, shape];\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sub} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc, createComplexBinaryKernelImpl} from '../utils/binary_utils';\n\nexport const subImpl = createSimpleBinaryKernelImpl(\n    ((aValue: number, bValue: number) => aValue - bValue));\nexport const subComplexImpl =\n    createComplexBinaryKernelImpl(((aReal, aImag, bReal, bImag) => {\n      return {real: aReal - bReal, imag: aImag - bImag};\n    }));\nexport const sub = binaryKernelFunc(Sub, subImpl, subComplexImpl);\n\nexport const subConfig: KernelConfig = {\n  kernelName: Sub,\n  backendName: 'cpu',\n  kernelFunc: sub\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/** An implementation of the TopK kernel shared between webgl and cpu. */\n\nimport {buffer, NumericDataType, Rank, ShapeMap, Tensor, TensorBuffer, TypedArray, util} from '@tensorflow/tfjs-core';\n\ntype Pair = {\n  value: number,\n  index: number\n};\n\nconst comparePair = (a: Pair, b: Pair) => {\n  const valueDiff = b.value - a.value;\n  return valueDiff === 0 ? a.index - b.index : valueDiff;\n};\n\n/**\n * Partitions array where all elements smaller than the (k+1) smallest element\n * are found to the left of it, and all larger to the right of it.\n * Based on the Floyd-Rivest Algorithm, ref:\n * https://en.wikipedia.org/wiki/Floyd%E2%80%93Rivest_algorithm\n * @param array: Array to partition\n * @param left: Left index for the interval\n * @param right: Right index for the interval\n * @param k: Desired index value, where array[k] is the (k+1)th smallest element\n *           when left = 0\n */\nfunction select(array: Pair[], k: number, left = 0, right = array.length - 1) {\n  while (right > left) {\n    // Use select recursively to sample a smaller set of size s\n    // the arbitrary constants 600 and 0.5 are used in the original\n    // version to minimize execution time.\n    if (right - left > 600) {\n      const n = right - left + 1;\n      const i = k - left + 1;\n      const z = Math.log(n);\n      const s = 0.5 * Math.exp(2 * z / 3);\n      const sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * Math.sign(i - n / 2);\n      const newLeft = Math.max(left, Math.floor(k - i * s / n + sd));\n      const newRight = Math.min(right, Math.floor(k + (n - i) * s / n + sd));\n      select(array, k, newLeft, newRight);\n    }\n    // partition the elements between left and right around t\n    const t = array[k];\n    let i = left;\n    let j = right;\n\n    util.swap(array, left, k);\n\n    if (comparePair(array[right], t) > 0) {\n      util.swap(array, left, right);\n    }\n    while (i < j) {\n      util.swap(array, i, j);\n      i++;\n      j--;\n      while (comparePair(array[i], t) < 0) {\n        i = i + 1;\n      }\n      while (comparePair(array[j], t) > 0) {\n        j = j - 1;\n      }\n    }\n    if (comparePair(array[left], t) === 0) {\n      util.swap(array, left, j);\n    } else {\n      j = j + 1;\n      util.swap(array, j, right);\n    }\n    // Adjust left and right towards the boundaries of the subset\n    // containing the (k - left + 1)th smallest element.\n    if (j <= k) {\n      left = j + 1;\n    }\n    if (k <= j) {\n      right = j - 1;\n    }\n  }\n}\n\nexport function topKImpl<T extends Tensor, R extends Rank>(\n    x: TypedArray, xShape: number[], xDtype: NumericDataType, k: number,\n    sorted: boolean):\n    [TensorBuffer<R, NumericDataType>, TensorBuffer<R, 'int32'>] {\n  // Reshape into a 2d tensor [batch, lastDim] and compute topk along lastDim.\n  const lastDim = xShape[xShape.length - 1];\n  const [batch, size] = [x.length / lastDim, lastDim];\n  const allTopKVals = util.getTypedArrayFromDType(xDtype, batch * k);\n  const allTopKIndices = util.getTypedArrayFromDType('int32', batch * k);\n\n  for (let b = 0; b < batch; b++) {\n    const offset = b * size;\n    const vals = x.subarray(offset, offset + size);\n\n    let valAndInd: Pair[] = new Array(vals.length);\n    vals.forEach(\n        (value: number, index: number) => valAndInd[index] = {value, index});\n\n    if (k < valAndInd.length) {\n      select(valAndInd, k);\n      valAndInd = valAndInd.slice(0, k);\n    }\n\n    if (sorted) {\n      valAndInd.sort(comparePair);\n    }\n    \n    const outOffset = b * k;\n    const topKVals = allTopKVals.subarray(outOffset, outOffset + k);\n    const topKIndices = allTopKIndices.subarray(outOffset, outOffset + k);\n    for (let i = 0; i < k; i++) {\n      topKVals[i] = valAndInd[i].value;\n      topKIndices[i] = valAndInd[i].index;\n    }\n  }\n  // Reshape back to the original input shape, except that the last\n  // dimension is k.\n  const outputShape = xShape.slice();\n  outputShape[outputShape.length - 1] = k;\n\n  return [\n    buffer(outputShape as ShapeMap[R], xDtype, allTopKVals),\n    buffer(outputShape as ShapeMap[R], 'int32', allTopKIndices)\n  ];\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Abs, AbsInputs, KernelConfig, KernelFunc, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function simpleAbsImpl(vals: TypedArray): Float32Array {\n  const resultValues = new Float32Array(vals.length);\n  for (let i = 0; i < vals.length; ++i) {\n    resultValues[i] = Math.abs(vals[i]);\n  }\n  return resultValues;\n}\n\nexport const abs = (args: {inputs: AbsInputs, backend: MathBackendCPU}) => {\n  const {x} = args.inputs;\n  const cpuBackend = args.backend;\n\n  assertNotComplex(x, 'abs');\n\n  let resultValues = new Float32Array(util.sizeFromShape(x.shape));\n  const values = cpuBackend.data.get(x.dataId).values as TypedArray;\n  resultValues = simpleAbsImpl(values);\n\n  return cpuBackend.makeOutput(resultValues, x.shape, x.dtype);\n};\n\nexport const absConfig: KernelConfig = {\n  kernelName: Abs,\n  backendName: 'cpu',\n  kernelFunc: abs as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, DataType, Rank, TensorBuffer, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function bincountImpl(\n    xVals: TypedArray, weightsVals: TypedArray, weightsDtype: DataType,\n    weightsShape: number[], size: number): TypedArray {\n  const weightsSize = util.sizeFromShape(weightsShape);\n  const outVals = util.makeZerosTypedArray(size, weightsDtype) as TypedArray;\n\n  for (let i = 0; i < xVals.length; i++) {\n    const value = xVals[i];\n    if (value < 0) {\n      throw new Error('Input x must be non-negative!');\n    }\n\n    if (value >= size) {\n      continue;\n    }\n\n    if (weightsSize > 0) {\n      outVals[value] += weightsVals[i];\n    } else {\n      outVals[value] += 1;\n    }\n  }\n\n  return outVals;\n}\n\nexport function bincountReduceImpl<R extends Rank>(\n    xBuf: TensorBuffer<R>, weightsBuf: TensorBuffer<R>, size: number,\n    binaryOutput = false): TensorBuffer<R> {\n  const numRows = xBuf.shape[0];\n  const numCols = xBuf.shape[1];\n\n  const outBuf = buffer([numRows, size], weightsBuf.dtype);\n\n  for (let i = 0; i < numRows; i++) {\n    for (let j = 0; j < numCols; j++) {\n      const value = xBuf.get(i, j);\n      if (value < 0) {\n        throw new Error('Input x must be non-negative!');\n      }\n\n      if (value >= size) {\n        continue;\n      }\n\n      if (binaryOutput) {\n        outBuf.set(1, i, value);\n      } else {\n        if (weightsBuf.size > 0) {\n          outBuf.set(outBuf.get(i, value) + weightsBuf.get(i, j), i, value);\n        } else {\n          outBuf.set(outBuf.get(i, value) + 1, i, value);\n        }\n      }\n    }\n  }\n\n  return outBuf as TensorBuffer<R>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Cast, CastAttrs, CastInputs, DataType, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {zeros} from '../utils/zeros_impl';\n\nimport {complex} from './Complex';\nimport {identity} from './Identity';\nimport {real} from './Real';\n\nexport function castImpl(\n    values: TypedArray, shape: number[], inputType: DataType,\n    dtype: DataType): [number[], DataType, TypedArray] {\n  if (dtype === 'int32') {\n    const resultValues = Int32Array.from(values);\n    return [shape, 'int32', resultValues];\n  }\n\n  if (dtype === 'bool') {\n    // This is essentially the result of notEqual(x, 0). We avoid using\n    // kernel notEqual to avoid circular dependency, i.e. binary_utils ->\n    // cast -> notEqual -> binary_utils.\n    const zero = util.toTypedArray([0], inputType);\n\n    const [resultData, resultShape] = createSimpleBinaryKernelImpl(\n        (a, b) => (a !== b) ? 1 : 0)(shape, [], values, zero, 'bool');\n\n    return [resultShape, 'bool', resultData];\n  }\n  throw new Error(`Error in Cast: failed to cast ${inputType} to ${dtype}`);\n}\n\nexport function cast(\n    args: {inputs: CastInputs, backend: MathBackendCPU, attrs: CastAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {dtype} = attrs;\n\n  // Casting to complex64.\n  if (dtype === 'complex64') {\n    if (x.dtype === 'complex64') {\n      return identity({inputs: {x}, backend});\n    }\n\n    const zerosTensorInfo = zeros(backend, x.shape, x.dtype);\n    const floatX = cast({inputs: {x}, backend, attrs: {dtype: 'float32'}});\n\n    const result =\n        complex({inputs: {real: floatX, imag: zerosTensorInfo}, backend});\n\n    backend.disposeIntermediateTensorInfo(zerosTensorInfo);\n    backend.disposeIntermediateTensorInfo(floatX);\n\n    return result;\n  }\n\n  // Casting from complex64\n  if (x.dtype === 'complex64') {\n    const realPart = real({inputs: {input: x}, backend});\n    const result = cast({inputs: {x: realPart}, backend, attrs: {dtype}});\n\n    backend.disposeIntermediateTensorInfo(realPart);\n\n    return result;\n  }\n\n  if (!util.hasEncodingLoss(x.dtype, dtype)) {\n    // We don't change the underlying data, since we cast to higher\n    // precision.\n    const result = identity({inputs: {x}, backend});\n    return {dataId: result.dataId, shape: result.shape, dtype};\n  }\n\n  const values = backend.data.get(x.dataId).values as TypedArray;\n  const [resultShape, resultType, resultData] =\n      castImpl(values, x.shape, x.dtype, dtype);\n  return backend.makeTensorInfo(resultShape, resultType, resultData);\n}\n\nexport const castConfig: KernelConfig = {\n  kernelName: Cast,\n  backendName: 'cpu',\n  kernelFunc: cast as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BackendValues, DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function concatImpl(\n    inputs: Array<{vals: BackendValues, shape: number[]}>, outShape: number[],\n    dtype: DataType, simplyConcat: boolean): TypedArray|string[] {\n  const outVals = util.getArrayFromDType(dtype, util.sizeFromShape(outShape));\n\n  if (simplyConcat && dtype !== 'string') {\n    // Use built-in TypedArray.set() method for speed.\n    let offset = 0;\n    inputs.forEach(input => {\n      const size = util.sizeFromShape(input.shape);\n\n      (outVals as TypedArray).set(input.vals as TypedArray, offset);\n      offset += size;\n    });\n  } else {\n    let colOffset = 0;\n\n    inputs.forEach(input => {\n      const decodedData = dtype === 'string' ?\n          backend_util.fromUint8ToStringArray(input.vals as Uint8Array[]) :\n          input.vals as TypedArray;\n\n      let tIdx = 0;\n\n      for (let row = 0; row < input.shape[0]; ++row) {\n        const resIdx = row * outShape[1] + colOffset;\n        for (let col = 0; col < input.shape[1]; ++col) {\n          outVals[resIdx + col] = decodedData[tIdx++];\n        }\n      }\n\n      colOffset += input.shape[1];\n    });\n  }\n\n  return outVals;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, DataType, Rank, TensorBuffer, TypedArray} from '@tensorflow/tfjs-core';\n\nexport function gatherNdImpl<R extends Rank>(\n    indicesData: TypedArray, paramsBuf: TensorBuffer<R>, dtype: DataType,\n    numSlices: number, sliceRank: number, sliceSize: number, strides: number[],\n    paramsShape: number[], paramsSize: number): TensorBuffer<R> {\n  const outBuf = buffer([numSlices, sliceSize], dtype);\n\n  for (let i = 0; i < numSlices; i++) {\n    const index = [];\n    let flattenIndex = 0;\n    for (let j = 0; j < sliceRank; j++) {\n      const dim = indicesData[i * sliceRank + j];\n      flattenIndex += dim * strides[j];\n      index.push(dim);\n    }\n    if (flattenIndex < 0 || flattenIndex >= paramsSize / sliceSize) {\n      throw new Error(\n          `Invalid indices: ${index} does not index into ${paramsShape}`);\n    }\n\n    for (let k = 0; k < sliceSize; k++) {\n      outBuf.values[i * sliceSize + k] =\n          paramsBuf.get(...paramsBuf.indexToLoc(flattenIndex * sliceSize + k));\n    }\n  }\n\n  return outBuf as TensorBuffer<R>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, DataType, Rank, TensorBuffer} from '@tensorflow/tfjs-core';\n\nexport function gatherV2Impl<R extends Rank, D extends DataType>(\n    xBuf: TensorBuffer<R, D>, indicesBuf: TensorBuffer<R, D>,\n    flattenOutputShape: number[]): TensorBuffer<R, D> {\n  const outBuf = buffer(flattenOutputShape, xBuf.dtype);\n  for (let i = 0; i < outBuf.size; ++i) {\n    const newLoc = outBuf.indexToLoc(i);\n\n    const originalLoc: number[] = newLoc.slice();\n    const batchIdx = originalLoc[0];\n    const indicesIdx = originalLoc[2];\n    const indicesIndex = indicesBuf.locToIndex([batchIdx, indicesIdx]);\n    originalLoc[2] = indicesBuf.values[indicesIndex] as number;\n\n    const originalIndex = xBuf.locToIndex(originalLoc);\n\n    if (0 <= originalIndex && originalIndex < xBuf.values.length) {\n      outBuf.values[i] = xBuf.values[originalIndex];\n    } // Else, index is out of bounds, so leave the default zero val in outBuf.\n  }\n\n  return outBuf as TensorBuffer<R, D>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function linSpaceImpl(\n    start: number, stop: number, num: number): TypedArray {\n  const step = (stop - start) / (num - 1);\n\n  const values = util.makeZerosTypedArray(num, 'float32');\n  values[0] = start;\n  for (let i = 1; i < values.length; i++) {\n    values[i] = values[i - 1] + step;\n  }\n\n  return values;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, NumericDataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function maxImpl(\n    aVals: TypedArray, reduceSize: number, outShape: number[],\n    dtype: DataType): TypedArray {\n  const vals = util.getTypedArrayFromDType(\n      dtype as NumericDataType, util.sizeFromShape(outShape));\n\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let max = aVals[offset];\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      if (Number.isNaN(value) ||\n          value > max) {  // comparison with NaN always return false\n        max = value;\n      }\n    }\n    vals[i] = max;\n  }\n  return vals;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, KernelConfig, KernelFunc, Neg, TensorInfo, TypedArray, UnaryInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {multiplyImpl} from './Multiply';\n\nexport function negImpl(xVals: TypedArray, xShape: number[], xDtype: DataType):\n    [TypedArray, number[]] {\n  const minusOne =\n      util.createScalarValue(-1 as unknown as 'float32', xDtype) as TypedArray;\n  return multiplyImpl([], xShape, minusOne, xVals, xDtype);\n}\n\nexport function neg(args: {inputs: UnaryInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  assertNotComplex(x, 'neg');\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const [res, newShape] = negImpl(xVals, x.shape, x.dtype);\n\n  return backend.makeTensorInfo(newShape, x.dtype, res);\n}\n\nexport const negConfig: KernelConfig = {\n  kernelName: Neg,\n  backendName: 'cpu',\n  kernelFunc: neg as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, KernelConfig, KernelFunc, Prod, ProdAttrs, ProdInputs, TensorInfo, TypedArray, upcastType, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {transpose} from './Transpose';\n\nexport function prodImpl(\n    xShape: number[], xDtype: DataType, xVals: TypedArray,\n    reductionAxes: number[]):\n    {outVals: TypedArray, outShape: number[], outDtype: DataType} {\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(xShape, reductionAxes);\n  const outDtype = upcastType(xDtype, 'int32');\n  const outVals = util.makeZerosTypedArray(\n                      util.sizeFromShape(outShape), outDtype) as TypedArray;\n  const reduceSize = util.sizeFromShape(reduceShape);\n\n  for (let i = 0; i < outVals.length; ++i) {\n    const offset = i * reduceSize;\n    let prod = 1;\n    for (let j = 0; j < reduceSize; ++j) {\n      prod *= xVals[offset + j];\n    }\n    outVals[i] = prod;\n  }\n\n  return {outVals, outShape, outDtype};\n}\n\nexport function prod(\n    args: {inputs: ProdInputs, backend: MathBackendCPU, attrs: ProdAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  assertNotComplex(x, 'prod');\n\n  const xRank = x.shape.length;\n  const axes = util.parseAxisParam(axis, x.shape);\n\n  const permutation = backend_util.getAxesPermutation(axes, xRank);\n  let reductionAxes = axes;\n  let permutedX = x;\n  const intermediateTensorInfos = [];\n  if (permutation != null) {\n    permutedX = transpose({inputs: {x}, backend, attrs: {perm: permutation}});\n    intermediateTensorInfos.push(permutedX);\n    reductionAxes = backend_util.getInnerMostAxes(reductionAxes.length, xRank);\n  }\n\n  const xVals = backend.data.get(permutedX.dataId).values as TypedArray;\n  const {outVals, outShape, outDtype} =\n      prodImpl(permutedX.shape, permutedX.dtype, xVals, reductionAxes);\n\n  let resultShape = outShape;\n  if (keepDims) {\n    resultShape = backend_util.expandShapeToKeepDim(outShape, axes);\n  }\n\n  intermediateTensorInfos.forEach(\n      t => backend.disposeIntermediateTensorInfo(t));\n\n  return backend.makeTensorInfo(resultShape, outDtype, outVals);\n}\n\nexport const prodConfig: KernelConfig = {\n  kernelName: Prod,\n  backendName: 'cpu',\n  kernelFunc: prod as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataTypeMap, util} from '@tensorflow/tfjs-core';\n\nexport function rangeImpl(\n    start: number, stop: number, step: number,\n    dtype: 'float32'|'int32'): DataTypeMap['float32' | 'int32'] {\n  const sameStartStop = start === stop;\n  const increasingRangeNegativeStep = start < stop && step < 0;\n  const decreasingRangePositiveStep = stop < start && step > 1;\n\n  if (sameStartStop || increasingRangeNegativeStep ||\n      decreasingRangePositiveStep) {\n    return util.makeZerosTypedArray(0, dtype);\n  }\n\n  const numElements = Math.abs(Math.ceil((stop - start) / step));\n  const values = util.makeZerosTypedArray(numElements, dtype);\n\n  if (stop < start && step === 1) {\n    // Auto adjust the step's sign if it hasn't been set\n    // (or was set to 1)\n    step = -1;\n  }\n\n  values[0] = start;\n  for (let i = 1; i < values.length; i++) {\n    values[i] = values[i - 1] + step;\n  }\n  return values;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {buffer, Rank, ShapeMap, TensorBuffer, TypedArray} from '@tensorflow/tfjs-core';\n\ninterface DefaultValueTypeMap {\n  bool: boolean;\n  int32: number;\n  float32: number;\n  string: string;\n}\n\nexport function\nscatterImpl<R extends Rank, D extends 'float32'|'int32'|'bool'|'string'>(\n    indices: TensorBuffer<R, 'int32'>, updates: TensorBuffer<R, D>,\n    shape: number[], outputSize: number, sliceSize: number, numUpdates: number,\n    sliceRank: number, strides: number[],\n    defaultValue: TensorBuffer<R, D>|DefaultValueTypeMap[D],\n    sumDupeIndices: boolean): TensorBuffer<R, D> {\n  const flattenShape = [outputSize / sliceSize, sliceSize];\n\n  const indicesData = indices.values as TypedArray;\n  const updatesData = updates.values;\n\n  if (outputSize === 0) {\n    return buffer(shape as ShapeMap[R], updates.dtype);\n  }\n\n  const outBuf = (defaultValue instanceof TensorBuffer) ?\n      defaultValue :\n      buffer(flattenShape, updates.dtype);\n  if (typeof defaultValue === 'string') {\n    (outBuf.values as string[]).fill(defaultValue);\n  } else if (typeof defaultValue === 'number') {\n    (outBuf.values as TypedArray).fill(defaultValue);\n  } else if (typeof defaultValue === 'boolean') {\n    (outBuf.values as TypedArray).fill(+defaultValue);\n  }\n\n  for (let i = 0; i < numUpdates; i++) {\n    const index = [];\n    let flattenIndex = 0;\n    for (let j = 0; j < sliceRank; j++) {\n      const dim = indicesData[i * sliceRank + j];\n      index.push(dim);\n      flattenIndex += dim * strides[j];\n    }\n\n    if (flattenIndex < 0 || flattenIndex >= outputSize / sliceSize) {\n      throw new Error(`Invalid indices: ${index} does not index into ${shape}`);\n    }\n\n    for (let k = 0; k < sliceSize; k++) {\n      if (sumDupeIndices) {\n        (outBuf.values as TypedArray)[flattenIndex * sliceSize + k] +=\n            (updatesData as TypedArray)[i * sliceSize + k];\n      } else {\n        outBuf.values[flattenIndex * sliceSize + k] = updates.rank === 0 ?\n            updatesData[0] :\n            updatesData[i * sliceSize + k];\n      }\n    }\n  }\n\n  return outBuf as TensorBuffer<R, D>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BackendValues, buffer, DataType, KernelConfig, KernelFunc, Slice, slice_util, SliceAttrs, SliceInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function sliceImpl(\n    vals: BackendValues, begin: number[], size: number[], shape: number[],\n    dtype: DataType): BackendValues {\n  const isContinous = slice_util.isSliceContinous(shape, begin, size);\n  const length = util.sizeFromShape(size);\n  const xStrides = util.computeStrides(shape);\n\n  if (isContinous) {\n    const flatOffset = slice_util.computeFlatOffset(begin, xStrides);\n\n    if (dtype === 'string') {\n      return (vals as Uint8Array[]).slice(flatOffset, flatOffset + length);\n    }\n\n    return (vals as TypedArray).subarray(flatOffset, flatOffset + length);\n  }\n\n  const decodedData = dtype === 'string' ?\n      backend_util.fromUint8ToStringArray(vals as Uint8Array[]) :\n      vals as TypedArray;\n\n  const inBuf = buffer(shape, dtype, decodedData);\n  const outBuf = buffer(size, dtype);\n  for (let i = 0; i < outBuf.size; ++i) {\n    const outLoc = outBuf.indexToLoc(i);\n    const inLoc = outLoc.map((idx: number, j) => idx + begin[j]);\n    outBuf.set(inBuf.get(...inLoc), ...outLoc);\n  }\n\n  if (dtype === 'string') {\n    return backend_util.fromStringArrayToUint8(outBuf.values as string[]);\n  }\n  return outBuf.values as TypedArray;\n}\n\nexport function slice(\n    args: {inputs: SliceInputs, backend: MathBackendCPU, attrs: SliceAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {begin, size} = attrs;\n\n  assertNotComplex(x, 'slice');\n\n  const [$begin, $size] = slice_util.parseSliceParams(x, begin, size);\n  slice_util.assertParamsValid(x, $begin, $size);\n\n  const vals = backend.data.get(x.dataId).values;\n  const outVals = sliceImpl(vals, $begin, $size, x.shape, x.dtype);\n  return backend.makeTensorInfo($size, x.dtype, outVals);\n}\n\nexport const sliceConfig: KernelConfig = {\n  kernelName: Slice,\n  backendName: 'cpu',\n  kernelFunc: slice as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function sparseFillEmptyRowsImpl(\n    indices: TypedArray, indicesShape: number[], indicesDType: DataType,\n    values: TypedArray, valuesDType: DataType, denseShape: TypedArray,\n    defaultValue: number):\n    [TypedArray, number[], TypedArray, boolean[], number[]] {\n  const indicesCount = indicesShape[0];\n  const denseRows = denseShape[0];\n\n  const emptyRowIndicator: boolean[] = new Array(denseRows);\n  const reverseIndexMap: number[] = new Array(indicesCount);\n\n  const rank = indicesShape[1];\n\n  if (denseRows === 0) {\n    if (indicesCount !== 0) {\n      throw new Error(\n          backend_util.getSparseFillEmptyRowsIndicesDenseShapeMismatch(\n              indicesCount));\n    }\n    const outputIndices = util.getArrayFromDType(indicesDType, 0) as TypedArray;\n    const outputValues = util.getArrayFromDType(valuesDType, 0) as TypedArray;\n    return [\n      outputIndices, [0, rank], outputValues, emptyRowIndicator, reverseIndexMap\n    ];\n  }\n\n  let rowsAreOrdered = true;\n  let lastIndicesRow = 0;\n  const csrOffset: number[] = new Array(denseRows).fill(0);\n\n  for (let i = 0; i < indicesCount; ++i) {\n    // indices is a 2d tensor with shape of [N, rank]\n    const row = indices[i * rank];\n    if (row < 0) {\n      throw new Error(\n          backend_util.getSparseFillEmptyRowsNegativeIndexErrorMessage(i, row));\n    }\n    if (row >= denseRows) {\n      throw new Error(\n          backend_util.getSparseFillEmptyRowsOutOfRangeIndexErrorMessage(\n              i, row, denseRows));\n    }\n    ++csrOffset[row];\n    rowsAreOrdered = rowsAreOrdered && (row >= lastIndicesRow);\n    lastIndicesRow = row;\n  }\n\n  let allRowsFull = true;\n  for (let row = 0; row < denseRows; ++row) {\n    // csrOffset here describes the number of elements in this dense row\n    const rowEmpty = (csrOffset[row] === 0);\n    emptyRowIndicator[row] = rowEmpty;\n    allRowsFull = allRowsFull && !rowEmpty;\n    // In filled version, each row has at least one element.\n    csrOffset[row] = Math.max(csrOffset[row], 1);\n    // Update csrOffset to represent the number of elements up to and\n    // including denseRows + 1:\n    //  csrOffset[0] == #{elements of row 0}\n    //  csrOffset[1] == #{elements of row 1} + #{elements of row 0}\n    //  ..\n    //  csrOffset[i] == starting index for elements in row i + 1.\n    if (row > 0) {\n      csrOffset[row] += csrOffset[row - 1];\n    }\n  }\n\n  if (allRowsFull && rowsAreOrdered) {\n    const outputIndices: TypedArray = indices;\n    const outputValues: TypedArray = values;\n    for (let i = 0; i < indicesCount; ++i) {\n      reverseIndexMap[i] = i;\n    }\n    return [\n      outputIndices, [indicesCount, rank], outputValues, emptyRowIndicator,\n      reverseIndexMap\n    ];\n  } else {\n    const fullIndicesCount = csrOffset[denseRows - 1];\n    const outputIndices =\n        util.getArrayFromDType(indicesDType, fullIndicesCount * rank) as\n        TypedArray;\n    const outputValues =\n        util.getArrayFromDType(valuesDType, fullIndicesCount) as TypedArray;\n    const filledCount: number[] = new Array(denseRows).fill(0);\n\n    // Fill in values for rows that are not missing\n    for (let i = 0; i < indicesCount; ++i) {\n      // indices is a 2d tensor with shape of [N, rank]\n      const row = indices[i * rank];\n      const offset = filledCount[row];\n      const outputI = ((row === 0) ? 0 : csrOffset[row - 1]) + offset;\n      filledCount[row]++;  // Increment the filled count for this row.\n      for (let j = 0; j < rank; ++j) {\n        // indices and outputIndices are 2d tensors with shape of [N, rank]\n        outputIndices[outputI * rank + j] = indices[i * rank + j];\n      }\n      outputValues[outputI] = values[i];\n      // We'll need this reverse index map to backprop correctly.\n      reverseIndexMap[i] = outputI;\n    }\n\n    // Fill in values for rows that are missing\n    for (let row = 0; row < denseRows; ++row) {\n      const rowCount = filledCount[row];\n      if (rowCount === 0) {  // We haven't filled this row\n        const startingIndex = (row === 0) ? 0 : csrOffset[row - 1];\n        // Remaining index values were set to zero already.\n        // Just need to set the row index in the right location.\n        // outputIndices is a 2d tensor with shape of [N, rank]\n        outputIndices[startingIndex * rank + 0] = row;\n        for (let col = 1; col < rank; ++col) {\n          outputIndices[startingIndex * rank + col] = 0;\n        }\n        outputValues[startingIndex] = defaultValue;\n      }\n    }\n    return [\n      outputIndices, [fullIndicesCount, rank], outputValues, emptyRowIndicator,\n      reverseIndexMap\n    ];\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function sparseReshapeImpl(\n    inputIndices: TypedArray, inputIndicesShape: number[], inputDType: DataType,\n    inputShape: number[],\n    targetShape: number[]): [TypedArray, number[], number[]] {\n  const denseSize = util.sizeFromShape(inputShape);\n  const nnz = inputIndicesShape[0];\n  const outputRank = targetShape.length;\n\n  // Compute the output shape. Determine product of specified dimensions, and\n  // find the index of the unspecified one.\n  const outputShape: number[] = [];\n  let product = 1;\n  let unknownIndex = -1;\n  for (let d = 0; d < outputRank; ++d) {\n    const size = targetShape[d];\n    if (size === -1) {\n      if (unknownIndex !== -1) {\n        throw new Error(\n            backend_util\n                .getSparseReshapeMultipleNegativeOneOutputDimErrorMessage(\n                    unknownIndex, d));\n      }\n      unknownIndex = d;\n      outputShape.push(1);\n    } else {\n      if (size < 0) {\n        throw new Error(\n            backend_util.getSparseReshapeNegativeOutputDimErrorMessage(\n                d, size));\n      }\n      product *= size;\n      outputShape.push(size);\n    }\n  }\n  if (unknownIndex !== -1) {\n    if (product <= 0) {\n      throw new Error(\n          backend_util.getSparseReshapeEmptyTensorZeroOutputDimErrorMessage());\n    }\n    const missing = Math.trunc(denseSize / product);\n    if (product * missing !== denseSize) {\n      throw new Error(\n          backend_util.getSparseReshapeInputOutputMultipleErrorMessage(\n              inputShape, outputShape));\n    }\n\n    outputShape[unknownIndex] = missing;\n  }\n  const outputSize = util.sizeFromShape(outputShape);\n  if (outputSize !== denseSize) {\n    throw new Error(\n        backend_util.getSparseReshapeInputOutputMismatchErrorMessage(\n            inputShape, outputShape));\n  }\n\n  const inputRank = inputShape.length;\n  const inputStrides: number[] = [];\n  if (inputRank > 0) {\n    inputStrides[inputRank - 1] = 1;\n    for (let d = inputRank - 2; d >= 0; --d) {\n      inputStrides[d] = inputStrides[d + 1] * inputShape[d + 1];\n    }\n  }\n\n  const outputStrides: number[] = [];\n  if (outputRank > 0) {\n    outputStrides[outputRank - 1] = 1;\n    for (let d = outputRank - 2; d >= 0; --d) {\n      outputStrides[d] = outputStrides[d + 1] * outputShape[d + 1];\n    }\n  }\n\n  const newIndices =\n      util.getArrayFromDType(inputDType, nnz * outputRank) as TypedArray;\n  for (let i = 0; i < nnz; ++i) {\n    let id = 0;\n    for (let j = 0; j < inputRank; ++j) {\n      // inputIndices is a 2d tensor with shape of [nnz, inputRank]\n      id += inputIndices[i * inputRank + j] * inputStrides[j];\n    }\n    for (let j = 0; j < outputRank; ++j) {\n      // newIndices is a 2d tensor with shape of [nnz, outputRank]\n      newIndices[i * outputRank + j] = Math.trunc(id / outputStrides[j]);\n      id %= outputStrides[j];\n    }\n  }\n  return [newIndices, [nnz, outputRank], outputShape];\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function sparseSegmentReductionImpl(\n    input: TypedArray, inputShape: number[], inputDType: DataType,\n    indices: TypedArray, segmentIds: TypedArray, isMean = false,\n    defaultValue = 0): [TypedArray, number[]] {\n  const numIndices = indices.length;\n\n  // Flatten the array to two dimensions\n  const inputFlat: number[] = [inputShape[0], input.length / inputShape[0]];\n  const numCol = inputFlat[1];\n  // Note that the current implementation assumes that segmentIds values are\n  // sorted.\n  const lastSegmentIdPlusOne =\n      numIndices > 0 ? segmentIds[numIndices - 1] + 1 : 0;\n  const outputRows = lastSegmentIdPlusOne;\n\n  if (outputRows < 0) {\n    throw new Error(\n        backend_util.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());\n  }\n\n  const outputShape = inputShape.slice();\n  outputShape[0] = outputRows;\n\n  const outputLength =\n      outputShape.reduce((product, value) => product * value, 1);\n  // Output array is initialized with the value 0 by default.\n  const output = util.getArrayFromDType(inputDType, outputLength) as TypedArray;\n\n  // Note that we do not initialize the output buffer with a default value, so\n  // we need to explicitly set missing indices to the default value.\n  if (numIndices === 0) {\n    if (outputRows > 0) {\n      output.fill(defaultValue);\n    }\n    return [output, outputShape];\n  }\n\n  if (outputRows <= 0) {\n    throw new Error(\n        backend_util.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());\n  }\n\n  let start = 0, end = 1;\n  // Index from which the output is not initialized.\n  let uninitializedIndex = 0;\n  let outIndex = segmentIds[start];\n\n  while (true) {\n    // We initialize nextIndex to 0 to avoid may be uninitialized warning\n    let nextIndex = 0;\n    if (end < numIndices) {\n      nextIndex = segmentIds[end];\n      if (outIndex === nextIndex) {\n        ++end;\n        continue;\n      }\n      // We have a new segment here.  Verify that the segment ids are growing.\n      if (outIndex >= nextIndex) {\n        throw new Error(backend_util\n            .getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage());\n      }\n    }\n\n    if (outIndex < 0 || outIndex >= outputRows) {\n      throw new Error(\n          backend_util.getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage(\n              outIndex, outputRows));\n    }\n\n    // If there is a gap between two indices, we need to set that gap to the\n    // default value.\n    if (outIndex > uninitializedIndex) {\n      output.fill(defaultValue, uninitializedIndex * numCol, outIndex * numCol);\n    }\n\n    for (let i = start; i < end; ++i) {\n      const index = indices[i];\n      if (index < 0 || index >= inputFlat[0]) {\n        throw new Error(\n            backend_util.getSparseSegmentReductionIndicesOutOfRangeErrorMessage(\n                i, indices[i], inputFlat[0]));\n      }\n      for (let j = 0; j < numCol; j++) {\n        output[outIndex * numCol + j] += input[index * numCol + j];\n      }\n    }\n\n    if (isMean) {\n      for (let j = 0; j < numCol; j++) {\n        output[outIndex * numCol + j] /= end - start;\n      }\n    }\n\n    start = end;\n    ++end;\n    uninitializedIndex = outIndex + 1;\n    outIndex = nextIndex;\n    if (end > numIndices) {\n      break;\n    }\n  }\n\n  // Fill the gap at the end with the default value.\n  if (uninitializedIndex < outputRows) {\n    output.fill(defaultValue, uninitializedIndex * numCol, outputRows * numCol);\n  }\n\n  return [output, outputShape];\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, Rank, TensorBuffer} from '@tensorflow/tfjs-core';\n\nexport function stridedSliceImpl<R extends Rank>(\n    outShape: number[], xBuf: TensorBuffer<R>, strides: number[],\n    begin: number[]): TensorBuffer<R> {\n  const outBuf = buffer(outShape, xBuf.dtype);\n\n  for (let i = 0; i < outBuf.size; i++) {\n    const loc = outBuf.indexToLoc(i);\n\n    const newLoc: number[] = new Array(loc.length);\n    for (let j = 0; j < newLoc.length; j++) {\n      newLoc[j] = loc[j] * strides[j] + begin[j];\n    }\n    outBuf.set(xBuf.get(...newLoc), ...loc);\n  }\n\n  return outBuf as TensorBuffer<R>;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function stringToHashBucketFastImpl(\n    input: Uint8Array[], numBuckets: number): TypedArray {\n  const output = util.getArrayFromDType('int32', input.length) as TypedArray;\n\n  for (let i = 0; i < input.length; ++i) {\n    output[i] =\n        util.fingerPrint64(input[i]).modulo(numBuckets).getLowBitsUnsigned();\n  }\n\n  return output;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, DataType, Rank, TensorBuffer} from '@tensorflow/tfjs-core';\n\n/**\n * An implementation of the tile kernel shared between webgl and cpu for string\n * tensors only.\n */\n\nexport function tileImpl<R extends Rank>(\n    xBuf: TensorBuffer<R, DataType>,\n    reps: number[]): TensorBuffer<R, DataType> {\n  const newShape: number[] = new Array(xBuf.rank);\n  for (let i = 0; i < newShape.length; i++) {\n    newShape[i] = xBuf.shape[i] * reps[i];\n  }\n  const result = buffer(newShape, xBuf.dtype);\n  for (let i = 0; i < result.values.length; ++i) {\n    const newLoc = result.indexToLoc(i);\n\n    const originalLoc: number[] = new Array(xBuf.rank);\n    for (let j = 0; j < originalLoc.length; j++) {\n      originalLoc[j] = newLoc[j] % xBuf.shape[j];\n    }\n\n    const originalIndex = xBuf.locToIndex(originalLoc);\n\n    result.values[i] = xBuf.values[originalIndex];\n  }\n  return result as TensorBuffer<R, DataType>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, NumericDataType, TypedArray} from '@tensorflow/tfjs-core';\nimport {util} from '@tensorflow/tfjs-core';\n\nexport function transposeImpl(\n    xVals: TypedArray, xShape: number[], dtype: DataType, perm: number[],\n    newShape: number[]): TypedArray {\n  const xRank = xShape.length;\n  const xSize = util.sizeFromShape(xShape);\n  const xStrides = util.computeStrides(xShape);\n  const newStrides = util.computeStrides(newShape);\n\n  const result = util.getTypedArrayFromDType(\n      dtype as NumericDataType, util.sizeFromShape(newShape));\n\n  for (let i = 0; i < xSize; ++i) {\n    const loc = util.indexToLoc(i, xRank, xStrides);\n\n    // Permute location.\n    const newLoc: number[] = new Array(loc.length);\n    for (let i = 0; i < newLoc.length; i++) {\n      newLoc[i] = loc[perm[i]];\n    }\n\n    const newIndex = util.locToIndex(newLoc, xRank, newStrides);\n    result[newIndex] = xVals[i];\n  }\n  return result;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {BackendValues, DataType, TensorBuffer, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function uniqueImpl(\n    values: BackendValues, axis: number, shape: number[], dtype: DataType): {\n  outputValues: BackendValues,\n  outputShape: number[],\n  indices: BackendValues\n} {\n  // Normalize and validate axis.\n  const $axis = util.parseAxisParam(axis, shape)[0];\n\n  // Calculate the new shape that is suitable for extracting data along the\n  // given axis.\n  //\n  // The rank is 3.\n  // The size of the 1st dimension is the size of all the axes < the given axis.\n  // The size of the 2nd dimension is the same as the size of the given axis.\n  // The size of the 3rd dimension is the size of all the axes > the given axis.\n  //\n  // For example, for a 4D tensor with shape=[2, 3, 5, 4] and axis=2, the\n  // newShape would be: [2*3, 5, 4].\n  //\n  // Note that this is not the final output shape. This will be the shape for an\n  // intermediate TensorBuffer (see inputBuffer below) to allow us to extract\n  // values along the given axis. To demonstrate how it works, consider the\n  // following example:\n  //\n  // Input: a 3D tensor, with shape [1, 2, 3]\n  // [\n  //   [\n  //      [1,2,3],\n  //      [4,5,6]\n  //   ]\n  // ]\n  // Axis: 2 (the last axis).\n  // Along axis 2, we expect to extract 3 tensors: [1,4], [2,5], [3,6].\n  //\n  // For this example, newShape would be: [2, 3, 1], where 2 is calculated from\n  // 1*2. The re-shaped data would look like:\n  //\n  // [\n  //   [\n  //     [1], [2], [3]\n  //   ],\n  //   [\n  //     [4], [5], [6]\n  //   ]\n  // ]\n  //\n  // Then, we can construct a 3-level nested loop by the following dimension\n  // order to extract the values along the axis (dimension1):\n  // i: dimension1       // 0,1,2 (newShape[1])\n  //   m: dimension0     // 0,1   (newShape[0])\n  //     n: dimension2   // 0     (newShape[2])\n  //\n  //                       m, i, n\n  //                      ---------\n  // Iteration 0: data at [0, 0, 0] => \"1\"\n  // Iteration 1: data at [1, 0, 0] => \"4\"\n  // We got [1,4].\n  // Iteration 2: data at [0, 1, 0] => \"2\"\n  // Iteration 3: data at [1, 1, 0] => \"5\"\n  // We got [2,5].\n  // Iteration 4: data at [0, 2, 0] => \"3\"\n  // Iteration 5: data at [1, 2, 0] => \"6\"\n  // We got [3,6].\n  const newShape = [1, shape[0], 1];\n  for (let i = 0; i < $axis; i++) {\n    newShape[0] *= shape[i];\n  }\n  newShape[1] = shape[$axis];\n  for (let i = $axis + 1; i < shape.length; i++) {\n    newShape[2] *= shape[i];\n  }\n\n  // A map from unique elements (their string representations) to their values\n  // in \"indices\" (below).\n  const uniqueElements = new Map<string, number>();\n  // The indices of each unique element in the original tensor along the given\n  // axis. It is 1D and has the same size as the given axis.\n  const indices = new Int32Array(shape[$axis]);\n  // Create a buffer so we can easily extract value at a given location.\n  const inputBuffer = new TensorBuffer(newShape, dtype, values as TypedArray);\n  // The indices along the given axis that have unique elements. This is a\n  // de-duped version of \"indices\" above.\n  const uniqueIndices: number[] = [];\n  const is1DTensor = newShape[0] === 1 && newShape[2] === 1;\n  for (let i = 0; i < shape[$axis]; i++) {\n    // Extract values along the axis.\n    let element: string;\n    if (is1DTensor) {\n      // Fast path for 1D tensor input.\n      element = values[i].toString();\n    } else {\n      const axisValues = [];\n      for (let m = 0; m < newShape[0]; m++) {\n        for (let n = 0; n < newShape[2]; n++) {\n          axisValues.push(inputBuffer.get(m, i, n));\n        }\n      }\n      element = axisValues.join(',');\n    }\n\n    // Dedup and update various indices.\n    const existingIndex = uniqueElements.get(element);\n    if (existingIndex != null) {\n      indices[i] = existingIndex;\n    } else {\n      const uniqueIndex = uniqueElements.size;\n      uniqueElements.set(element, uniqueIndex);\n      indices[i] = uniqueIndex;\n      uniqueIndices.push(i);\n    }\n  }\n\n  // Now we know where each of the unique elements are located along the axis\n  // (uniqueIndices). Extract them from input buffer and store them in the\n  // output buffer.\n  const outputTmpShape = newShape.slice();\n  outputTmpShape[1] = uniqueElements.size;\n  const outputBuffer = new TensorBuffer(outputTmpShape, dtype);\n  uniqueIndices.forEach((uniqueElementIndex, i) => {\n    for (let m = 0; m < newShape[0]; m++) {\n      for (let n = 0; n < newShape[2]; n++) {\n        outputBuffer.set(inputBuffer.get(m, uniqueElementIndex, n), m, i, n);\n      }\n    }\n  });\n\n  // The output shape can be calculated from the input shape with the size of\n  // the given axis replaced by the number of unique elements along that axis.\n  const outputShape = shape.slice();\n  outputShape[$axis] = outputTmpShape[1];\n\n  return {\n    outputValues: outputBuffer.values as BackendValues,\n    outputShape,\n    indices,\n  };\n}\n","\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// Import shared functionality from tfjs-backend-cpu without triggering\n// side effects.\n// tslint:disable-next-line: no-imports-from-dist\nimport * as shared from '@tensorflow/tfjs-backend-cpu/dist/shared';\n// tslint:disable-next-line: no-imports-from-dist\nimport {SimpleBinaryKernelImpl} from '@tensorflow/tfjs-backend-cpu/dist/shared';\n// tslint:disable-next-line: no-imports-from-dist\nimport {SimpleUnaryImpl} from '@tensorflow/tfjs-backend-cpu/dist/utils/unary_types';\n\nexport type SimpleBinaryKernelImplCPU = SimpleBinaryKernelImpl;\nexport type SimpleUnaryKernelImplCPU = SimpleUnaryImpl;\nconst {\n  addImpl: addImplCPU,\n  bincountImpl: bincountImplCPU,\n  bincountReduceImpl: bincountReduceImplCPU,\n  castImpl: castImplCPU,\n  ceilImpl: ceilImplCPU,\n  concatImpl: concatImplCPU,\n  equalImpl: equalImplCPU,\n  expImpl: expImplCPU,\n  expm1Impl: expm1ImplCPU,\n  floorImpl: floorImplCPU,\n  gatherNdImpl: gatherNdImplCPU,\n  gatherV2Impl: gatherV2ImplCPU,\n  greaterImpl: greaterImplCPU,\n  greaterEqualImpl: greaterEqualImplCPU,\n  lessImpl: lessImplCPU,\n  lessEqualImpl: lessEqualImplCPU,\n  linSpaceImpl: linSpaceImplCPU,\n  logImpl: logImplCPU,\n  maxImpl: maxImplCPU,\n  maximumImpl: maximumImplCPU,\n  minimumImpl: minimumImplCPU,\n  multiplyImpl: multiplyImplCPU,\n  negImpl: negImplCPU,\n  notEqualImpl: notEqualImplCPU,\n  prodImpl: prodImplCPU,\n  raggedGatherImpl: raggedGatherImplCPU,\n  raggedRangeImpl: raggedRangeImplCPU,\n  raggedTensorToTensorImpl: raggedTensorToTensorImplCPU,\n  rangeImpl: rangeImplCPU,\n  rsqrtImpl: rsqrtImplCPU,\n  scatterImpl: scatterImplCPU,\n  sigmoidImpl: sigmoidImplCPU,\n  simpleAbsImpl: simpleAbsImplCPU,\n  sliceImpl: sliceImplCPU,\n  sparseFillEmptyRowsImpl: sparseFillEmptyRowsImplCPU,\n  sparseReshapeImpl: sparseReshapeImplCPU,\n  sparseSegmentReductionImpl: sparseSegmentReductionImplCPU,\n  sqrtImpl: sqrtImplCPU,\n  staticRegexReplaceImpl: staticRegexReplaceImplCPU,\n  stridedSliceImpl: stridedSliceImplCPU,\n  stringNGramsImpl: stringNGramsImplCPU,\n  stringSplitImpl: stringSplitImplCPU,\n  stringToHashBucketFastImpl: stringToHashBucketFastImplCPU,\n  subImpl: subImplCPU,\n  tileImpl: tileImplCPU,\n  topKImpl: topKImplCPU,\n  transposeImpl: transposeImplCPU,\n  uniqueImpl: uniqueImplCPU,\n} = shared;\n\nexport {\n  addImplCPU,\n  bincountImplCPU,\n  bincountReduceImplCPU,\n  castImplCPU,\n  ceilImplCPU,\n  concatImplCPU,\n  equalImplCPU,\n  expImplCPU,\n  expm1ImplCPU,\n  floorImplCPU,\n  gatherNdImplCPU,\n  gatherV2ImplCPU,\n  greaterEqualImplCPU,\n  greaterImplCPU,\n  lessEqualImplCPU,\n  lessImplCPU,\n  linSpaceImplCPU,\n  logImplCPU,\n  maxImplCPU,\n  maximumImplCPU,\n  minimumImplCPU,\n  multiplyImplCPU,\n  negImplCPU,\n  notEqualImplCPU,\n  prodImplCPU,\n  raggedGatherImplCPU,\n  raggedRangeImplCPU,\n  raggedTensorToTensorImplCPU,\n  scatterImplCPU,\n  sigmoidImplCPU,\n  simpleAbsImplCPU,\n  sliceImplCPU,\n  sparseFillEmptyRowsImplCPU,\n  sparseReshapeImplCPU,\n  sparseSegmentReductionImplCPU,\n  sqrtImplCPU,\n  staticRegexReplaceImplCPU,\n  stridedSliceImplCPU,\n  stringNGramsImplCPU,\n  stringSplitImplCPU,\n  stringToHashBucketFastImplCPU,\n  subImplCPU,\n  rangeImplCPU,\n  rsqrtImplCPU,\n  tileImplCPU,\n  topKImplCPU,\n  transposeImplCPU,\n  uniqueImplCPU,\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport function getVecChannels(name: string, rank: number): string[] {\n  return ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, rank).map(d => `${name}.${d}`);\n}\n\nexport function getChannels(name: string, rank: number): string[] {\n  if (rank === 1) {\n    return [name];\n  }\n  return getVecChannels(name, rank);\n}\n\nexport function getSourceCoords(rank: number, dims: string[]): string {\n  if (rank === 1) {\n    return 'rc';\n  }\n\n  let coords = '';\n  for (let i = 0; i < rank; i++) {\n    coords += dims[i];\n    if (i < rank - 1) {\n      coords += ',';\n    }\n  }\n  return coords;\n}","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class PackProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  userCode: string;\n  packedInputs = false;\n  packedOutput = true;\n  enableShapeUniforms: boolean;\n  rank: number;\n\n  constructor(\n      outputShape:\n          number[]) {  // TODO(https://github.com/tensorflow/tfjs/issues/893):\n                       // Only input / output 3D tensors.\n    this.outputShape = outputShape;\n    this.rank = outputShape.length;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n\n    if (this.rank === 0) {\n      this.userCode = `\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      `;\n    } else {\n      const channels = getChannels('rc', this.rank);\n      const dtype = getCoordsDataType(this.rank);\n      const outOfBoundsCondition = this.getOutOfBoundsCondition(channels);\n      const setup = this.getSetup(channels);\n      const output = this.getOutput(channels);\n\n      this.userCode = `\n        void main() {\n          ${dtype} rc = getOutputCoords();\n\n          if(${outOfBoundsCondition}) {\n            setOutput(vec4(0));\n          } else {\n            ${setup}\n\n            setOutput(vec4(${output}));\n          }\n        }\n      `;\n    }\n  }\n\n  private getSourceCoordsArr(dims: string[]): string[] {\n    const coords = [];\n\n    for (let row = 0; row <= 1; row++) {\n      for (let col = 0; col <= 1; col++) {\n        let coord = `${row === 0 ? 'r' : 'rp1'}, ${col === 0 ? 'c' : 'cp1'}`;\n\n        for (let d = 2; d < this.rank; d++) {\n          coord = `${dims[dims.length - 1 - d]},` + coord;\n        }\n\n        coords.push(coord);\n      }\n    }\n    return coords;\n  }\n\n  private getOutOfBoundsCondition(dims: string[]): string {\n    if (this.rank === 1) {\n      return `rc > ${\n          this.enableShapeUniforms ? 'outShape' : this.outputShape[0]}`;\n    }\n\n    let cond = '';\n    for (let i = this.rank - 2; i < this.rank; i++) {\n      cond += `${dims[i]} >= ${\n          this.enableShapeUniforms ? `outShape[${i}]` : this.outputShape[i]}`;\n      if (i < this.rank - 1) {\n        cond += '||';\n      }\n    }\n\n    return cond;\n  }\n\n  private getSetup(dims: string[]): string {\n    if (this.rank === 1) {\n      return '';\n    }\n\n    const innerDims = dims.slice(-2);\n    const col = this.enableShapeUniforms ? `outShape[${this.rank} - 1]` :\n                                           this.outputShape[this.rank - 1];\n    const row = this.enableShapeUniforms ? `outShape[${this.rank} - 2]` :\n                                           this.outputShape[this.rank - 2];\n\n    return `\n      int r = ${innerDims[0]};\n      int c = ${innerDims[1]};\n      int rp1 = r + 1;\n      int cp1 = c + 1;\n\n      bool cEdge = cp1 >= ${col};\n      bool rEdge = rp1 >= ${row};\n    `;\n  }\n\n  private getOutput(dims: string[]): string {\n    const sourceCoords = this.getSourceCoordsArr(dims);\n    if (this.rank === 1) {\n      const outShape =\n          this.enableShapeUniforms ? 'outShape' : this.outputShape[0];\n      return `getA(rc), (rc + 1 >= ${outShape} ? 0. : getA(rc + 1)), 0, 0`;\n    }\n\n    return `getA(${sourceCoords[0]}),\n            cEdge ? 0. : getA(${sourceCoords[1]}),\n            rEdge ? 0. : getA(${sourceCoords[2]}),\n            rEdge || cEdge ? 0. : getA(${sourceCoords[3]})`;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\n\nexport class ReshapePackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n  enableShapeUniforms: boolean;\n  customUniforms = [{name: 'inputShape', type: 'ivec3' as const }];\n\n  constructor(outputShape: [number, number, number], inputShape: [\n    number, number, number\n  ]) {\n    this.outputShape = outputShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n\n    let mainLoop = ``;\n    for (let i = 0; i < 4; i++) {\n      let thisRC = `thisRC = rc;`;\n      if (i % 2 === 1) {\n        thisRC += `thisRC.z += 1;`;\n      }\n      if (i > 1) {\n        thisRC += `thisRC.y += 1;`;\n      }\n\n      mainLoop += `\n        ${thisRC}\n        ${i > 0 ? `if(thisRC.y < rows && thisRC.z < cols){` : ''}\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${i}] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ${i > 0 ? '}' : ''}\n      `;\n    }\n\n    this.userCode = `\n      ${getReshapedInputCoords(inputShape, this.enableShapeUniforms)}\n      ${\n        this.enableShapeUniforms ? shader_util.getFlatIndexFrom3DOutput() :\n                                   shader_util.getFlatIndexFrom3D(outputShape)}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ${this.enableShapeUniforms ? 'outShape[1]' : outputShape[1]};\n        int cols = ${this.enableShapeUniforms ? 'outShape[2]' : outputShape[2]};\n\n        ${mainLoop}\n\n        setOutput(result);\n      }\n    `;\n  }\n}\n\nfunction getReshapedInputCoords(\n    shape: [number, number, number], enableShapeUniforms: boolean): string {\n  const coordsFromIndexSnippet = enableShapeUniforms ?\n      shader_util.getLogicalCoordinatesFromFlatIndexByUniform(\n          ['r', 'c', 'd'], 'inputShape') :\n      shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd'], shape);\n\n  return `\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${coordsFromIndexSnippet}\n      return ivec3(r, c, d);\n    }\n  `;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env} from '@tensorflow/tfjs-core';\n\nimport {GPGPUContext} from './gpgpu_context';\nimport {getInternalFormatForFloat16MatrixTexture, getInternalFormatForFloat16PackedMatrixTexture, getInternalFormatForFloat32MatrixTexture, getInternalFormatForPackedMatrixTexture, getInternalFormatForUnsignedBytesMatrixTexture} from './gpgpu_util';\nimport {getPackedMatrixTextureShapeWidthHeight, getUnpackedMatrixTextureShapeWidthHeight, PhysicalTextureType, Texture, TextureConfig, TextureUsage} from './tex_util';\n\nexport class TextureManager {\n  private numUsedTextures = 0;\n  private numFreeTextures = 0;\n  private _numBytesAllocated = 0;\n  // Number of bytes that have been allocated and available for reuse.\n  private _numBytesFree = 0;\n  private freeTextures: Record<string, Texture[]> = {};\n  private usedTextures: Record<string, Texture[]> = {};\n  private logEnabled = false;\n\n  constructor(private readonly gpgpu: GPGPUContext) {}\n\n  acquireTexture(\n      shapeRC: [number, number], usage: TextureUsage,\n      isPacked: boolean): Texture {\n    const physicalTexType = getPhysicalFromLogicalTextureType(usage, isPacked);\n\n    const shapeKey = getKeyFromTextureShape(shapeRC, physicalTexType, isPacked);\n    if (!(shapeKey in this.freeTextures)) {\n      this.freeTextures[shapeKey] = [];\n    }\n    if (!(shapeKey in this.usedTextures)) {\n      this.usedTextures[shapeKey] = [];\n    }\n\n    const texBytes = computeBytes(\n        shapeRC, physicalTexType, this.gpgpu.gl, this.gpgpu.textureConfig,\n        isPacked);\n\n    if (this.freeTextures[shapeKey].length > 0) {\n      this.numFreeTextures--;\n      this.numUsedTextures++;\n      this._numBytesFree -= texBytes;\n      this.log();\n      const newTexture = this.freeTextures[shapeKey].pop();\n      this.usedTextures[shapeKey].push(newTexture);\n      return newTexture;\n    }\n\n    let newTexture: Texture;\n    if (physicalTexType === PhysicalTextureType.PACKED_2X2_FLOAT32) {\n      newTexture = this.gpgpu.createPackedMatrixTexture(shapeRC[0], shapeRC[1]);\n    } else if (physicalTexType === PhysicalTextureType.PACKED_2X2_FLOAT16) {\n      newTexture =\n          this.gpgpu.createFloat16PackedMatrixTexture(shapeRC[0], shapeRC[1]);\n    } else if (physicalTexType === PhysicalTextureType.UNPACKED_FLOAT32) {\n      newTexture =\n          this.gpgpu.createFloat32MatrixTexture(shapeRC[0], shapeRC[1]);\n    } else if (physicalTexType === PhysicalTextureType.UNPACKED_FLOAT16) {\n      newTexture =\n          this.gpgpu.createFloat16MatrixTexture(shapeRC[0], shapeRC[1]);\n    } else if (\n        physicalTexType === PhysicalTextureType.PACKED_4X1_UNSIGNED_BYTE) {\n      newTexture =\n          this.gpgpu.createUnsignedBytesMatrixTexture(shapeRC[0], shapeRC[1]);\n    }\n    this.usedTextures[shapeKey].push(newTexture);\n\n    this.numUsedTextures++;\n    this._numBytesAllocated += texBytes;\n    this.log();\n\n    return newTexture;\n  }\n\n  releaseTexture(\n      texture: Texture, shape: [number, number], logicalTexType: TextureUsage,\n      isPacked: boolean): void {\n    if (this.freeTextures == null) {\n      // Already disposed.\n      return;\n    }\n    const physicalTexType =\n        getPhysicalFromLogicalTextureType(logicalTexType, isPacked);\n    const shapeKey = getKeyFromTextureShape(shape, physicalTexType, isPacked);\n    if (!(shapeKey in this.freeTextures)) {\n      this.freeTextures[shapeKey] = [];\n    }\n\n    const texBytes = computeBytes(\n        shape, physicalTexType, this.gpgpu.gl, this.gpgpu.textureConfig,\n        isPacked);\n    const deleteTexThreshold = env().get('WEBGL_DELETE_TEXTURE_THRESHOLD');\n    if (deleteTexThreshold !== -1 &&\n        this._numBytesAllocated > deleteTexThreshold) {\n      this.gpgpu.deleteMatrixTexture(texture.texture);\n      this._numBytesAllocated -= texBytes;\n    } else {\n      this.freeTextures[shapeKey].push(texture);\n      this.numFreeTextures++;\n      this._numBytesFree += texBytes;\n    }\n\n    this.numUsedTextures--;\n\n    const texList = this.usedTextures[shapeKey];\n    const texIndex = texList && texList.indexOf(texture);\n    if (texIndex == null || texIndex < 0) {\n      throw new Error(\n          'Cannot release a texture that was never provided by this ' +\n          'texture manager');\n    }\n    texList[texIndex] = texList[texList.length - 1];\n    texList.pop();\n    this.log();\n  }\n\n  private log() {\n    if (!this.logEnabled) {\n      return;\n    }\n    const total = this.numFreeTextures + this.numUsedTextures;\n    console.log(\n        'Free/Used', `${this.numFreeTextures} / ${this.numUsedTextures}`,\n        `(${total})`);\n    const freeRatio = this._numBytesFree / this._numBytesAllocated;\n    console.log(`Bytes allocated: ${this._numBytesAllocated}`);\n    console.log(`Bytes unused: ${this._numBytesFree} (${\n        Math.round(100 * freeRatio)}%)`);\n  }\n\n  get numBytesAllocated(): number {\n    return this._numBytesAllocated;\n  }\n\n  get numBytesFree(): number {\n    return this._numBytesFree;\n  }\n\n  getNumUsedTextures(): number {\n    return this.numUsedTextures;\n  }\n\n  getNumFreeTextures(): number {\n    return this.numFreeTextures;\n  }\n\n  dispose() {\n    if (this.freeTextures == null) {\n      // Already disposed.\n      return;\n    }\n    for (const texShape in this.freeTextures) {\n      this.freeTextures[texShape].forEach(tex => {\n        this.gpgpu.deleteMatrixTexture(tex.texture);\n      });\n    }\n    for (const texShape in this.usedTextures) {\n      this.usedTextures[texShape].forEach(tex => {\n        this.gpgpu.deleteMatrixTexture(tex.texture);\n      });\n    }\n    // TODO: Assign non-null value (empty object) to textures after disposed.\n    this.freeTextures = null;\n    this.usedTextures = null;\n    this.numUsedTextures = 0;\n    this.numFreeTextures = 0;\n    this._numBytesAllocated = 0;\n    this._numBytesFree = 0;\n  }\n}\n\nfunction numBytesForInternalFormat(\n    gl: WebGLRenderingContext, internalFormat: number): number {\n  // tslint:disable-next-line:no-any\n  const glany = gl as any;\n  if (internalFormat === glany.R32F) {\n    return 4;\n  } else if (internalFormat === glany.R16F) {\n    return 2;\n  } else if (internalFormat === glany.RGBA32F) {\n    return 16;\n  } else if (internalFormat === gl.RGBA) {\n    return 16;\n  } else if (internalFormat === glany.RGBA16F) {\n    return 8;\n  } else if (internalFormat === glany.RGBA8) {\n    return 4;\n  }\n  throw new Error(`Unknown internal format ${internalFormat}`);\n}\n\nexport function computeBytes(\n    shape: [number, number], physicalTexType: PhysicalTextureType,\n    gl: WebGLRenderingContext, textureConfig: TextureConfig,\n    isPacked: boolean): number {\n  // It is not possible to infer packed status from the texture type because\n  // depending on the textureConfig, different  texture types may resolve to the\n  // same internal format (e.g. in WebGL1, the internal format for\n  // UNPACKED_FLOAT16 textures is gl.RGBA). Therefore we pass in `isPacked`\n  // explicitly.\n  const internalFormat =\n      internalFormatForPhysicalTexType(physicalTexType, textureConfig);\n\n  let numElements: number;\n  if (isPacked) {\n    const [packedWidth, packedHeight] =\n        getPackedMatrixTextureShapeWidthHeight(shape[0], shape[1]);\n    numElements = packedWidth * packedHeight;\n\n  } else {\n    const [width, height] =\n        getUnpackedMatrixTextureShapeWidthHeight(shape[0], shape[1]);\n    numElements = width * height;\n  }\n\n  const bytesPerElement = numBytesForInternalFormat(gl, internalFormat);\n  return numElements * bytesPerElement;\n}\n\nfunction internalFormatForPhysicalTexType(\n    physicalTexType: PhysicalTextureType,\n    textureConfig: TextureConfig): number {\n  switch (physicalTexType) {\n    case PhysicalTextureType.PACKED_2X2_FLOAT32:\n      return getInternalFormatForPackedMatrixTexture(textureConfig);\n    case PhysicalTextureType.PACKED_2X2_FLOAT16:\n      return getInternalFormatForFloat16PackedMatrixTexture(textureConfig);\n    case PhysicalTextureType.UNPACKED_FLOAT32:\n      return getInternalFormatForFloat32MatrixTexture(textureConfig);\n    case PhysicalTextureType.UNPACKED_FLOAT16:\n      return getInternalFormatForFloat16MatrixTexture(textureConfig);\n    case PhysicalTextureType.PACKED_4X1_UNSIGNED_BYTE:\n      return getInternalFormatForUnsignedBytesMatrixTexture(textureConfig);\n    default:\n      throw new Error(`Unknown physical texture type ${physicalTexType}`);\n  }\n}\n\nfunction getPhysicalTextureForRendering(isPacked: boolean):\n    PhysicalTextureType {\n  if (env().getBool('WEBGL_RENDER_FLOAT32_ENABLED')) {\n    if (isPacked) {\n      return PhysicalTextureType.PACKED_2X2_FLOAT32;\n    }\n    return PhysicalTextureType.UNPACKED_FLOAT32;\n  }\n\n  if (isPacked) {\n    return PhysicalTextureType.PACKED_2X2_FLOAT16;\n  }\n  return PhysicalTextureType.UNPACKED_FLOAT16;\n}\n\nfunction getPhysicalFromLogicalTextureType(\n    logicalTexType: TextureUsage, isPacked: boolean): PhysicalTextureType {\n  if (logicalTexType === TextureUsage.UPLOAD) {\n    return PhysicalTextureType.PACKED_2X2_FLOAT32;\n  } else if (logicalTexType === TextureUsage.RENDER || logicalTexType == null) {\n    return getPhysicalTextureForRendering(isPacked);\n  } else if (\n      logicalTexType === TextureUsage.DOWNLOAD ||\n      logicalTexType === TextureUsage.PIXELS) {\n    return PhysicalTextureType.PACKED_4X1_UNSIGNED_BYTE;\n  }\n  throw new Error(`Unknown logical texture type ${logicalTexType}`);\n}\n\nfunction getKeyFromTextureShape(\n    shapeRowsCol: [number, number], physicalTexType: PhysicalTextureType,\n    isPacked: boolean): string {\n  return `${shapeRowsCol[0]}_${shapeRowsCol[1]}_${physicalTexType}_${isPacked}`;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\n\nexport class UnaryOpProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n  enableShapeUniforms: boolean;\n\n  constructor(aShape: number[], opSnippet: string) {\n    this.outputShape = aShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n    this.userCode = `\n      float unaryOperation(float x) {\n        ${opSnippet}\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `;\n  }\n}\n\nexport const CHECK_NAN_SNIPPET = `if (isnan(x)) return x;`;\n\nexport const LINEAR = `return x;`;\n\nexport const ABS = `return abs(x);`;\n\nexport function STEP(alpha = 0.0) {\n  return CHECK_NAN_SNIPPET + `\n    return x > 0.0 ? 1.0 : float(${alpha});\n  `;\n}\n\nexport const ELU = `return (x >= 0.0) ? x : (exp(x) - 1.0);`;\nexport const RELU = CHECK_NAN_SNIPPET + `\n  return (x < 0.0) ? 0.0 : x;\n`;\n\nexport const RELU6 = CHECK_NAN_SNIPPET + `\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n`;\n\nexport const CLONE = 'return x;';\n\nexport const SIGMOID = `return 1.0 / (1.0 + exp(-1.0 * x));`;\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\n\nexport const LINEAR = `return x;`;\n\nexport const ELU = `\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n`;\n\nexport const RELU = `\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n`;\n\nexport const RELU6 = `\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n`;\n\nexport const SIGMOID = `return 1.0 / (1.0 + exp(-1.0 * x));`;\n\nexport class UnaryOpPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  enableShapeUniforms: boolean;\n  outputShape: number[];\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(aShape: number[], opSnippet: string) {\n    this.outputShape = aShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n    this.userCode = `\n      vec4 unaryOperation(vec4 x) {\n        ${opSnippet}\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\nimport {getChannels, getSourceCoords} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class UnpackProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  packedInputs = true;\n  packedOutput = false;\n  outputShape: number[];\n  userCode: string;\n  enableShapeUniforms: boolean;\n\n  constructor(outputShape: number[]) {\n    this.outputShape = outputShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n    const rank = outputShape.length;\n\n    const channels = getChannels('rc', rank);\n    const dtype = getCoordsDataType(rank);\n    const sourceCoords = getSourceCoords(rank, channels);\n    const innerDims = channels.slice(-2);\n    const coords = rank <= 1 ? 'rc' : `vec2(${innerDims.join(',')})`;\n\n    this.userCode = `\n      void main() {\n        ${dtype} rc = getOutputCoords();\n        vec4 packedInput = getA(${sourceCoords});\n\n        setOutput(getChannel(packedInput, ${coords}));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// Import webgl flags.\nimport './flags_webgl';\n\nimport * as tf from '@tensorflow/tfjs-core';\nimport {backend_util, BackendValues, buffer, DataId, DataStorage, DataToGPUWebGLOption, DataType, engine, env, GPUData, kernel_impls, KernelBackend, MemoryInfo, nextFrame, NumericDataType, Rank, RecursiveArray, scalar, ShapeMap, Tensor, Tensor2D, TensorBuffer, TensorInfo, tidy, TimingInfo, TypedArray, util, WebGLData} from '@tensorflow/tfjs-core';\nimport {getWebGLContext} from './canvas_util';\nimport {DecodeMatrixProgram} from './decode_matrix_gpu';\nimport {DecodeMatrixPackedProgram} from './decode_matrix_packed_gpu';\nimport {EncodeFloatProgram} from './encode_float_gpu';\nimport {EncodeFloatPackedProgram} from './encode_float_packed_gpu';\nimport {EncodeMatrixProgram} from './encode_matrix_gpu';\nimport {EncodeMatrixPackedProgram} from './encode_matrix_packed_gpu';\nimport {GPGPUContext} from './gpgpu_context';\nimport * as gpgpu_math from './gpgpu_math';\nimport {getUniformLocations, GPGPUBinary, GPGPUProgram, TensorData} from './gpgpu_math';\nimport {simpleAbsImplCPU} from './kernel_utils/shared';\nimport {PackProgram} from './pack_gpu';\nimport {ReshapePackedProgram} from './reshape_packed_gpu';\nimport * as tex_util from './tex_util';\nimport {Texture, TextureData, TextureUsage} from './tex_util';\nimport {TextureManager} from './texture_manager';\nimport * as unary_op from './unaryop_gpu';\nimport {UnaryOpProgram} from './unaryop_gpu';\nimport {UnaryOpPackedProgram} from './unaryop_packed_gpu';\nimport {UnpackProgram} from './unpack_gpu';\nimport * as webgl_util from './webgl_util';\n\nconst whereImpl = kernel_impls.whereImpl;\n\nexport const EPSILON_FLOAT32 = 1e-7;\nexport const EPSILON_FLOAT16 = 1e-4;\n\ntype KernelInfo = {\n  name: string; query: Promise<number>;\n};\n\nexport type TimerNode = RecursiveArray<KernelInfo>|KernelInfo;\nexport interface CPUTimerQuery {\n  startMs: number;\n  endMs?: number;\n}\n\nexport interface WebGLMemoryInfo extends MemoryInfo {\n  numBytesInGPU: number;\n  // Tracks the total number of bytes allocated on the GPU, accounting for the\n  // physical texture type.\n  numBytesInGPUAllocated: number;\n  // Tracks byte size of textures that were created and then made available for\n  // reuse (disposed).\n  numBytesInGPUFree: number;\n  unreliable: boolean;\n}\n\nexport interface WebGLTimingInfo extends TimingInfo {\n  uploadWaitMs: number;\n  downloadWaitMs: number;\n}\n\nconst binaryCaches: {[webGLVersion: string]: {[key: string]: GPGPUBinary}} = {};\n\nexport function getBinaryCache(webGLVersion: number) {\n  if (webGLVersion in binaryCaches) {\n    return binaryCaches[webGLVersion];\n  }\n  binaryCaches[webGLVersion] = {};\n  return binaryCaches[webGLVersion];\n}\n\n// Empirically determined constant used to determine size threshold for handing\n// off execution to the CPU.\nconst CPU_HANDOFF_SIZE_THRESHOLD =\n    env().getNumber('CPU_HANDOFF_SIZE_THRESHOLD');\n\n// Empirically determined constant used to decide the number of MB on GPU\n// before we warn about high memory use. The MB are this constant * screen area\n// * dpi / 1024 / 1024.\nconst BEFORE_PAGING_CONSTANT = 600;\nfunction numMBBeforeWarning(): number {\n  if (env().global.screen == null) {\n    return 1024;  // 1 GB.\n  }\n  return (env().global.screen.height * env().global.screen.width *\n          window.devicePixelRatio) *\n      BEFORE_PAGING_CONSTANT / 1024 / 1024;\n}\n\nexport class MathBackendWebGL extends KernelBackend {\n  texData: DataStorage<TextureData>;\n  gpgpu: GPGPUContext;\n\n  private static nextDataId = 0;\n  private nextDataId(): number {\n    return MathBackendWebGL.nextDataId++;\n  }\n  // Maps data ids that have a pending read operation, to list of subscribers.\n  private pendingRead = new WeakMap<DataId, Array<(arr: TypedArray) => void>>();\n  // List of data ids that are scheduled for disposal, but are waiting on a\n  // pending read operation.\n  private pendingDisposal = new WeakSet<DataId>();\n\n  // Used to count the number of 'shallow' sliced tensors that point to the\n  // same data id.\n  dataRefCount = new WeakMap<DataId, number>();\n  private numBytesInGPU = 0;\n\n  private canvas: HTMLCanvasElement|OffscreenCanvas;\n\n  private programTimersStack: TimerNode[];\n  private activeTimers: TimerNode[];\n  // Accumulated time spent (including blocking) in uploading data to webgl.\n  private uploadWaitMs = 0;\n  // Accumulated time spent (including blocking in downloading data from webgl.\n  private downloadWaitMs = 0;\n\n  // record the last manual GL Flush time.\n  private lastGlFlushTime = 0;\n\n  // Number of bits of precision of this backend.\n  private floatPrecisionValue: 32|16;\n\n  private textureManager: TextureManager;\n  private binaryCache: {[key: string]: GPGPUBinary};\n  private gpgpuCreatedLocally: boolean;\n  private numMBBeforeWarning: number;\n  private warnedAboutMemory = false;\n\n  constructor(gpuResource?: GPGPUContext|HTMLCanvasElement|OffscreenCanvas) {\n    super();\n    if (!env().getBool('HAS_WEBGL')) {\n      throw new Error('WebGL is not supported on this device');\n    }\n\n    let newGPGPU;\n    if (gpuResource != null) {\n      if (gpuResource instanceof GPGPUContext) {\n        newGPGPU = gpuResource;\n      } else {\n        const gl =\n            getWebGLContext(env().getNumber('WEBGL_VERSION'), gpuResource);\n        newGPGPU = new GPGPUContext(gl);\n      }\n      this.binaryCache = {};\n      this.gpgpuCreatedLocally = false;\n    } else {\n      const gl = getWebGLContext(env().getNumber('WEBGL_VERSION'));\n      newGPGPU = new GPGPUContext(gl);\n      this.binaryCache = getBinaryCache(env().getNumber('WEBGL_VERSION'));\n      this.gpgpuCreatedLocally = true;\n    }\n\n    this.gpgpu = newGPGPU;\n    this.canvas = this.gpgpu.gl.canvas;\n    this.textureManager = new TextureManager(this.gpgpu);\n    this.numMBBeforeWarning = numMBBeforeWarning();\n    this.texData = new DataStorage(this, engine());\n  }\n\n  override numDataIds() {\n    return this.texData.numDataIds() - this.pendingDeletes;\n  }\n\n  // Writes a new entry to the data store with a WebGL texture, and registers it\n  // to the texture manager.\n  writeTexture(\n      texture: WebGLTexture, shape: number[], dtype: DataType,\n      texHeight: number, texWidth: number, channels: string): DataId {\n    // Temporarily create an tensor info to make the texture compatible with\n    // the runWebGLProgram's input.\n    const input = this.makeTensorInfo(shape, dtype);\n    const inData = this.texData.get(input.dataId);\n    // Even though the input texture could be unpacked or dense packed, it is\n    // always considered as unpacked for EncodeMatrixProgram.\n    inData.isPacked = false;\n\n    // Bind texture to the input tensor.\n    inData.texture = {texture, texShape: [texHeight, texWidth]};\n    inData.texShape = [texHeight, texWidth];\n\n    const shapeAs3D = webgl_util.getShapeAs3D(shape);\n    const program =\n        new EncodeMatrixProgram(shapeAs3D, false /* isByteArray */, channels);\n    const output =\n        this.runWebGLProgram(program, [input], dtype, [[texHeight, texWidth]]);\n    output.shape = shape;\n\n    // Unbind the texture from the input tensor to avoid the texture being\n    // released.\n    inData.texture = null;\n    this.disposeIntermediateTensorInfo(input);\n\n    return output.dataId;\n  }\n\n  override write(values: BackendValues, shape: number[], dtype: DataType):\n      DataId {\n    if (env().getBool('WEBGL_CHECK_NUMERICAL_PROBLEMS') ||\n        env().getBool('DEBUG')) {\n      this.checkNumericalProblems(values);\n    }\n    if (dtype === 'complex64' && values != null) {\n      throw new Error(\n          `Cannot write to a complex64 dtype. ` +\n          `Please use tf.complex(real, imag).`);\n    }\n    const dataId = {id: this.nextDataId()};\n    this.texData.set(\n        dataId,\n        {shape, dtype, values, usage: TextureUsage.UPLOAD, refCount: 1});\n    return dataId;\n  }\n\n  /** Return refCount of a `TensorData`. */\n  override refCount(dataId: DataId): number {\n    if (this.texData.has(dataId)) {\n      const tensorData = this.texData.get(dataId);\n      return tensorData.refCount;\n    }\n    return 0;\n  }\n\n  /** Increase refCount of a `TextureData`. */\n  override incRef(dataId: DataId): void {\n    const texData = this.texData.get(dataId);\n    texData.refCount++;\n  }\n\n  /** Decrease refCount of a `TextureData`. */\n  decRef(dataId: DataId): void {\n    if (this.texData.has(dataId)) {\n      const texData = this.texData.get(dataId);\n      texData.refCount--;\n    }\n  }\n\n  override move(\n      dataId: DataId, values: BackendValues, shape: number[], dtype: DataType,\n      refCount: number): void {\n    if (env().getBool('DEBUG')) {\n      this.checkNumericalProblems(values);\n    }\n    if (dtype === 'complex64') {\n      throw new Error(\n          `Cannot write to a complex64 dtype. ` +\n          `Please use tf.complex(real, imag).`);\n    }\n    this.texData.set(\n        dataId, {shape, dtype, values, usage: TextureUsage.UPLOAD, refCount});\n  }\n\n  disposeIntermediateTensorInfo(tensorInfo: TensorInfo): void {\n    this.disposeData(tensorInfo.dataId);\n  }\n\n  override readSync(dataId: DataId): BackendValues {\n    const texData = this.texData.get(dataId);\n    const {values, dtype, complexTensorInfos, slice, shape, isPacked} = texData;\n\n    // The presence of `slice` indicates this tensor is a shallow slice of a\n    // different tensor, and is using that original tensor's texture. Run\n    // `clone` in order to copy that texture and read from it.\n    if (slice != null) {\n      let program;\n      if (isPacked) {\n        program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n      } else {\n        program = new UnaryOpProgram(shape, unary_op.CLONE);\n      }\n      const res =\n          this.runWebGLProgram(program, [{dataId, shape, dtype}], dtype);\n      const data = this.readSync(res.dataId);\n      this.disposeIntermediateTensorInfo(res);\n      return data;\n    }\n    if (values != null) {\n      return this.convertAndCacheOnCPU(dataId);\n    }\n    if (dtype === 'string') {\n      return values;\n    }\n    const shouldTimeProgram = this.activeTimers != null;\n    let start: number;\n    if (shouldTimeProgram) {\n      start = util.now();\n    }\n\n    let result: Float32Array;\n    if (dtype === 'complex64') {\n      const realValues =\n          this.readSync(complexTensorInfos.real.dataId) as Float32Array;\n      const imagValues =\n          this.readSync(complexTensorInfos.imag.dataId) as Float32Array;\n      result = backend_util.mergeRealAndImagArrays(realValues, imagValues);\n    } else {\n      result = this.getValuesFromTexture(dataId);\n    }\n\n    if (shouldTimeProgram) {\n      this.downloadWaitMs += util.now() - start;\n    }\n    return this.convertAndCacheOnCPU(dataId, result);\n  }\n\n  override async read(dataId: DataId): Promise<BackendValues> {\n    if (this.pendingRead.has(dataId)) {\n      const subscribers = this.pendingRead.get(dataId);\n      return new Promise<TypedArray>(resolve => subscribers.push(resolve));\n    }\n    const texData = this.texData.get(dataId);\n    const {values, shape, slice, dtype, complexTensorInfos, isPacked} = texData;\n\n    // The presence of `slice` indicates this tensor is a shallow slice of a\n    // different tensor, and is using that original tensor's texture. Run\n    // `clone` in order to copy that texture and read from it.\n    if (slice != null) {\n      let program;\n      if (isPacked) {\n        program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n      } else {\n        program = new UnaryOpProgram(shape, unary_op.CLONE);\n      }\n      const res =\n          this.runWebGLProgram(program, [{dataId, shape, dtype}], dtype);\n      const data = this.read(res.dataId);\n      this.disposeIntermediateTensorInfo(res);\n      return data;\n    }\n\n    if (values != null) {\n      return this.convertAndCacheOnCPU(dataId);\n    }\n\n    if (env().getBool('DEBUG')) {\n      // getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED') caused a blocking GPU call.\n      // For performance reason, only check it for debugging. In production,\n      // it doesn't handle this use case anyway, so behavior is not changed.\n      if (!env().getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED') &&\n          env().getNumber('WEBGL_VERSION') === 2) {\n        throw new Error(\n            `tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and ` +\n            `WEBGL_VERSION=2 not yet supported.`);\n      }\n    }\n\n    let buffer: WebGLBuffer = null;\n    let tmpDownloadTarget: TensorInfo;\n\n    if (dtype !== 'complex64' && env().get('WEBGL_BUFFER_SUPPORTED')) {\n      // Possibly copy the texture into a buffer before inserting a fence.\n      tmpDownloadTarget = this.decode(dataId);\n      const tmpData = this.texData.get(tmpDownloadTarget.dataId);\n\n      buffer = this.gpgpu.createBufferFromTexture(\n          tmpData.texture.texture, ...tex_util.getDenseTexShape(shape));\n    }\n\n    this.pendingRead.set(dataId, []);\n\n    if (dtype !== 'complex64') {\n      // Create a fence and wait for it to resolve.\n      await this.gpgpu.createAndWaitForFence();\n    }\n\n    // Download the values from the GPU.\n    let vals: Float32Array;\n    if (dtype === 'complex64') {\n      const ps = await Promise.all([\n        this.read(complexTensorInfos.real.dataId),\n        this.read(complexTensorInfos.imag.dataId)\n      ]);\n\n      const realValues = ps[0];\n      const imagValues = ps[1];\n      vals = backend_util.mergeRealAndImagArrays(\n          realValues as Float32Array, imagValues as Float32Array);\n    } else if (buffer == null) {\n      vals = this.getValuesFromTexture(dataId);\n    } else {\n      const size = util.sizeFromShape(shape);\n      vals = this.gpgpu.downloadFloat32MatrixFromBuffer(buffer, size);\n    }\n    if (tmpDownloadTarget != null) {\n      this.disposeIntermediateTensorInfo(tmpDownloadTarget);\n    }\n    if (buffer != null) {\n      const gl = this.gpgpu.gl;\n      webgl_util.callAndCheck(gl, () => gl.deleteBuffer(buffer));\n    }\n    const dTypeVals = this.convertAndCacheOnCPU(dataId, vals);\n\n    const subscribers = this.pendingRead.get(dataId);\n    this.pendingRead.delete(dataId);\n\n    // Notify all pending reads.\n    subscribers.forEach(resolve => resolve(dTypeVals));\n    if (this.pendingDisposal.has(dataId)) {\n      this.pendingDisposal.delete(dataId);\n      if (this.disposeData(dataId)) {\n        engine().removeDataId(dataId, this);\n      }\n      this.pendingDeletes--;\n    }\n    return dTypeVals;\n  }\n\n  /**\n   * Read tensor to a new texture that is densely packed for ease of use.\n   * @param dataId The source tensor.\n   * @param options\n   *     customTexShape: Optional. If set, will use the user defined texture\n   *     shape to create the texture.\n   */\n  override readToGPU(dataId: DataId, options: DataToGPUWebGLOption = {}):\n      GPUData {\n    const texData = this.texData.get(dataId);\n    const {values, shape, slice, dtype, isPacked, texture} = texData;\n\n    if (dtype === 'complex64') {\n      throw new Error('Does not support reading texture for complex64 dtype.');\n    }\n\n    // The presence of `slice` indicates this tensor is a shallow slice of a\n    // different tensor, and is using that original tensor's texture. Run\n    // `clone` in order to copy that texture and read from it.\n    if (slice != null) {\n      let program;\n      if (isPacked) {\n        program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n      } else {\n        program = new UnaryOpProgram(shape, unary_op.CLONE);\n      }\n      const res =\n          this.runWebGLProgram(program, [{dataId, shape, dtype}], dtype);\n      const gpuResouorce = this.readToGPU(res, options);\n      this.disposeIntermediateTensorInfo(res);\n      return gpuResouorce;\n    }\n\n    if (texture == null) {\n      if (values != null) {\n        throw new Error('Data is not on GPU but on CPU.');\n      } else {\n        throw new Error('There is no data on GPU or CPU.');\n      }\n    }\n\n    // Decode the texture so that it is stored densely (using four channels).\n    const tmpTarget = this.decode(dataId, options.customTexShape);\n\n    // Make engine track this tensor, so that we can dispose it later.\n    const tensorRef = engine().makeTensorFromTensorInfo(tmpTarget);\n\n    const tmpData = this.texData.get(tmpTarget.dataId);\n    return {tensorRef, ...tmpData.texture};\n  }\n\n  bufferSync<R extends Rank, D extends DataType>(t: TensorInfo):\n      TensorBuffer<R, D> {\n    const data = this.readSync(t.dataId);\n    if (t.dtype === 'string') {\n      try {\n        // Decode the bytes into string.\n        const strings = (data as Uint8Array[]).map(d => util.decodeString(d));\n        return buffer(t.shape as ShapeMap[R], t.dtype, strings) as\n            TensorBuffer<R, D>;\n      } catch {\n        throw new Error('Failed to decode encoded string bytes into utf-8');\n      }\n    }\n    return buffer(t.shape as ShapeMap[R], t.dtype, data as TypedArray) as\n        TensorBuffer<R, D>;\n  }\n\n  private checkNumericalProblems(values: BackendValues): void {\n    if (values == null) {\n      return;\n    }\n    for (let i = 0; i < values.length; i++) {\n      const num = values[i] as number;\n      if (!webgl_util.canBeRepresented(num)) {\n        if (env().getBool('WEBGL_RENDER_FLOAT32_CAPABLE')) {\n          throw Error(\n              `The value ${num} cannot be represented with your ` +\n              `current settings. Consider enabling float32 rendering: ` +\n              `'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);\n        }\n        throw Error(`The value ${num} cannot be represented on this device.`);\n      }\n    }\n  }\n\n  private getValuesFromTexture(dataId: DataId): Float32Array {\n    const {shape, dtype, isPacked} = this.texData.get(dataId);\n    const size = util.sizeFromShape(shape);\n    if (env().getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED')) {\n      const tmpTarget = this.decode(dataId);\n      const tmpData = this.texData.get(tmpTarget.dataId);\n      const vals =\n          this.gpgpu\n              .downloadMatrixFromPackedTexture(\n                  tmpData.texture.texture, ...tex_util.getDenseTexShape(shape))\n              .subarray(0, size);\n\n      this.disposeIntermediateTensorInfo(tmpTarget);\n\n      return vals;\n    }\n\n    const shouldUsePackedProgram =\n        env().getBool('WEBGL_PACK') && isPacked === true;\n    const outputShape =\n        shouldUsePackedProgram ? webgl_util.getShapeAs3D(shape) : shape;\n    const program = shouldUsePackedProgram ?\n        new EncodeFloatPackedProgram(outputShape as [number, number, number]) :\n        new EncodeFloatProgram(outputShape);\n    const output = this.runWebGLProgram(\n        program, [{shape: outputShape, dtype, dataId}], 'float32');\n    const tmpData = this.texData.get(output.dataId);\n    const vals = this.gpgpu\n                     .downloadByteEncodedFloatMatrixFromOutputTexture(\n                         tmpData.texture.texture, tmpData.texShape[0],\n                         tmpData.texShape[1])\n                     .subarray(0, size);\n    this.disposeIntermediateTensorInfo(output);\n\n    return vals;\n  }\n\n  override timerAvailable(): boolean {\n    return env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0;\n  }\n\n  override time(f: () => void): Promise<WebGLTimingInfo> {\n    const oldActiveTimers = this.activeTimers;\n    const newActiveTimers: TimerNode[] = [];\n\n    let outerMostTime = false;\n    if (this.programTimersStack == null) {\n      this.programTimersStack = newActiveTimers;\n      outerMostTime = true;\n    } else {\n      this.activeTimers.push(newActiveTimers);\n    }\n    this.activeTimers = newActiveTimers;\n\n    f();\n\n    // needing to split these up because util.flatten only accepts certain types\n    const flattenedActiveTimerQueries =\n        util.flatten(this.activeTimers.map((d: KernelInfo) => d.query))\n            .filter(d => d != null);\n    const flattenedActiveTimerNames =\n        util.flatten(this.activeTimers.map((d: KernelInfo) => d.name))\n            .filter(d => d != null);\n\n    this.activeTimers = oldActiveTimers;\n\n    if (outerMostTime) {\n      this.programTimersStack = null;\n    }\n\n    const res: WebGLTimingInfo = {\n      uploadWaitMs: this.uploadWaitMs,\n      downloadWaitMs: this.downloadWaitMs,\n      kernelMs: null,\n      wallMs: null  // will be filled by the engine\n    };\n\n    return (async () => {\n      if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') >\n          0) {\n        const kernelMs = await Promise.all(flattenedActiveTimerQueries);\n\n        res['kernelMs'] = util.sum(kernelMs);\n        res['getExtraProfileInfo'] = () =>\n            kernelMs\n                .map((d, i) => ({name: flattenedActiveTimerNames[i], ms: d}))\n                .map(d => `${d.name}: ${d.ms}`)\n                .join(', ');\n      } else {\n        res['kernelMs'] = {\n          error: 'WebGL query timers are not supported in this environment.'\n        };\n      }\n\n      this.uploadWaitMs = 0;\n      this.downloadWaitMs = 0;\n      return res;\n    })();\n  }\n  override memory(): WebGLMemoryInfo {\n    return {\n      unreliable: false,\n      numBytesInGPU: this.numBytesInGPU,\n      numBytesInGPUAllocated: this.textureManager.numBytesAllocated,\n      numBytesInGPUFree: this.textureManager.numBytesFree\n    } as WebGLMemoryInfo;\n  }\n\n  private startTimer(): WebGLQuery|CPUTimerQuery {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n      return this.gpgpu.beginQuery();\n    }\n    return {startMs: util.now(), endMs: null};\n  }\n\n  private endTimer(query: WebGLQuery|CPUTimerQuery): WebGLQuery|CPUTimerQuery {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n      this.gpgpu.endQuery();\n      return query;\n    }\n    (query as CPUTimerQuery).endMs = util.now();\n    return query;\n  }\n\n  private async getQueryTime(query: WebGLQuery|CPUTimerQuery): Promise<number> {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n      return this.gpgpu.waitForQueryAndGetTime(query as WebGLQuery);\n    }\n    const timerQuery = query as CPUTimerQuery;\n    return timerQuery.endMs - timerQuery.startMs;\n  }\n\n  private pendingDeletes = 0;\n\n  /**\n   * Decrease the RefCount on the dataId and dispose the memory if the dataId\n   * has 0 refCount. If there are pending read on the data, the disposal would\n   * added to the pending delete queue. Return true if the dataId is removed\n   * from backend or the backend does not contain the dataId, false if the\n   * dataId is not removed. Memory may or may not be released even when dataId\n   * is removed, which also depends on dataRefCount, see `releaseGPU`.\n   * @param dataId\n   * @oaram force Optional, remove the data regardless of refCount\n   */\n  override disposeData(dataId: DataId, force = false): boolean {\n    if (this.pendingDisposal.has(dataId)) {\n      return false;\n    }\n\n    // No-op if already disposed.\n    if (!this.texData.has(dataId)) {\n      return true;\n    }\n\n    // if force flag is set, change refCount to 0, this would ensure disposal\n    // when added to the pendingDisposal queue. Memory may or may not be\n    // released, which also depends on dataRefCount, see `releaseGPU`.\n    if (force) {\n      this.texData.get(dataId).refCount = 0;\n    } else {\n      this.texData.get(dataId).refCount--;\n    }\n\n    if (!force && this.texData.get(dataId).refCount > 0) {\n      return false;\n    }\n\n    if (this.pendingRead.has(dataId)) {\n      this.pendingDisposal.add(dataId);\n      this.pendingDeletes++;\n      return false;\n    }\n\n    this.releaseGPUData(dataId);\n    const {complexTensorInfos} = this.texData.get(dataId);\n    if (complexTensorInfos != null) {\n      this.disposeData(complexTensorInfos.real.dataId, force);\n      this.disposeData(complexTensorInfos.imag.dataId, force);\n    }\n\n    this.texData.delete(dataId);\n\n    return true;\n  }\n\n  private releaseGPUData(dataId: DataId): void {\n    const {texture, dtype, texShape, usage, isPacked, slice} =\n        this.texData.get(dataId);\n    const key = slice && slice.origDataId || dataId;\n    const refCount = this.dataRefCount.get(key);\n\n    if (refCount > 1) {\n      this.dataRefCount.set(key, refCount - 1);\n    } else {\n      this.dataRefCount.delete(key);\n      if (texture != null) {\n        this.numBytesInGPU -= this.computeBytes(texShape, dtype);\n        this.textureManager.releaseTexture(texture, texShape, usage, isPacked);\n      }\n    }\n\n    const texData = this.texData.get(dataId);\n    texData.texture = null;\n    texData.texShape = null;\n    texData.isPacked = false;\n    texData.slice = null;\n  }\n\n  getTexture(dataId: DataId): WebGLTexture {\n    this.uploadToGPU(dataId);\n    return this.texData.get(dataId).texture.texture;\n  }\n\n  /**\n   * Returns internal information for the specific data bucket. Used in unit\n   * tests.\n   */\n  getDataInfo(dataId: DataId): TextureData {\n    return this.texData.get(dataId);\n  }\n\n  /*\n  Tests whether all the inputs to an op are small and on the CPU. This heuristic\n  determines when it would be faster to execute a kernel on the CPU. WebGL\n  kernels opt into running this check and forwarding when appropriate.\n  TODO(https://github.com/tensorflow/tfjs/issues/872): Develop a more\n  sustainable strategy for optimizing backend execution of ops.\n   */\n  shouldExecuteOnCPU(\n      inputs: TensorInfo[],\n      sizeThreshold = CPU_HANDOFF_SIZE_THRESHOLD): boolean {\n    return env().getBool('WEBGL_CPU_FORWARD') &&\n        inputs.every(\n            input => this.texData.get(input.dataId).texture == null &&\n                util.sizeFromShape(input.shape) < sizeThreshold);\n  }\n\n  getGPGPUContext(): GPGPUContext {\n    return this.gpgpu;\n  }\n\n  where(condition: Tensor): Tensor2D {\n    backend_util.warn(\n        'tf.where() in webgl locks the UI thread. ' +\n        'Call tf.whereAsync() instead');\n    const condVals = condition.dataSync();\n    return whereImpl(condition.shape, condVals);\n  }\n\n  private packedUnaryOp(x: TensorInfo, op: string, dtype: DataType) {\n    const program = new UnaryOpPackedProgram(x.shape, op);\n    const outInfo = this.compileAndRun(program, [x], dtype);\n    return engine().makeTensorFromTensorInfo(outInfo);\n  }\n\n  // TODO(msoulanille) remove this once the backend has been modularized\n  // a copy is needed here to break a circular dependency.\n  // Also remove the op from unary_op.\n  abs<T extends Tensor>(x: T): T {\n    // TODO: handle cases when x is complex.\n    if (this.shouldExecuteOnCPU([x]) && x.dtype !== 'complex64') {\n      const outValues =\n          simpleAbsImplCPU(this.texData.get(x.dataId).values as TypedArray);\n      return this.makeOutput(x.shape, x.dtype, outValues);\n    }\n\n    if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n      return this.packedUnaryOp(x, unary_op.ABS, x.dtype) as T;\n    }\n\n    const program = new UnaryOpProgram(x.shape, unary_op.ABS);\n    const outInfo = this.compileAndRun(program, [x]);\n    return engine().makeTensorFromTensorInfo(outInfo) as T;\n  }\n\n  makeTensorInfo(\n      shape: number[], dtype: DataType,\n      values?: BackendValues|string[]): TensorInfo {\n    let dataId;\n    if (dtype === 'string' && values != null && values.length > 0 &&\n        util.isString(values[0])) {\n      const encodedValues =\n          (values as unknown as string[]).map(d => util.encodeString(d));\n\n      dataId = this.write(encodedValues, shape, dtype);\n    } else {\n      dataId = this.write(values as TypedArray, shape, dtype);\n    }\n\n    this.texData.get(dataId).usage = null;\n    return {dataId, shape, dtype};\n  }\n\n  private makeOutput<T extends Tensor>(\n      shape: number[], dtype: DataType, values?: BackendValues): T {\n    return engine().makeTensorFromTensorInfo(\n               this.makeTensorInfo(shape, dtype, values), this) as T;\n  }\n\n  unpackTensor(input: TensorInfo): TensorInfo {\n    const program = new UnpackProgram(input.shape);\n    return this.runWebGLProgram(program, [input], input.dtype);\n  }\n\n  packTensor(input: TensorInfo): TensorInfo {\n    const program = new PackProgram(input.shape);\n    const preventEagerUnpackingOutput = true;\n    return this.runWebGLProgram(\n        program, [input], input.dtype, null /* customUniformValues */,\n        preventEagerUnpackingOutput);\n  }\n\n  private packedReshape(input: TensorInfo, afterShape: number[]): TensorInfo {\n    const input3DShape = [\n      webgl_util.getBatchDim(input.shape),\n      ...webgl_util.getRowsCols(input.shape)\n    ] as [number, number, number];\n    const input3D: TensorInfo = {\n      dtype: input.dtype,\n      shape: input3DShape,\n      dataId: input.dataId\n    };\n    const afterShapeAs3D = [\n      webgl_util.getBatchDim(afterShape), ...webgl_util.getRowsCols(afterShape)\n    ] as [number, number, number];\n\n    const program = new ReshapePackedProgram(afterShapeAs3D, input3DShape);\n    const preventEagerUnpackingOfOutput = true;\n    const customValues = [input3DShape];\n    const output = this.runWebGLProgram(\n        program, [input3D], input.dtype, customValues,\n        preventEagerUnpackingOfOutput);\n    return {dataId: output.dataId, shape: afterShape, dtype: output.dtype};\n  }\n\n  private decode(dataId: DataId, customTexShape?: [number, number]):\n      TensorInfo {\n    const texData = this.texData.get(dataId);\n    const {isPacked, shape, dtype} = texData;\n    if (customTexShape != null) {\n      const size = util.sizeFromShape(shape);\n      const texSize = customTexShape[0] * customTexShape[1] * 4;\n      util.assert(\n          size <= texSize,\n          () => 'customTexShape is too small. ' +\n              'Row * Column * 4 should be equal or larger than the ' +\n              'size of the tensor data.');\n    }\n    const shapeAs3D =\n        webgl_util.getShapeAs3D(shape) as [number, number, number];\n    let program;\n    if (isPacked) {\n      program = new DecodeMatrixPackedProgram(shapeAs3D);\n    } else {\n      program = new DecodeMatrixProgram(shapeAs3D);\n    }\n    const preventEagerUnpackingOfOutput = true;\n    const customValues =\n        [customTexShape != null ? customTexShape :\n                                  tex_util.getDenseTexShape(shapeAs3D)];\n    const out = this.runWebGLProgram(\n        program, [{shape: shapeAs3D, dtype, dataId}], dtype, customValues,\n        preventEagerUnpackingOfOutput, customTexShape);\n    return {dtype, shape, dataId: out.dataId};\n  }\n\n  runWebGLProgram(\n      program: GPGPUProgram, inputs: TensorInfo[], outputDtype: DataType,\n      customUniformValues?: number[][], preventEagerUnpackingOfOutput = false,\n      customTexShape?: [number, number]): TensorInfo {\n    const output = this.makeTensorInfo(program.outputShape, outputDtype);\n    const outData = this.texData.get(output.dataId);\n    if (program.packedOutput) {\n      outData.isPacked = true;\n    }\n    if (program.outPackingScheme === tex_util.PackingScheme.DENSE) {\n      const texelShape = customTexShape != null ?\n          customTexShape :\n          tex_util.getDenseTexShape(program.outputShape);\n      // For a densely packed output, we explicitly set texShape\n      // so it doesn't get assigned later according to our typical packing\n      // scheme wherein a single texel can only contain values from adjacent\n      // rows/cols.\n      outData.texShape = texelShape.map(d => d * 2) as [number, number];\n    }\n    if (program.outTexUsage != null) {\n      outData.usage = program.outTexUsage;\n    }\n\n    if (util.sizeFromShape(output.shape) === 0) {\n      // Short-circuit the computation since the result is empty (has 0 in its\n      // shape).\n      outData.values =\n          util.getTypedArrayFromDType(output.dtype as 'float32', 0);\n      return output;\n    }\n\n    const dataToDispose: TensorInfo[] = [];\n    const inputsData: TensorData[] = inputs.map(input => {\n      if (input.dtype === 'complex64') {\n        throw new Error(\n            `GPGPUProgram does not support complex64 input. For complex64 ` +\n            `dtypes, please separate the program into real and imaginary ` +\n            `parts.`);\n      }\n\n      let texData = this.texData.get(input.dataId);\n\n      if (texData.texture == null) {\n        if (!program.packedInputs &&\n            util.sizeFromShape(input.shape) <=\n                env().getNumber('WEBGL_SIZE_UPLOAD_UNIFORM')) {\n          // Upload small tensors that live on the CPU as uniforms, not as\n          // textures. Do this only when the environment supports 32bit floats\n          // due to problems when comparing 16bit floats with 32bit floats.\n          // TODO(https://github.com/tensorflow/tfjs/issues/821): Make it\n          // possible for packed shaders to sample from uniforms.\n          return {\n            shape: input.shape,\n            texData: null,\n            isUniform: true,\n            uniformValues: texData.values as TypedArray\n          };\n        }\n\n        // This ensures that if a packed program's inputs have not yet been\n        // uploaded to the GPU, they get uploaded as packed right off the bat.\n        if (program.packedInputs) {\n          texData.isPacked = true;\n          texData.shape = input.shape;\n        }\n      }\n\n      this.uploadToGPU(input.dataId);\n      if (!!texData.isPacked !== !!program.packedInputs) {\n        input = texData.isPacked ? this.unpackTensor(input) :\n                                   this.packTensor(input);\n        dataToDispose.push(input);\n        texData = this.texData.get(input.dataId);\n      } else if (\n          texData.isPacked &&\n          !webgl_util.isReshapeFree(texData.shape, input.shape)) {\n        // This is a special case where a texture exists for a tensor\n        // but the shapes are incompatible (due to packing constraints) because\n        // the tensor did not have a chance to go through the packed reshape\n        // shader. This only happens when we reshape the *same* tensor to form\n        // *distinct* inputs to an op, e.g. dotting a vector with itself. This\n        // case will disappear once packed uploading is the default.\n\n        const savedInput = input;\n        const targetShape = input.shape;\n\n        input.shape = texData.shape;\n        input = this.packedReshape(input as Tensor, targetShape);\n        dataToDispose.push(input);\n        texData = this.texData.get(input.dataId);\n\n        savedInput.shape = targetShape;\n      }\n\n      return {shape: input.shape, texData, isUniform: false};\n    });\n\n    this.uploadToGPU(output.dataId);\n    const outputData:\n        TensorData = {shape: output.shape, texData: outData, isUniform: false};\n    const key = gpgpu_math.makeShaderKey(program, inputsData, outputData);\n    const binary = this.getAndSaveBinary(key, () => {\n      return gpgpu_math.compileProgram(\n          this.gpgpu, program, inputsData, outputData);\n    });\n    const shouldTimeProgram = this.activeTimers != null;\n    let query: WebGLQuery|CPUTimerQuery;\n    if (shouldTimeProgram) {\n      query = this.startTimer();\n    }\n\n    if (!env().get('ENGINE_COMPILE_ONLY')) {\n      gpgpu_math.runProgram(\n          this.gpgpu, binary, inputsData, outputData, customUniformValues);\n    }\n\n    dataToDispose.forEach(info => this.disposeIntermediateTensorInfo(info));\n\n    if (shouldTimeProgram) {\n      query = this.endTimer(query);\n      this.activeTimers.push(\n          {name: program.constructor.name, query: this.getQueryTime(query)});\n    }\n\n    const glFlushThreshold = env().get('WEBGL_FLUSH_THRESHOLD');\n    // Manually GL flush requested\n    if (glFlushThreshold > 0) {\n      const time = util.now();\n      if ((time - this.lastGlFlushTime) > glFlushThreshold) {\n        this.gpgpu.gl.flush();\n        this.lastGlFlushTime = time;\n      }\n    }\n\n    if (!env().getBool('WEBGL_LAZILY_UNPACK') && outData.isPacked &&\n        preventEagerUnpackingOfOutput === false) {\n      const unpacked = this.unpackTensor(output);\n      this.disposeIntermediateTensorInfo(output);\n      return unpacked;\n    }\n    return output;\n  }\n\n  compileAndRun(\n      program: GPGPUProgram, inputs: TensorInfo[], outputDtype?: DataType,\n      customUniformValues?: number[][],\n      preventEagerUnpackingOfOutput = false): TensorInfo {\n    outputDtype = outputDtype || inputs[0].dtype;\n    const outInfo = this.runWebGLProgram(\n        program, inputs, outputDtype, customUniformValues,\n        preventEagerUnpackingOfOutput);\n    return outInfo;\n  }\n\n  private getAndSaveBinary(key: string, getBinary: () => GPGPUBinary):\n      GPGPUBinary {\n    if (!(key in this.binaryCache)) {\n      this.binaryCache[key] = getBinary();\n    }\n    return this.binaryCache[key];\n  }\n\n  getTextureManager(): TextureManager {\n    return this.textureManager;\n  }\n\n  private disposed = false;\n\n  override dispose() {\n    if (this.disposed) {\n      return;\n    }\n    // Avoid disposing the compiled webgl programs during unit testing because\n    // it slows down test execution.\n    if (!env().getBool('IS_TEST')) {\n      const allKeys = Object.keys(this.binaryCache);\n      allKeys.forEach(key => {\n        this.gpgpu.deleteProgram(this.binaryCache[key].webGLProgram);\n        delete this.binaryCache[key];\n      });\n    }\n    this.textureManager.dispose();\n    if (this.canvas != null &&\n        (typeof (HTMLCanvasElement) !== 'undefined' &&\n         this.canvas instanceof HTMLCanvasElement)) {\n      this.canvas.remove();\n    } else {\n      this.canvas = null;\n    }\n    if (this.gpgpuCreatedLocally) {\n      this.gpgpu.program = null;\n      this.gpgpu.dispose();\n    }\n    this.disposed = true;\n  }\n\n  override floatPrecision(): 16|32 {\n    if (this.floatPrecisionValue == null) {\n      this.floatPrecisionValue = tidy(() => {\n        if (!env().get('WEBGL_RENDER_FLOAT32_ENABLED')) {\n          // Momentarily switching DEBUG flag to false so we don't throw an\n          // error trying to upload a small value.\n          const debugFlag = env().getBool('DEBUG');\n          env().set('DEBUG', false);\n          const underflowCheckValue = this.abs(scalar(1e-8)).dataSync()[0];\n          env().set('DEBUG', debugFlag);\n\n          if (underflowCheckValue > 0) {\n            return 32;\n          }\n        }\n        return 16;\n      });\n    }\n    return this.floatPrecisionValue;\n  }\n\n  /** Returns the smallest representable number.  */\n  override epsilon(): number {\n    return this.floatPrecision() === 32 ? EPSILON_FLOAT32 : EPSILON_FLOAT16;\n  }\n\n  uploadToGPU(dataId: DataId): void {\n    const texData = this.texData.get(dataId);\n    const {shape, dtype, values, texture, usage, isPacked} = texData;\n\n    if (texture != null) {\n      // Array is already on GPU. No-op.\n      return;\n    }\n    const shouldTimeProgram = this.activeTimers != null;\n    let start: number;\n    if (shouldTimeProgram) {\n      start = util.now();\n    }\n\n    let texShape = texData.texShape;\n    if (texShape == null) {\n      // This texShape may not be the final texture shape. For packed or dense\n      // textures, the texShape will be changed when textures are created.\n      texShape = webgl_util.getTextureShapeFromLogicalShape(shape, isPacked);\n      texData.texShape = texShape;\n    }\n\n    if (values != null) {\n      const shapeAs3D = webgl_util.getShapeAs3D(shape);\n\n      let program;\n      let width = texShape[1], height = texShape[0];\n      const isByteArray =\n          values instanceof Uint8Array || values instanceof Uint8ClampedArray;\n\n      // texture for float array is PhysicalTextureType.PACKED_2X2_FLOAT32, we\n      // need to make sure the upload uses the same packed size\n      if (isPacked || !isByteArray) {\n        [width, height] = tex_util.getPackedMatrixTextureShapeWidthHeight(\n            texShape[0], texShape[1]);\n      }\n\n      if (isPacked) {\n        program = new EncodeMatrixPackedProgram(shapeAs3D, isByteArray);\n      } else {\n        program = new EncodeMatrixProgram(shapeAs3D, isByteArray);\n      }\n\n      // TexShape for float array needs to be the original shape, which byte\n      // array needs to be packed size. This allow the data upload shape to be\n      // matched with texture creation logic.\n      const tempDenseInputTexShape: [number, number] =\n          isByteArray ? [height, width] : texShape;\n      const tempDenseInputHandle =\n          this.makeTensorInfo(tempDenseInputTexShape, dtype);\n      const tempDenseInputTexData =\n          this.texData.get(tempDenseInputHandle.dataId);\n      if (isByteArray) {\n        tempDenseInputTexData.usage = TextureUsage.PIXELS;\n      } else {\n        tempDenseInputTexData.usage = TextureUsage.UPLOAD;\n      }\n      tempDenseInputTexData.texShape = tempDenseInputTexShape;\n      this.gpgpu.uploadDenseMatrixToTexture(\n          this.getTexture(tempDenseInputHandle.dataId), width, height,\n          values as TypedArray);\n\n      const customValues = [[height, width]];\n      // We want the output to remain packed regardless of the value of\n      // WEBGL_PACK.\n      const preventEagerUnpacking = true;\n      const encodedOutputTarget = this.runWebGLProgram(\n          program, [tempDenseInputHandle], dtype, customValues,\n          preventEagerUnpacking);\n\n      // Have the original texture assume the identity of the encoded output.\n      const outputTexData = this.texData.get(encodedOutputTarget.dataId);\n      texData.texShape = outputTexData.texShape;\n      texData.isPacked = outputTexData.isPacked;\n      texData.usage = outputTexData.usage;\n\n      if (!env().get('ENGINE_COMPILE_ONLY')) {\n        texData.texture = outputTexData.texture;\n        // Once uploaded, don't store the values on cpu.\n        texData.values = null;\n        this.texData.delete(encodedOutputTarget.dataId);\n      } else {\n        this.disposeData(encodedOutputTarget.dataId);\n      }\n\n      this.disposeIntermediateTensorInfo(tempDenseInputHandle);\n\n      if (shouldTimeProgram) {\n        this.uploadWaitMs += util.now() - start;\n      }\n    } else {\n      const newTexture = this.acquireTexture(texShape, usage, dtype, isPacked);\n      texData.texture = newTexture;\n    }\n  }\n\n  private convertAndCacheOnCPU(dataId: DataId, float32Values?: Float32Array):\n      TypedArray {\n    const texData = this.texData.get(dataId);\n    const {dtype} = texData;\n\n    if (float32Values != null) {\n      texData.values = float32ToTypedArray(float32Values, dtype as 'float32');\n    }\n    return texData.values as TypedArray;\n  }\n\n  private acquireTexture(\n      texShape: [number, number], texType: TextureUsage, dtype: DataType,\n      isPacked: boolean): Texture {\n    this.numBytesInGPU += this.computeBytes(texShape, dtype);\n    if (!this.warnedAboutMemory &&\n        this.numBytesInGPU > this.numMBBeforeWarning * 1024 * 1024) {\n      const mb = (this.numBytesInGPU / 1024 / 1024).toFixed(2);\n      this.warnedAboutMemory = true;\n      console.warn(\n          `High memory usage in GPU: ${mb} MB, ` +\n          `most likely due to a memory leak`);\n    }\n    return this.textureManager.acquireTexture(texShape, texType, isPacked);\n  }\n\n  private computeBytes(shape: [number, number], dtype: DataType) {\n    return shape[0] * shape[1] * util.bytesPerElement(dtype);\n  }\n\n  checkCompileCompletion() {\n    for (const [, binary] of Object.entries(this.binaryCache)) {\n      this.checkCompletion_(binary);\n    }\n  }\n\n  async checkCompileCompletionAsync(): Promise<boolean[]> {\n    const ps = [];\n    if (this.gpgpu.parallelCompilationExtension) {\n      for (const [, binary] of Object.entries(this.binaryCache)) {\n        ps.push(this.checkCompletionAsync_(binary));\n      }\n      return Promise.all(ps);\n    } else {\n      for (const [, binary] of Object.entries(this.binaryCache)) {\n        const p: Promise<boolean> = new Promise((resolve) => {\n          try {\n            this.checkCompletion_(binary);\n            resolve(true);\n          } catch (error) {\n            throw error;\n          }\n        });\n        ps.push(p);\n      }\n      return Promise.all(ps);\n    }\n  }\n\n  private async checkCompletionAsync_(binary: GPGPUBinary): Promise<boolean> {\n    if (this.gpgpu.gl.getProgramParameter(\n            binary.webGLProgram,\n            this.gpgpu.parallelCompilationExtension.COMPLETION_STATUS_KHR)) {\n      return this.checkCompletion_(binary);\n    } else {\n      await nextFrame();\n      return this.checkCompletionAsync_(binary);\n    }\n  }\n\n  private checkCompletion_(binary: GPGPUBinary): boolean {\n    if (this.gpgpu.gl.getProgramParameter(\n            binary.webGLProgram, this.gpgpu.gl.LINK_STATUS) === false) {\n      console.log(this.gpgpu.gl.getProgramInfoLog(binary.webGLProgram));\n      if (this.gpgpu.gl.getShaderParameter(\n              binary.fragmentShader, this.gpgpu.gl.COMPILE_STATUS) === false) {\n        webgl_util.logShaderSourceAndInfoLog(\n            binary.source,\n            this.gpgpu.gl.getShaderInfoLog(binary.fragmentShader));\n        throw new Error('Failed to compile fragment shader.');\n      }\n      throw new Error('Failed to link vertex and fragment shaders.');\n    }\n    return true;\n  }\n\n  getUniformLocations() {\n    for (const binary of Object.values(this.binaryCache)) {\n      const {\n        variablesLocations,\n        customUniformLocations,\n        infLoc,\n        nanLoc,\n        outShapeLocation,\n        outShapeStridesLocation,\n        outTexShapeLocation\n      } = getUniformLocations(this.gpgpu, binary.program, binary.webGLProgram);\n      binary.variablesLocations = variablesLocations;\n      binary.customUniformLocations = customUniformLocations;\n      binary.infLoc = infLoc;\n      binary.nanLoc = nanLoc;\n      binary.outShapeLocation = outShapeLocation;\n      binary.outShapeStridesLocation = outShapeStridesLocation;\n      binary.outTexShapeLocation = outTexShapeLocation;\n    }\n  }\n\n  /**\n   * Create a TF.js tensor out of an existing WebGL texture. A new texture will\n   * be created.\n   */\n  override createTensorFromGPUData(\n      values: WebGLData, shape: number[], dtype: DataType): Tensor {\n    values.channels = values.channels || 'RGBA';\n    const {texture, height, width, channels} = values;\n    const backend = engine().backend as MathBackendWebGL;\n\n    // Have to throw an error, otherwise WebGL just warns and returns wrong\n    // values.\n    if (!backend.gpgpu.gl.isTexture(texture)) {\n      throw new Error(\n          `The texture is invalid. Also, please make sure the texture and ` +\n          `the TFJS WebGL backend are using the same canvas. If you want to ` +\n          `use your own custom canvas, you have to create and use the custom ` +\n          `TFJS WebGL backend created from the canvas through ` +\n          `'new tf.MathBackendWebGL(customCanvas)'.`);\n    }\n\n    const dataId =\n        backend.writeTexture(texture, shape, dtype, height, width, channels);\n    return engine().makeTensorFromDataId(dataId, shape, dtype, backend);\n  }\n}\n\nfunction float32ToTypedArray<D extends NumericDataType>(\n    a: Float32Array, dtype: D): tf.DataTypeMap[D] {\n  if (dtype === 'float32' || dtype === 'complex64') {\n    return a as tf.DataTypeMap[D];\n  } else if (dtype === 'int32' || dtype === 'bool') {\n    const result = (dtype === 'int32') ? new Int32Array(a.length) :\n                                         new Uint8Array(a.length);\n    for (let i = 0; i < result.length; ++i) {\n      result[i] = Math.round(a[i]);\n    }\n    return result as tf.DataTypeMap[D];\n  } else {\n    throw new Error(`Unknown dtype ${dtype}`);\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env} from '@tensorflow/tfjs-core';\n\nimport * as gpgpu_util from './gpgpu_util';\nimport * as webgl_util from './webgl_util';\n\nexport {MathBackendWebGL, WebGLMemoryInfo, WebGLTimingInfo} from './backend_webgl';\nexport {setWebGLContext} from './canvas_util';\nexport {GPGPUContext} from './gpgpu_context';\nexport {GPGPUProgram} from './gpgpu_math';\n// WebGL specific utils.\nexport {gpgpu_util, webgl_util};\n\n/**\n * Enforce use of half precision textures if available on the platform.\n *\n * @doc {heading: 'Environment', namespace: 'webgl'}\n */\nexport function forceHalfFloat(): void {\n  env().set('WEBGL_FORCE_F16_TEXTURES', true);\n}\n","/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// base.ts is the webgl backend without auto kernel registration.\n\nimport {device_util, registerBackend} from '@tensorflow/tfjs-core';\nimport {MathBackendWebGL} from './backend_webgl';\nexport {version as version_webgl} from './version';\n\nif (device_util.isBrowser()) {\n  registerBackend('webgl', () => new MathBackendWebGL(), 2 /* priority */);\n}\n\n// Export webgl utilities\nexport * from './webgl';\n\n// Export forceHalfFlost under webgl namespace for the union bundle.\nimport {forceHalfFloat} from './webgl';\nexport const webgl = {forceHalfFloat};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\n\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\n\nexport const CHECK_NAN_SNIPPET = `\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n`;\n\nexport const SQUARED_DIFFERENCE = 'return (a - b) * (a - b);';\nexport class BinaryOpProgram implements GPGPUProgram {\n  variableNames = ['A', 'B'];\n  outputShape: number[];\n  userCode: string;\n  enableShapeUniforms: boolean;\n\n  constructor(op: string, aShape: number[], bShape: number[]) {\n    this.outputShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n    this.userCode = `\n      float binaryOperation(float a, float b) {\n        ${op}\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, util} from '@tensorflow/tfjs-core';\n\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport const CHECK_NAN_SNIPPET_PACKED = `\n  result.r = isNaN.r ? NAN : result.r;\n  result.g = isNaN.g ? NAN : result.g;\n  result.b = isNaN.b ? NAN : result.b;\n  result.a = isNaN.a ? NAN : result.a;\n`;\n\nexport const ELU_DER = `\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n`;\n\nexport const NOT_EQUAL = `\n  return vec4(notEqual(a, b));\n`;\n\nexport class BinaryOpPackedProgram implements GPGPUProgram {\n  variableNames = ['A', 'B'];\n  outputShape: number[];\n  userCode: string;\n  supportsBroadcasting = true;\n  packedInputs = true;\n  packedOutput = true;\n  enableShapeUniforms: boolean;\n\n  constructor(\n      op: string, aShape: number[], bShape: number[],\n      checkOutOfBounds = false) {\n    this.outputShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n    const rank = this.outputShape.length;\n    this.enableShapeUniforms = useShapeUniforms(rank);\n    let checkOutOfBoundsString = '';\n    if (checkOutOfBounds) {\n      if (rank === 0 || util.sizeFromShape(this.outputShape) === 1) {\n        checkOutOfBoundsString = `\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        `;\n      } else {\n        const dtype = getCoordsDataType(rank);\n        checkOutOfBoundsString = `\n          ${dtype} coords = getOutputCoords();\n        `;\n        if (rank === 1) {\n          if (this.enableShapeUniforms) {\n            checkOutOfBoundsString += `\n            result.y = (coords + 1) >= outShape ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;\n          } else {\n            checkOutOfBoundsString += `\n            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;\n          }\n        } else {\n          const channels = getChannels('coords', rank);\n          if (this.enableShapeUniforms) {\n            checkOutOfBoundsString += `\n            bool nextRowOutOfBounds =\n              (${channels[rank - 2]} + 1) >= outShape[${rank} - 2];\n            bool nextColOutOfBounds =\n              (${channels[rank - 1]} + 1) >= outShape[${rank} - 1];\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `;\n          } else {\n            checkOutOfBoundsString += `\n            bool nextRowOutOfBounds =\n              (${channels[rank - 2]} + 1) >= ${this.outputShape[rank - 2]};\n            bool nextColOutOfBounds =\n              (${channels[rank - 1]} + 1) >= ${this.outputShape[rank - 1]};\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `;\n          }\n        }\n      }\n    }\n\n    this.userCode = `\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        ${op}\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        ${checkOutOfBoundsString}\n\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Identity, IdentityInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nexport function identity(\n    args: {inputs: IdentityInputs, backend: MathBackendWebGL}): TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  backend.incRef(x.dataId);\n\n  return {dataId: x.dataId, shape: x.shape, dtype: x.dtype};\n}\n\nexport const identityConfig: KernelConfig = {\n  kernelName: Identity,\n  backendName: 'webgl',\n  kernelFunc: identity as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Complex, ComplexInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {identity} from './Identity';\n\n/**\n * In WebGL data is stored in GPU textures which can't be efficiently copied, so\n * complex tensors share data with their real and imaginary components. Complex\n * tensors' reference to the components is tracked by refCount on the individual\n * component. The refCounts are increased by the identity call.\n *\n * When a complex tensor is disposed, it will reduce the refCount on the\n * components by calling disposeData on each.\n */\nexport function complex(\n    args: {inputs: ComplexInputs, backend: MathBackendWebGL}): TensorInfo {\n  const {inputs, backend} = args;\n  const {real, imag} = inputs;\n\n  const complexInfo = backend.makeTensorInfo(real.shape, 'complex64');\n  const complex = backend.texData.get(complexInfo.dataId);\n\n  const realTensorInfo = identity({inputs: {x: real}, backend});\n\n  const imagTensorInfo = identity({inputs: {x: imag}, backend});\n\n  complex.complexTensorInfos = {real: realTensorInfo, imag: imagTensorInfo};\n\n  return complexInfo;\n}\n\nexport const complexConfig: KernelConfig = {\n  kernelName: Complex,\n  backendName: 'webgl',\n  kernelFunc: complex as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, LeakyRelu, LeakyReluAttrs, LeakyReluInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {BinaryOpProgram} from '../binaryop_gpu';\nimport {BinaryOpPackedProgram} from '../binaryop_packed_gpu';\n\nexport const LEAKYRELU = `return (a < 0.) ? b * a : a;`;\nexport const LEAKYRELU_PACKED = `\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n`;\n\nexport function leakyRelu(args: {\n  inputs: LeakyReluInputs,\n  backend: MathBackendWebGL,\n  attrs: LeakyReluAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {alpha} = attrs;\n\n  const $alpha = backend.makeTensorInfo(\n      [], 'float32',\n      util.createScalarValue(alpha as unknown as 'float32', 'float32'));\n\n  const program = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ?\n      new BinaryOpPackedProgram(LEAKYRELU_PACKED, x.shape, $alpha.shape) :\n      new BinaryOpProgram(LEAKYRELU, x.shape, $alpha.shape);\n  const result = backend.runWebGLProgram(program, [x, $alpha], 'float32');\n\n  backend.disposeIntermediateTensorInfo($alpha);\n\n  return result;\n}\n\nexport const leakyReluConfig: KernelConfig = {\n  kernelName: LeakyRelu,\n  backendName: 'webgl',\n  kernelFunc: leakyRelu as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, Prelu, PreluInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {BinaryOpProgram} from '../binaryop_gpu';\nimport {BinaryOpPackedProgram} from '../binaryop_packed_gpu';\n\nexport const PRELU = `return (a < 0.) ? b * a : a;`;\nexport const PRELU_PACKED = `\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n`;\n\nexport function prelu(args: {inputs: PreluInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x, alpha} = inputs;\n\n  const program = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ?\n      new BinaryOpPackedProgram(PRELU_PACKED, x.shape, alpha.shape) :\n      new BinaryOpProgram(PRELU, x.shape, alpha.shape);\n  return backend.runWebGLProgram(program, [x, alpha], 'float32');\n}\n\nexport const preluConfig: KernelConfig = {\n  kernelName: Prelu,\n  backendName: 'webgl',\n  kernelFunc: prelu as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport { backend_util, BinaryInputs, DataType, env, KernelFunc, TypedArray, UnaryInputs, upcastType} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {BinaryOpProgram} from '../binaryop_gpu';\nimport {BinaryOpPackedProgram} from '../binaryop_packed_gpu';\nimport {complex} from '../kernels/Complex';\nimport {LEAKYRELU, LEAKYRELU_PACKED} from '../kernels/LeakyRelu';\nimport {PRELU, PRELU_PACKED} from '../kernels/Prelu';\nimport * as unary_op from '../unaryop_gpu';\nimport {UnaryOpProgram} from '../unaryop_gpu';\nimport * as unary_packed_op from '../unaryop_packed_gpu';\nimport {UnaryOpPackedProgram} from '../unaryop_packed_gpu';\n\nimport {SimpleBinaryKernelImplCPU, SimpleUnaryKernelImplCPU} from './shared';\n\nexport const CHECK_NAN_SNIPPET_UNARY = `if (isnan(x)) return x;`;\n\ntype UnaryKernelFuncConfig = {\n  opSnippet: string,\n  packedOpSnippet?: string,\n  cpuKernelImpl?: SimpleUnaryKernelImplCPU,\n  dtype?: DataType,\n};\n\n/**\n * Template that creates a `KernelFunc` for unary ops.\n * @param opSnippet Op snippet to create `UnaryOpProgram`.\n * @param packedOpSnippet Op snippet to create `UnaryOpPackedProgram`.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the first input. This is mainly used in\n *     comparison kernels, such as Equal, Less, Greater, etc.\n */\nexport function unaryKernelFunc(\n    {opSnippet, packedOpSnippet, cpuKernelImpl, dtype}: UnaryKernelFuncConfig):\n    KernelFunc {\n  return ({inputs, backend}) => {\n    const {x} = inputs as UnaryInputs;\n    const webglBackend = backend as MathBackendWebGL;\n\n    const $dtype = dtype || x.dtype;\n    if (webglBackend.shouldExecuteOnCPU([x]) && cpuKernelImpl != null) {\n      const xData = webglBackend.texData.get(x.dataId);\n      const outValues = cpuKernelImpl(xData.values as TypedArray, $dtype);\n      return webglBackend.makeTensorInfo(x.shape, $dtype, outValues);\n    }\n\n    const shouldUsePackedProgram =\n        env().getBool('WEBGL_PACK_UNARY_OPERATIONS') && packedOpSnippet != null;\n    let program: UnaryOpProgram|UnaryOpPackedProgram;\n    if (shouldUsePackedProgram) {\n      program = new UnaryOpPackedProgram(x.shape, packedOpSnippet);\n    } else {\n      program = new UnaryOpProgram(x.shape, opSnippet);\n    }\n\n    return webglBackend.runWebGLProgram(program, [x], $dtype);\n  };\n}\n\ntype BinaryKernelFuncConfig = {\n  opSnippet: string,\n  packedOpSnippet?: string,\n  checkOutOfBounds?: boolean,\n  supportsComplex?: boolean,\n  cpuKernelImpl?: SimpleBinaryKernelImplCPU,\n  dtype?: DataType\n};\n\n/**\n * Template that creates a `KernelFunc` for binary ops.\n * @param opSnippet Op snippet to create `BinaryOpProgram`.\n * @param packedOpSnippet Op snippet to create `BinaryOpPackedProgram`.\n * @param checkOutOfBoundsForPackedProgram Whether to set checkOutOfBounds=true\n *     when creating BinaryOpPackedProgram.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the first input. This is mainly used in\n *     comparison kernels, such as Equal, Less, Greater, etc.\n */\nexport function binaryKernelFunc({\n  opSnippet,\n  packedOpSnippet,\n  checkOutOfBounds = false,\n  supportsComplex = false,\n  cpuKernelImpl,\n  dtype\n}: BinaryKernelFuncConfig): KernelFunc {\n  return ({inputs, backend}) => {\n    const {a, b} = inputs as BinaryInputs;\n    const webglBackend = backend as MathBackendWebGL;\n\n    if (supportsComplex && a.dtype === 'complex64') {\n      const aData = webglBackend.texData.get(a.dataId);\n      const bData = webglBackend.texData.get(b.dataId);\n\n      const [real, imag] = [\n        [aData.complexTensorInfos.real, bData.complexTensorInfos.real],\n        [aData.complexTensorInfos.imag, bData.complexTensorInfos.imag]\n      ].map(complexParts => {\n        const [aPart, bPart] = complexParts;\n\n        const aHandle = {\n          dataId: aPart.dataId,\n          dtype: aPart.dtype,\n          shape: a.shape\n        };\n        const bHandle = {\n          dataId: bPart.dataId,\n          dtype: bPart.dtype,\n          shape: b.shape\n        };\n\n        const program = new BinaryOpProgram(opSnippet, a.shape, b.shape);\n        return webglBackend.runWebGLProgram(\n            program, [aHandle, bHandle], upcastType(aPart.dtype, bPart.dtype));\n      });\n\n      const complexOutput =\n          complex({inputs: {real, imag}, backend: webglBackend});\n\n      webglBackend.disposeIntermediateTensorInfo(real);\n      webglBackend.disposeIntermediateTensorInfo(imag);\n\n      // TODO(annxingyuan): Implement CPU forwarding for complex inputs.\n\n      return complexOutput;\n    }\n\n    const $dtype = dtype || upcastType(a.dtype, b.dtype);\n    if ((a.dtype === 'string' || b.dtype === 'string' ||\n         webglBackend.shouldExecuteOnCPU([a, b])) &&\n        cpuKernelImpl != null) {\n      const aVals = webglBackend.texData.get(a.dataId).values as TypedArray;\n      const bVals = webglBackend.texData.get(b.dataId).values as TypedArray;\n\n      const decodedAVals = a.dtype === 'string' ?\n          // tslint:disable-next-line: no-any\n          backend_util.fromUint8ToStringArray(aVals as any as Uint8Array[]) :\n          aVals;\n      const decodedBVals = a.dtype === 'string' ?\n          // tslint:disable-next-line: no-any\n          backend_util.fromUint8ToStringArray(bVals as any as Uint8Array[]) :\n          bVals;\n      const [outValues, outShape] =\n          cpuKernelImpl(a.shape, b.shape, decodedAVals, decodedBVals, $dtype);\n\n      const out = webglBackend.makeTensorInfo(outShape, $dtype);\n      const outData = webglBackend.texData.get(out.dataId);\n      outData.values = outValues;\n      return out;\n    }\n\n    const shouldUsePackedProgram =\n        env().getBool('WEBGL_PACK_BINARY_OPERATIONS') &&\n        packedOpSnippet != null;\n    let program: BinaryOpProgram|BinaryOpPackedProgram;\n    if (shouldUsePackedProgram) {\n      program = new BinaryOpPackedProgram(\n          packedOpSnippet, a.shape, b.shape, checkOutOfBounds);\n    } else {\n      program = new BinaryOpProgram(opSnippet, a.shape, b.shape);\n    }\n\n    return webglBackend.runWebGLProgram(program, [a, b], $dtype);\n  };\n}\n\nexport function mapActivationToShaderProgram(\n    activation: backend_util.Activation, packed = false): string {\n  if (activation === 'linear') {\n    if (packed) {\n      return unary_packed_op.LINEAR;\n    }\n    return unary_op.LINEAR;\n  } else if (activation === 'relu') {\n    if (packed) {\n      return unary_packed_op.RELU;\n    }\n    return unary_op.RELU;\n  } else if (activation === 'elu') {\n    if (packed) {\n      return unary_packed_op.ELU;\n    }\n    return unary_op.ELU;\n  } else if (activation === 'relu6') {\n    if (packed) {\n      return unary_packed_op.RELU6;\n    }\n    return unary_op.RELU6;\n  } else if (activation === 'prelu') {\n    if (packed) {\n      return PRELU_PACKED;\n    }\n    return PRELU;\n  } else if (activation === 'leakyrelu') {\n    if (packed) {\n      return LEAKYRELU_PACKED;\n    }\n    return LEAKYRELU;\n  } else if (activation === 'sigmoid') {\n    if (packed) {\n      return unary_packed_op.SIGMOID;\n    }\n    return unary_op.SIGMOID;\n  }\n  throw new Error(`Activation ${\n      activation} has not been implemented for the WebGL backend.`);\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\n\nexport class MatMulPackedProgram implements GPGPUProgram {\n  variableNames = ['matrixA', 'matrixB'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n  enableShapeUniforms: boolean;\n\n  constructor(\n      aShape: [number, number, number], bShape: [number, number, number],\n      outputShape: [number, number, number], transposeA = false,\n      transposeB = false, addBias = false, activation: string = null,\n      hasPreluActivation = false, hasLeakyreluActivation = false) {\n    this.outputShape = outputShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n\n    const sharedDim = transposeA ? aShape[1] : aShape[2];\n    const sharedDimensionPacked = Math.ceil(sharedDim / 2);\n\n    const aSample = transposeA ? 'i * 2, rc.y' : 'rc.y, i * 2';\n    const bSample = transposeB ? 'rc.z, i * 2' : 'i * 2, rc.z';\n    const aSwizzle = transposeA ? ['a.xxyy', 'a.zzww'] : ['a.xxzz', 'a.yyww'];\n    const bSwizzle = transposeB ? ['b.xzxz', 'b.ywyw'] : ['b.xyxy', 'b.zwzw'];\n\n    let activationSnippet = '', applyActivationSnippet = '';\n    if (activation) {\n      if (hasPreluActivation) {\n        activationSnippet = `vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${activation}\n        }`;\n      } else if (hasLeakyreluActivation) {\n        activationSnippet = `vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${activation}\n        }`;\n      } else {\n        activationSnippet = `vec4 activation(vec4 x) {\n          ${activation}\n        }`;\n      }\n\n      applyActivationSnippet = `result = activation(result);`;\n    }\n\n    const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n\n    if (hasPreluActivation) {\n      this.variableNames.push('preluActivationWeights');\n    }\n\n    if (hasLeakyreluActivation) {\n      this.variableNames.push('leakyreluAlpha');\n    }\n\n    let batchASnippet = 'rc.x';\n    let batchBSnippet = 'rc.x';\n    if (aShape[0] < bShape[0]) {\n      batchASnippet = `imod(rc.x, ${aShape[0]})`;\n    } else if (bShape[0] < aShape[0]) {\n      batchBSnippet = `imod(rc.x, ${bShape[0]})`;\n    }\n\n    this.userCode = `\n      ${activationSnippet}\n      // Don't use uniform for sharedDimensionPacked for performance.\n      const float sharedDimension = ${sharedDimensionPacked}.0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        int batchA = ${batchASnippet};\n        int batchB = ${batchBSnippet};\n        for (int i = 0; i < ${sharedDimensionPacked}; i++) {\n          vec4 a = getMatrixA(batchA, ${aSample});\n          vec4 b = getMatrixB(batchB, ${bSample});\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += (${aSwizzle[0]} * ${bSwizzle[0]});\n          result += (${aSwizzle[1]} * ${bSwizzle[1]});\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        ${addBiasSnippet}\n\n        ${applyActivationSnippet}\n\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\n// (Ar + Ai)(Br + Bi) =\n// ArBr + ArBi + AiBr + AiBi = ArBr - AB + ArBi + AiBr\n// Yr = ArBr - AB\n// Yi = ArBi + AiBr\nexport const COMPLEX_MULTIPLY = {\n  REAL: 'return areal * breal - aimag * bimag;',\n  IMAG: 'return areal * bimag + aimag * breal;'\n};\n\nexport class BinaryOpComplexProgram implements GPGPUProgram {\n  variableNames = ['AReal', 'AImag', 'BReal', 'BImag'];\n  userCode: string;\n  outputShape: number[];\n\n  constructor(op: string, aShape: number[], bShape: number[]) {\n    this.outputShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n\n    this.userCode = `\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        ${op}\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BinaryInputs, env, KernelConfig, Multiply, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport * as binaryop_complex_gpu from '../binaryop_complex_gpu';\nimport {BinaryOpComplexProgram} from '../binaryop_complex_gpu';\nimport {BinaryOpProgram} from '../binaryop_gpu';\nimport {BinaryOpPackedProgram} from '../binaryop_packed_gpu';\nimport {multiplyImplCPU as cpuMultiply} from '../kernel_utils/shared';\n\nimport {complex} from './Complex';\n\nconst MUL = 'return a * b;';\n\nexport function multiply(\n    args: {inputs: BinaryInputs, backend: MathBackendWebGL}): TensorInfo {\n  const {inputs, backend} = args;\n  const {a, b} = inputs;\n  const dtype = backend_util.upcastType(a.dtype, b.dtype);\n\n  if (a.dtype === 'complex64') {\n    const aData = backend.texData.get(a.dataId);\n    const bData = backend.texData.get(b.dataId);\n\n    const realProgram = new BinaryOpComplexProgram(\n        binaryop_complex_gpu.COMPLEX_MULTIPLY.REAL, a.shape, b.shape);\n    const imagProgram = new BinaryOpComplexProgram(\n        binaryop_complex_gpu.COMPLEX_MULTIPLY.IMAG, a.shape, b.shape);\n\n    const inputs = [\n      {\n        dataId: aData.complexTensorInfos.real.dataId,\n        dtype: aData.complexTensorInfos.real.dtype,\n        shape: a.shape\n      },\n      {\n        dataId: aData.complexTensorInfos.imag.dataId,\n        dtype: aData.complexTensorInfos.imag.dtype,\n        shape: a.shape\n      },\n      {\n        dataId: bData.complexTensorInfos.real.dataId,\n        dtype: bData.complexTensorInfos.real.dtype,\n        shape: b.shape\n      },\n      {\n        dataId: bData.complexTensorInfos.imag.dataId,\n        dtype: bData.complexTensorInfos.imag.dtype,\n        shape: b.shape\n      }\n    ];\n\n    const realPart = backend.runWebGLProgram(realProgram, inputs, 'float32');\n    const imagPart = backend.runWebGLProgram(imagProgram, inputs, 'float32');\n\n    const complexOutput =\n        complex({inputs: {real: realPart, imag: imagPart}, backend});\n\n    backend.disposeIntermediateTensorInfo(realPart);\n    backend.disposeIntermediateTensorInfo(imagPart);\n\n    // TODO(annxingyuan): CPU forwarding for complex inputs.\n    return complexOutput;\n  }\n\n  if (backend.shouldExecuteOnCPU([a, b])) {\n    const aData = backend.texData.get(a.dataId);\n    const bData = backend.texData.get(b.dataId);\n    const [outValues, outShape] = cpuMultiply(\n        a.shape, b.shape, aData.values as TypedArray,\n        bData.values as TypedArray, dtype);\n\n    const out = backend.makeTensorInfo(outShape, dtype);\n    const outData = backend.texData.get(out.dataId);\n    outData.values = outValues;\n    return out;\n  }\n\n  let program: BinaryOpProgram|BinaryOpPackedProgram;\n  if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n    program = new BinaryOpPackedProgram(MUL, a.shape, b.shape);\n  } else {\n    program = new BinaryOpProgram(MUL, a.shape, b.shape);\n  }\n\n  return backend.runWebGLProgram(program, [a, b], dtype);\n}\n\nexport const multiplyConfig: KernelConfig = {\n  kernelName: Multiply,\n  backendName: 'webgl',\n  kernelFunc: multiply\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Reshape, ReshapeAttrs, ReshapeInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {packedReshape} from '../kernel_utils/reshape';\nimport {isReshapeFree} from '../webgl_util';\n\nexport function reshape(args: {\n  inputs: ReshapeInputs,\n  backend: MathBackendWebGL,\n  attrs: ReshapeAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {shape} = attrs;\n  const webglBackend = backend;\n\n  const xSize = util.sizeFromShape(x.shape);\n  const $shape = util.inferFromImplicitShape(shape, xSize);\n  const $xSize = util.sizeFromShape($shape);\n\n  util.assert(\n      xSize === $xSize,\n      () => `The new shape (${$shape}) has ${$xSize} elements and the old ` +\n          `shape (${x.shape}) has ${xSize} elements. The new shape and old ` +\n          `shape must have the same number of elements.`);\n\n  const xTexData = webglBackend.texData.get(x.dataId);\n  if (xTexData.isPacked && !isReshapeFree(x.shape, $shape) &&\n      !(xTexData.texture !== null && isReshapeFree(xTexData.shape, $shape))) {\n    return packedReshape(x, $shape, webglBackend);\n  }\n\n  webglBackend.incRef(x.dataId);\n\n  return {dataId: x.dataId, shape: $shape, dtype: x.dtype};\n}\n\nexport const reshapeConfig: KernelConfig = {\n  kernelName: Reshape,\n  backendName: 'webgl',\n  kernelFunc: reshape as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ReshapePackedProgram} from '../reshape_packed_gpu';\nimport {getBatchDim, getRowsCols} from '../webgl_util';\n\nexport function packedReshape(\n    input: TensorInfo, afterShape: number[],\n    backend: MathBackendWebGL): TensorInfo {\n  const input3DShape =\n      [getBatchDim(input.shape),\n       ...getRowsCols(input.shape)] as [number, number, number];\n  const input3D: TensorInfo = {\n    dtype: input.dtype,\n    shape: input3DShape,\n    dataId: input.dataId\n  };\n  const afterShapeAs3D =\n      [getBatchDim(afterShape),\n       ...getRowsCols(afterShape)] as [number, number, number];\n\n  const program = new ReshapePackedProgram(afterShapeAs3D, input3DShape);\n  const preventEagerUnpackingOfOutput = true;\n  const customValues = [input3DShape];\n  const output = backend.runWebGLProgram(\n      program, [input3D], input.dtype, customValues,\n      preventEagerUnpackingOfOutput);\n  return {dataId: output.dataId, shape: afterShape, dtype: output.dtype};\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class MeanProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(reduceInfo: backend_util.ReduceInfo, divisor?: number) {\n    const {windowSize, batchSize, inSize, outSize} = reduceInfo;\n    this.outputShape = [batchSize, outSize];\n\n    const windowSizeNearestVec4 = Math.floor(windowSize / 4) * 4;\n    const windowSizeVec4Remainder = windowSize % 4;\n\n    let updateSnippet = `sumValue += dot(values, ones);`;\n    if (divisor != null) {\n      const denominator = 1 / divisor;\n      updateSnippet = `sumValue += dot(values * ${\n          util.isInt(denominator) ? denominator.toPrecision(2) :\n                                    denominator}, ones);`;\n    }\n\n    let checkOutOfBounds = '';\n    if (inSize % windowSize > 0) {\n      checkOutOfBounds = `\n        if (inIdx < 0 || inIdx >= ${inSize}) {\n          return 0.0;\n        }\n      `;\n    }\n\n    this.userCode = `\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${checkOutOfBounds}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${windowSize};\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${windowSizeNearestVec4}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${updateSnippet}\n        }\n\n        int inIdx = inOffset + ${windowSizeNearestVec4};\n        if (${windowSizeVec4Remainder === 1}) {\n          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 2}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1), 0.0, 0.0);\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 3}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2), 0.0);\n\n          ${updateSnippet}\n        }\n        setOutput(sumValue);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ReduceProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      reduceInfo: backend_util.ReduceInfo,\n      reduceType: 'all'|'any'|'max'|'min'|'sum'|'prod') {\n    const {windowSize, batchSize, inSize, outSize} = reduceInfo;\n    this.outputShape = [batchSize, outSize];\n\n    let initializationValue = '0.0';\n    let compareOp = ``;\n\n    if (reduceType === 'prod') {\n      initializationValue = '1.0';\n    } else if (reduceType === 'min') {\n      // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\n      initializationValue = '1.0 / 1e-20';\n      compareOp = `min`;\n    } else if (reduceType === 'max') {\n      // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\n      initializationValue = '-1.0 / 1e-20';\n      compareOp = `max`;\n    }\n\n    let returnValue = `${reduceType}(${reduceType}(${reduceType}(` +\n        'minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])';\n\n    if (reduceType === 'sum') {\n      returnValue = `sumValue`;\n    } else if (reduceType === 'prod') {\n      returnValue = `prodValue`;\n    } else if (reduceType === 'all') {\n      returnValue = `allValue`;\n    } else if (reduceType === 'any') {\n      returnValue = `anyValue`;\n    }\n\n    const windowSizeNearestVec4 = Math.floor(windowSize / 4) * 4;\n    const windowSizeVec4Remainder = windowSize % 4;\n\n    let updateSnippet = `\n      if (${reduceType === 'sum'}) {\n        sumValue += dot(values, ones);\n      } else if (${reduceType === 'prod'}) {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ${compareOp}(values, minMaxValue);\n        if (${reduceType === 'min'} || ${reduceType === 'max'}) {\n          minMaxValue = ${compareOp}(values, minMaxValue);\n          bvec4 isNaN = isnan(values);\n          if (isNaN.r || isNaN.g || isNaN.b || isNaN.a) {\n            minMaxValue = vec4(NAN);\n          }\n        }\n      }\n    `;\n\n    let vecType = `vec4`;\n\n    if (reduceType === 'all') {\n      initializationValue = '1.0';\n      updateSnippet = `\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      `;\n      vecType = `bvec4`;\n    } else if (reduceType === 'any') {\n      initializationValue = '0.0';\n      updateSnippet = `\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      `;\n      vecType = `bvec4`;\n    }\n\n    let checkOutOfBounds = '';\n    if (inSize % windowSize > 0) {\n      checkOutOfBounds = `\n        if (inIdx < 0 || inIdx >= ${inSize}) {\n          return initializationValue;\n        }\n      `;\n    }\n    this.userCode = `\n      const float initializationValue = ${initializationValue};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${checkOutOfBounds}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${windowSize};\n\n        vec4 minMaxValue = vec4(${initializationValue});\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ${windowSizeNearestVec4}; i += 4) {\n          int inIdx = inOffset + i;\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${updateSnippet}\n        }\n\n        int inIdx = inOffset + ${windowSizeNearestVec4};\n        if (${windowSizeVec4Remainder === 1}) {\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 2}) {\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 3}) {\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ${updateSnippet}\n        }\n        setOutput(${returnValue});\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {MeanProgram} from '../mean_gpu';\nimport {ReduceProgram} from '../reduce_gpu';\n\ntype ReduceTypes = 'all'|'any'|'max'|'min'|'sum'|'prod'|'mean';\n\n// Returns an array of configuration objects that describe each stage of the\n// reduction.\nfunction getReductionStages(inShape: number[]):\n    Array<{inSize: number, windowSize: number, outSize: number}> {\n  const stages = [];\n\n  while (stages.length === 0 || stages[stages.length - 1].outSize !== 1) {\n    const outSize: number =\n        stages.length ? stages[stages.length - 1].outSize : inShape[1];\n    const windowSize = backend_util.computeOptimalWindowSize(outSize);\n    stages.push({\n      inSize: outSize,\n      windowSize,\n      outSize: Math.ceil(outSize / windowSize)\n    });\n  }\n\n  return stages;\n}\n\nexport function reduce(\n    x: TensorInfo, dtype: DataType, reductionType: ReduceTypes,\n    backend: MathBackendWebGL): TensorInfo {\n  const reductionStages = getReductionStages(x.shape);\n\n  let result = x;\n  for (let i = 0; i < reductionStages.length; i++) {\n    const {inSize, windowSize, outSize} = reductionStages[i];\n\n    let program: ReduceProgram|MeanProgram;\n    let previousResult: TensorInfo;\n    if (reductionType === 'mean') {\n      program = i === 0 ?\n          new MeanProgram(\n              {windowSize, inSize, batchSize: x.shape[0], outSize}, inSize) :\n          new MeanProgram({windowSize, inSize, batchSize: x.shape[0], outSize});\n    } else {\n      program = new ReduceProgram(\n          {windowSize, inSize, batchSize: x.shape[0], outSize}, reductionType);\n    }\n\n    previousResult = result;\n    result = backend.runWebGLProgram(program, [result], dtype);\n\n    if (previousResult.dataId !== x.dataId) {\n      backend.disposeIntermediateTensorInfo(previousResult);\n    }\n  }\n\n  return result;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class TransposeProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  userCode: string;\n  rank: number;\n\n  constructor(aShape: number[], newDim: number[]) {\n    const outputShape: number[] = new Array(aShape.length);\n    for (let i = 0; i < outputShape.length; i++) {\n      outputShape[i] = aShape[newDim[i]];\n    }\n    this.outputShape = outputShape;\n    this.rank = outputShape.length;\n    const dtype = getCoordsDataType(this.rank);\n    const switched = getSwitchedCoords(newDim);\n\n    this.userCode = `\n    void main() {\n      ${dtype} resRC = getOutputCoords();\n      setOutput(getA(${switched}));\n    }\n    `;\n  }\n}\n\nfunction getSwitchedCoords(newDim: number[]): string {\n  const rank = newDim.length;\n  if (rank > 6) {\n    throw Error(`Transpose for rank ${rank} is not yet supported`);\n  }\n  const originalOrder =\n      ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w', 'resRC.u', 'resRC.v'];\n  const switchedCoords = new Array(rank);\n  for (let i = 0; i < newDim.length; i++) {\n    switchedCoords[newDim[i]] = originalOrder[i];\n  }\n  return switchedCoords.join();\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getVecChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class TransposePackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  userCode: string;\n  rank: number;\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(aShape: number[], newDim: number[]) {\n    const outputShape: number[] = new Array(aShape.length);\n    for (let i = 0; i < outputShape.length; i++) {\n      outputShape[i] = aShape[newDim[i]];\n    }\n    this.outputShape = outputShape;\n    this.rank = outputShape.length;\n    if (this.rank > 6) {\n      throw Error(\n          `Packed transpose for rank ${this.rank} is not yet supported.`);\n    }\n    const dtype = getCoordsDataType(this.rank);\n\n    const outputOrder = getVecChannels('rc', this.rank);\n    const switchedOrder = new Array(this.rank);\n    for (let i = 0; i < newDim.length; i++) {\n      switchedOrder[newDim[i]] = outputOrder[i];\n    }\n    const innerDims = `vec2(${switchedOrder.slice(-2).join()})`;\n    const nextColumn =\n        `++${outputOrder[this.rank - 1]} < ${outputShape[this.rank - 1]}`;\n    const getc = `getChannel(getA(${switchedOrder.join()}), ${innerDims})`;\n\n    this.userCode = `\n    void main() {\n      ${dtype} rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = ${getc};\n      if(${nextColumn}) {\n        result[1] = ${getc};\n      }\n      --${outputOrder[this.rank - 1]};\n      if(++${outputOrder[this.rank - 2]} < ${outputShape[this.rank - 2]}) {\n        result[2] = ${getc};\n        if(${nextColumn}) {\n          result[3] = ${getc};\n        }\n      }\n      setOutput(result);\n    }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {transposeImplCPU} from '../kernel_utils/shared';\nimport {TransposeProgram} from '../transpose_gpu';\nimport {TransposePackedProgram} from '../transpose_packed_gpu';\n\nexport function transposeImpl(\n    x: TensorInfo, perm: number[], backend: MathBackendWebGL): TensorInfo {\n  const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?\n      new TransposePackedProgram(x.shape, perm) :\n      new TransposeProgram(x.shape, perm);\n  return backend.runWebGLProgram(program, [x], x.dtype);\n}\n\nexport {transposeImplCPU};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Sum, SumAttrs, SumInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {sumImpl} from './Sum_impl';\n\nexport function sum(\n    args: {inputs: SumInputs, attrs: SumAttrs, backend: MathBackendWebGL}) {\n  const {inputs, backend, attrs} = args;\n\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  return sumImpl(x, axis, keepDims, backend);\n}\n\nexport const sumConfig: KernelConfig = {\n  kernelName: Sum,\n  backendName: 'webgl',\n  kernelFunc: sum as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, sumOutType, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reduce} from '../kernel_utils/reduce';\nimport {reshape} from './Reshape';\n\nimport {transposeImpl} from './Transpose_impl';\n\nexport function sumImpl(\n    x: TensorInfo, axis: number|number[], keepDims: boolean,\n    backend: MathBackendWebGL): TensorInfo {\n  const reductionIndices = axis;\n\n  const xRank = x.shape.length;\n\n  const origAxes = util.parseAxisParam(reductionIndices, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  const sumInputIsTransposed = permutedAxes != null;\n\n  let sumInput = x;\n  if (sumInputIsTransposed) {\n    sumInput = transposeImpl(x, permutedAxes, backend);\n\n    axes = backend_util.getInnerMostAxes(axes.length, xRank);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('sum', axes, xRank);\n  const [sumOutShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(sumInput.shape, axes);\n\n  let outShape = sumOutShape;\n  if (keepDims) {\n    // rather than reshape at the end, set the target shape here.\n    outShape = backend_util.expandShapeToKeepDim(sumOutShape, origAxes);\n  }\n\n  const inSize = util.sizeFromShape(reduceShape);\n  const xSize = util.sizeFromShape(x.shape);\n  const batchSize = xSize / inSize;\n  const reshapedInput = reshape(\n      {inputs: {x: sumInput}, attrs: {shape: [batchSize, inSize]}, backend});\n\n  const outType = sumOutType(x.dtype);\n\n  const reduced = reduce(reshapedInput, outType, 'sum', backend);\n  const out =\n      reshape({inputs: {x: reduced}, attrs: {shape: outShape}, backend});\n\n  backend.disposeIntermediateTensorInfo(reshapedInput);\n  backend.disposeIntermediateTensorInfo(reduced);\n  if (sumInputIsTransposed) {\n    backend.disposeIntermediateTensorInfo(sumInput);\n  }\n\n  return out;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Transpose, TransposeAttrs, TransposeInputs, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {transposeImpl} from './Transpose_impl';\nimport {transposeImplCPU as cpuTranspose} from './Transpose_impl';\n\nexport function transpose(args: {\n  inputs: TransposeInputs,\n  attrs: TransposeAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {perm} = attrs;\n  const webglBackend = backend;\n\n  const xRank = x.shape.length;\n\n  const newShape: number[] = new Array(xRank);\n  for (let i = 0; i < newShape.length; i++) {\n    newShape[i] = x.shape[perm[i]];\n  }\n\n  let out: TensorInfo;\n  if (webglBackend.shouldExecuteOnCPU([x])) {\n    const xTexData = webglBackend.texData.get(x.dataId);\n    const values = xTexData.values as TypedArray;\n    const outValues = cpuTranspose(values, x.shape, x.dtype, perm, newShape);\n\n    out = webglBackend.makeTensorInfo(newShape, x.dtype);\n    const outData = webglBackend.texData.get(out.dataId);\n    outData.values = outValues;\n  } else {\n    out = transposeImpl(x, perm, webglBackend);\n  }\n  return out;\n}\n\nexport const transposeConfig: KernelConfig = {\n  kernelName: Transpose,\n  backendName: 'webgl',\n  kernelFunc: transpose as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, broadcast_util, TensorInfo, upcastType, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {mapActivationToShaderProgram} from '../kernel_utils/kernel_funcs_utils';\nimport {MatMulPackedProgram} from '../mulmat_packed_gpu';\n\nimport {multiply} from './Multiply';\nimport {reshape} from './Reshape';\nimport {sum} from './Sum';\nimport {transpose} from './Transpose';\n\n// Empirically determined minimal shared dimension in matmul before we forward\n// to a.mul(b).sum() in order to take advantage of GPU parallelism. See\n// https://github.com/tensorflow/tfjs-core/pull/1379 for benchmarks.\nexport const MATMUL_SHARED_DIM_THRESHOLD = 1000;\n\ntype BatchMatMulConfig = {\n  a: TensorInfo,\n  b: TensorInfo,\n  transposeA: boolean,\n  transposeB: boolean,\n  backend: MathBackendWebGL,\n  bias?: TensorInfo,\n  preluActivationWeights?: TensorInfo,\n  leakyreluAlpha?: number,\n  activation?: backend_util.Activation\n};\n\nexport function batchMatMulImpl({\n  a,\n  b,\n  transposeA,\n  transposeB,\n  backend,\n  bias = null,\n  preluActivationWeights = null,\n  leakyreluAlpha = 0,\n  activation = null\n}: BatchMatMulConfig): TensorInfo {\n  const aRank = a.shape.length;\n  const bRank = b.shape.length;\n\n  const innerShapeA = transposeA ? a.shape[aRank - 2] : a.shape[aRank - 1];\n  const innerShapeB = transposeB ? b.shape[bRank - 1] : b.shape[bRank - 2];\n\n  const outerShapeA = transposeA ? a.shape[aRank - 1] : a.shape[aRank - 2];\n  const outerShapeB = transposeB ? b.shape[bRank - 2] : b.shape[bRank - 1];\n\n  const outerDimsA = a.shape.slice(0, -2);\n  const outerDimsB = b.shape.slice(0, -2);\n\n  const batchDimA = util.sizeFromShape(outerDimsA);\n  const batchDimB = util.sizeFromShape(outerDimsB);\n\n  const outShapeOuterDims = broadcast_util.assertAndGetBroadcastShape(\n      a.shape.slice(0, -2), b.shape.slice(0, -2));\n  const outShape = outShapeOuterDims.concat([outerShapeA, outerShapeB]);\n\n  util.assert(\n      innerShapeA === innerShapeB,\n      () => `Error in matMul: inner shapes (${innerShapeA}) and (` +\n          `${innerShapeB}) of Tensors with shapes ${a.shape} and ` +\n          `${b.shape} and transposeA=${transposeA}` +\n          ` and transposeB=${transposeB} must match.`);\n\n  const a3dShape: [number, number, number] = transposeA ?\n      [batchDimA, innerShapeA, outerShapeA] :\n      [batchDimA, outerShapeA, innerShapeA];\n  const b3dShape: [number, number, number] = transposeB ?\n      [batchDimB, outerShapeB, innerShapeB] :\n      [batchDimB, innerShapeB, outerShapeB];\n\n  // The rest of the implementation is designed to operate on rank-3 tensors\n  const a3d = reshape({inputs: {x: a}, backend, attrs: {shape: a3dShape}});\n  const b3d = reshape({inputs: {x: b}, backend, attrs: {shape: b3dShape}});\n\n  const intermediates: TensorInfo[] = [a3d, b3d];\n\n  const batchDim = Math.max(batchDimA, batchDimB);\n  const sharedDim = transposeA ? a3d.shape[1] : a3d.shape[2];\n\n  const hasBias = bias != null;\n  const hasPreluActivationWeights = preluActivationWeights != null;\n  const hasLeakyreluAlpha = activation === 'leakyrelu';\n  const fusedActivation = activation != null ?\n      mapActivationToShaderProgram(activation, true) :\n      null;\n  const containsFusedOps = hasBias || hasPreluActivationWeights ||\n      hasLeakyreluAlpha || fusedActivation != null;\n  let out: TensorInfo;\n\n  // Since the matrices are vectors, it is faster to call mul().sum()\n  // because sum() is O(sqrt(N)) due to divide-and-conquer.\n  if ((outerShapeA === 1 || outerShapeB === 1) &&\n      sharedDim > MATMUL_SHARED_DIM_THRESHOLD && containsFusedOps === false) {\n    let aVec = a3d;\n    let bVec = b3d;\n    if (transposeA) {\n      aVec = transpose({inputs: {x: a3d}, backend, attrs: {perm: [0, 2, 1]}});\n      intermediates.push(aVec);\n    }\n    if (transposeB) {\n      bVec = transpose({inputs: {x: b3d}, backend, attrs: {perm: [0, 2, 1]}});\n      intermediates.push(bVec);\n    }\n\n    const shouldReshapeA = outerShapeB !== 1;\n    const shouldReshapeB = outerShapeB === 1;\n\n    let aVec3d = aVec;\n    if (shouldReshapeA) {\n      aVec3d = reshape({\n        inputs: {x: aVec},\n        backend,\n        attrs: {shape: [batchDim, sharedDim, 1]}\n      });\n\n      intermediates.push(aVec3d);\n    }\n\n    const axis = outerShapeB === 1 ? 2 : 1;\n\n    let bVec3d = bVec;\n    if (shouldReshapeB) {\n      bVec3d = reshape({\n        inputs: {x: bVec},\n        backend,\n        attrs: {shape: [batchDim, 1, sharedDim]}\n      });\n\n      intermediates.push(bVec3d);\n    }\n\n    const product = multiply({inputs: {a: aVec3d, b: bVec3d}, backend});\n    out = sum({inputs: {x: product}, backend, attrs: {axis, keepDims: true}});\n    intermediates.push(product);\n  } else {\n    const dtype = upcastType(a.dtype, b.dtype);\n\n    const program = new MatMulPackedProgram(\n        a3dShape, b3dShape, [batchDim, outerShapeA, outerShapeB], transposeA,\n        transposeB, hasBias, fusedActivation, hasPreluActivationWeights,\n        hasLeakyreluAlpha);\n\n    const inputs: TensorInfo[] = [a3d, b3d];\n    if (bias != null) {\n      inputs.push(bias);\n    }\n    if (hasPreluActivationWeights) {\n      inputs.push(preluActivationWeights);\n    }\n    if (hasLeakyreluAlpha) {\n      const $leakyreluAlpha = backend.makeTensorInfo(\n          [], 'float32',\n          util.createScalarValue(leakyreluAlpha as unknown as 'float32', 'float32'));\n      inputs.push($leakyreluAlpha);\n      intermediates.push($leakyreluAlpha);\n    }\n\n    out = backend.runWebGLProgram(program, inputs, dtype);\n  }\n\n  const outReshaped =\n      reshape({inputs: {x: out}, backend, attrs: {shape: outShape}});\n  intermediates.push(out);\n  for (const i of intermediates) {\n    backend.disposeIntermediateTensorInfo(i);\n  }\n  return outReshaped;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {_FusedMatMul, _FusedMatMulAttrs, _FusedMatMulInputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {batchMatMulImpl} from './BatchMatMul_impl';\n\nexport function _fusedMatMul(args: {\n  inputs: _FusedMatMulInputs,\n  attrs: _FusedMatMulAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {a, b, bias, preluActivationWeights} = inputs;\n  const {transposeA, transposeB, activation, leakyreluAlpha} = attrs;\n\n  return batchMatMulImpl({\n    a,\n    b,\n    transposeA,\n    transposeB,\n    backend,\n    bias,\n    preluActivationWeights,\n    leakyreluAlpha,\n    activation\n  });\n}\n\nexport const _fusedMatMulConfig: KernelConfig = {\n  kernelName: _FusedMatMul,\n  backendName: 'webgl',\n  kernelFunc: _fusedMatMul as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Abs, AbsInputs, env, KernelConfig, KernelFunc, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {simpleAbsImplCPU} from '../kernel_utils/shared';\nimport {UnaryOpProgram} from '../unaryop_gpu';\nimport {UnaryOpPackedProgram} from '../unaryop_packed_gpu';\n\nconst ABS = `return abs(x);`;\n\nexport function abs(args: {inputs: AbsInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  // TODO: handle cases when x is complex. Once the cpu implementation\n  // can handle complex values, refactor to use unaryKernelFunc.\n  if (backend.shouldExecuteOnCPU([x]) && x.dtype !== 'complex64') {\n    const xData = backend.texData.get(x.dataId);\n    const outValues = simpleAbsImplCPU(xData.values as TypedArray);\n    return backend.makeTensorInfo(x.shape, x.dtype, outValues);\n  }\n\n  let program: UnaryOpProgram|UnaryOpPackedProgram;\n  if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n    program = new UnaryOpPackedProgram(x.shape, ABS);\n  } else {\n    program = new UnaryOpProgram(x.shape, ABS);\n  }\n  return backend.runWebGLProgram(program, [x], x.dtype);\n}\n\nexport const absConfig: KernelConfig = {\n  kernelName: Abs,\n  backendName: 'webgl',\n  kernelFunc: abs as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Acos, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {CHECK_NAN_SNIPPET} from '../unaryop_gpu';\n\nconst ACOS = CHECK_NAN_SNIPPET + `\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n`;\n\nexport const acos = unaryKernelFunc({opSnippet: ACOS});\n\nexport const acosConfig: KernelConfig = {\n  kernelName: Acos,\n  backendName: 'webgl',\n  kernelFunc: acos,\n};\n","\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Acosh, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {CHECK_NAN_SNIPPET} from '../unaryop_gpu';\n\nconst ACOSH = CHECK_NAN_SNIPPET + `\n  if (x < 1.0) return NAN;\nreturn log(x + sqrt(x * x - 1.0));`;\n\nexport const acosh = unaryKernelFunc({opSnippet: ACOSH});\n\nexport const acoshConfig: KernelConfig = {\n  kernelName: Acosh,\n  backendName: 'webgl',\n  kernelFunc: acosh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Add, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {addImplCPU as cpuAdd} from '../kernel_utils/shared';\n\nconst ADD = 'return a + b;';\n\nexport const addKernelFunc = binaryKernelFunc({\n  opSnippet: ADD,\n  packedOpSnippet: ADD,\n  supportsComplex: true,\n  cpuKernelImpl: cpuAdd\n});\n\nexport const addConfig: KernelConfig = {\n  kernelName: Add,\n  backendName: 'webgl',\n  kernelFunc: addKernelFunc\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class AddNProgram implements GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(outputShape: number[], shapes: number[][]) {\n    this.outputShape = outputShape;\n    this.variableNames = shapes.map((_, i) => `T${i}`);\n\n    const snippets: string[] = [];\n    // Get target elements from every input tensor.\n    this.variableNames.forEach(variable => {\n      snippets.push(`float v${variable} = get${variable}AtOutCoords();`);\n    });\n\n    // Calculate the sum of all elements.\n    const operation = this.variableNames\n                          .map(variable => {\n                            return `v${variable}`;\n                          })\n                          .join(' + ');\n\n    this.userCode = `\n      void main() {\n        ${snippets.join('\\n        ')}\n\n        float result = ${operation};\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class AddNPackedProgram implements GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[] = [];\n  userCode: string;\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(outputShape: number[], shapes: number[][]) {\n    this.outputShape = outputShape;\n    this.variableNames = shapes.map((_, i) => `T${i}`);\n\n    const snippets: string[] = [];\n    // Get target elements from every input tensor.\n    this.variableNames.forEach(variable => {\n      snippets.push(`vec4 v${variable} = get${variable}AtOutCoords();`);\n    });\n\n    // Calculate the sum of all elements.\n    const operation = this.variableNames\n                          .map(variable => {\n                            return `v${variable}`;\n                          })\n                          .join(' + ');\n\n    this.userCode = `\n      void main() {\n        ${snippets.join('\\n        ')}\n\n        vec4 result = ${operation};\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {AddN, AddNInputs, env, KernelConfig, KernelFunc, TensorInfo, upcastType} from '@tensorflow/tfjs-core';\n\nimport {AddNProgram} from '../addn_gpu';\nimport {AddNPackedProgram} from '../addn_packed_gpu';\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {identity} from './Identity';\n\nexport function addN(args: {inputs: AddNInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n\n  const tensors = inputs;\n  if (tensors.length === 1) {\n    return identity({inputs: {x: tensors[0]}, backend});\n  }\n\n  // Limit the number of uploaded textures for optimization.\n  if (tensors.length > env().get('WEBGL_MAX_TEXTURES_IN_SHADER')) {\n    const midIndex = Math.floor(tensors.length / 2);\n    const leftSide = addN({inputs: tensors.slice(0, midIndex), backend});\n    const rightSide = addN({inputs: tensors.slice(midIndex), backend});\n    return addN({inputs: [leftSide, rightSide], backend});\n  }\n\n  const dtype =\n      tensors.map(t => t.dtype).reduce((d1, d2) => upcastType(d1, d2));\n  const shapes = tensors.map(t => t.shape);\n  // We can make sure shapes are identical in op level.\n  const usePackedOp = env().getBool('WEBGL_PACK');\n  const program = usePackedOp ?\n      new AddNPackedProgram(tensors[0].shape, shapes) :\n      new AddNProgram(tensors[0].shape, shapes);\n  return backend.runWebGLProgram(program, tensors, dtype);\n}\n\nexport const addNConfig: KernelConfig = {\n  kernelName: AddN,\n  backendName: 'webgl',\n  kernelFunc: addN as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {All, AllAttrs, AllInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reduce} from '../kernel_utils/reduce';\n\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function all(\n    args: {inputs: AllInputs, backend: MathBackendWebGL, attrs: AllAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  const xRank = x.shape.length;\n\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  let permutedX = x;\n  if (permutedAxes != null) {\n    permutedX = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    axes = backend_util.getInnerMostAxes(axes.length, xRank);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('all', axes, xRank);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(permutedX.shape, axes);\n  const inSize = util.sizeFromShape(reduceShape);\n\n  const a2D =\n      reshape({inputs: {x: permutedX}, backend, attrs: {shape: [-1, inSize]}});\n  const reduced = reduce(a2D, a2D.dtype, 'all', backend);\n\n  let res;\n  if (keepDims) {\n    const newShape = backend_util.expandShapeToKeepDim(outShape, origAxes);\n    res = reshape({inputs: {x: reduced}, backend, attrs: {shape: newShape}});\n  } else {\n    res = reshape({inputs: {x: reduced}, backend, attrs: {shape: outShape}});\n  }\n\n  backend.disposeIntermediateTensorInfo(a2D);\n  backend.disposeIntermediateTensorInfo(reduced);\n\n  if (permutedAxes != null) {\n    backend.disposeIntermediateTensorInfo(permutedX);\n  }\n\n  return res;\n}\n\nexport const allConfig: KernelConfig = {\n  kernelName: All,\n  backendName: 'webgl',\n  kernelFunc: all as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Any, AnyAttrs, AnyInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reduce} from '../kernel_utils/reduce';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function any(\n    args: {inputs: AnyInputs, backend: MathBackendWebGL, attrs: AnyAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  const xRank = x.shape.length;\n\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  let permutedX = x;\n  if (permutedAxes != null) {\n    permutedX = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    axes = backend_util.getInnerMostAxes(axes.length, xRank);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('any', axes, xRank);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(permutedX.shape, axes);\n  const inSize = util.sizeFromShape(reduceShape);\n\n  const a2D =\n      reshape({inputs: {x: permutedX}, backend, attrs: {shape: [-1, inSize]}});\n  const reduced = reduce(a2D, a2D.dtype, 'any', backend);\n\n  let res;\n  if (keepDims) {\n    const newShape = backend_util.expandShapeToKeepDim(outShape, origAxes);\n    res = reshape({inputs: {x: reduced}, backend, attrs: {shape: newShape}});\n  } else {\n    res = reshape({inputs: {x: reduced}, backend, attrs: {shape: outShape}});\n  }\n\n  backend.disposeIntermediateTensorInfo(a2D);\n  backend.disposeIntermediateTensorInfo(reduced);\n\n  if (permutedAxes != null) {\n    backend.disposeIntermediateTensorInfo(permutedX);\n  }\n\n  return res;\n}\n\nexport const anyConfig: KernelConfig = {\n  kernelName: Any,\n  backendName: 'webgl',\n  kernelFunc: any as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ArgMinMaxProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      reduceInfo: backend_util.ReduceInfo, op: 'max'|'min',\n      firstPass: boolean) {\n    const {windowSize, batchSize, outSize} = reduceInfo;\n    if (!firstPass) {\n      this.variableNames.push('bestIndicesA');\n    }\n    this.outputShape = [batchSize, outSize];\n    const compOp = (op === 'max') ? '>' : '<';\n    const indexSnippet = firstPass ?\n        'inOffset + i;' :\n        'round(getBestIndicesA(batch, inOffset + i));';\n\n    this.userCode = `\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${windowSize};\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < ${windowSize}; i++) {\n          int inIdx = ${indexSnippet};\n          float candidate = getA(batch, inIdx);\n          if (candidate ${compOp} bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {util} from '@tensorflow/tfjs-core';\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class ArgMinMaxPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  userCode: string;\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(\n      shape: number[], windowSize: number, op: 'max'|'min',\n      firstPass: boolean) {\n    util.assert(\n        shape.length > 2,\n        () => `Packed arg${\n            op.charAt(0).toUpperCase() +\n            op.slice(1)} supports only inputs with rank above 2.`);\n    const inSize = shape[shape.length - 1];\n    const outSize = Math.ceil(inSize / windowSize);\n    this.outputShape = shape.slice(0, -1);\n    if (outSize > 1) {\n      this.outputShape.push(outSize);\n    }\n    if (!firstPass) {\n      this.variableNames.push('bestIndicesA');\n    }\n    const outShape = this.outputShape;\n    const rank = outShape.length;\n    const dtype = getCoordsDataType(rank);\n    const coords = getChannels('coords', rank);\n\n    let sourceLocSetup;\n    let sourceRank;\n    if (outSize === 1) {\n      sourceRank = rank + 1;\n      const sourceLocDType = getCoordsDataType(sourceRank);\n      sourceLocSetup = `\n        ${sourceLocDType} sourceLocR = ${sourceLocDType}(${coords.join()}, 0);\n        ++${coords[rank - 1]};\n        ${sourceLocDType} sourceLocG = ${sourceLocDType}(${coords.join()}, 0);\n        ++${coords[rank - 2]};\n        ${sourceLocDType} sourceLocA = ${sourceLocDType}(${coords.join()}, 0);\n        --${coords[rank - 1]};\n        ${sourceLocDType} sourceLocB = ${sourceLocDType}(${coords.join()}, 0);\n        --${coords[rank - 2]};`;\n    } else {\n      sourceRank = rank;\n      sourceLocSetup = `\n        ${dtype} sourceLocR = coords;\n        ++${coords[rank - 1]};\n        ${dtype} sourceLocG = coords;\n        ++${coords[rank - 2]};\n        ${dtype} sourceLocA = coords;\n        --${coords[rank - 1]};\n        ${dtype} sourceLocB = coords;\n        --${coords[rank - 2]};`;\n    }\n    const channels = ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, sourceRank);\n    const inChannel = '.' + channels[sourceRank - 1];  // e.g. \".b\" for rank 3.\n    const intChannels = channels.map(x => 'int ' + x);\n    const srcRCoords =\n        getChannels('sourceLocR', sourceRank - 1).concat('inIdx.r');\n    const srcGCoords =\n        getChannels('sourceLocG', sourceRank - 1).concat('inIdx.g');\n    const srcBCoords =\n        getChannels('sourceLocB', sourceRank - 1).concat('inIdx.b');\n    const srcACoords =\n        getChannels('sourceLocA', sourceRank - 1).concat('inIdx.a');\n\n    const compOp = (op === 'max') ? 'greaterThan' : 'lessThan';\n    const fetchCandidateIdx = firstPass ? '' : `\n          inIdx = round(vec4(getBestIndicesAChannel(${srcRCoords.join()}),\n                             getBestIndicesAChannel(${srcGCoords.join()}),\n                             getBestIndicesAChannel(${srcBCoords.join()}),\n                             getBestIndicesAChannel(${srcACoords.join()})));`;\n\n    const fetchValue = `vec4(\n            getAChannel(${srcRCoords.join()}),\n            hasNextCol ? getAChannel(${srcGCoords.join()}) : 0.,\n            hasNextRow ? getAChannel(${srcBCoords.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${srcACoords.join()}) : 0.)`;\n\n    const getBestIndicesAChannelSnippet = firstPass ? '' : `\n      float getBestIndicesAChannel(${intChannels.join()}) {\n        return getChannel(getBestIndicesA(${channels.join()}),\n                                          vec2(${channels.slice(-2).join()}));\n      }`;\n\n    this.userCode = `\n      float getAChannel(${intChannels.join()}) {\n        return getChannel(getA(${channels.join()}),\n                               vec2(${channels.slice(-2).join()}));\n      }\n      ${getBestIndicesAChannelSnippet}\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        bool hasNextCol = ${coords[rank - 1]} < ${outShape[rank - 1] - 1};\n        bool hasNextRow = ${coords[rank - 2]} < ${outShape[rank - 2] - 1};\n        ${sourceLocSetup}\n        ivec4 srcIdx = ivec4(sourceLocR${inChannel}, sourceLocG${inChannel},\n          sourceLocB${inChannel}, sourceLocA${inChannel}) * ${windowSize};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${fetchValue};\n\n        for (int i = 0; i < ${windowSize}; i++) {\n          inIdx = srcIdx;\n          ${fetchCandidateIdx}\n          vec4 candidate = ${fetchValue};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${compOp}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, env, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {ArgMinMaxProgram} from '../argminmax_gpu';\nimport {ArgMinMaxPackedProgram} from '../argminmax_packed_gpu';\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reshape} from '../kernels/Reshape';\n\nfunction argReduce(\n    backend: MathBackendWebGL, x: TensorInfo, reduceType: 'max'|'min',\n    bestIndicesA: TensorInfo = null): TensorInfo {\n  let batchSize = x.shape[0];\n  let inSize = x.shape[1];\n  if (bestIndicesA != null) {\n    batchSize = bestIndicesA.shape[0];\n    inSize = bestIndicesA.shape[1];\n  }\n  const windowSize = backend_util.computeOptimalWindowSize(inSize);\n  const reduceInfo =\n      {windowSize, inSize, batchSize, outSize: Math.ceil(inSize / windowSize)};\n  const program =\n      new ArgMinMaxProgram(reduceInfo, reduceType, bestIndicesA == null);\n  const inputs = [x];\n  if (bestIndicesA != null) {\n    inputs.push(bestIndicesA);\n  }\n  const output = backend.runWebGLProgram(program, inputs, 'int32');\n  // No need to run another GPGPU program.\n  if (output.shape[1] === 1) {\n    return output;\n  }\n  const result = argReduce(backend, x, reduceType, output);\n  backend.disposeIntermediateTensorInfo(output);\n  return result;\n}\n\nfunction argReducePacked(\n    backend: MathBackendWebGL, x: TensorInfo, reduceType: 'max'|'min',\n    bestIndicesA: TensorInfo = null): TensorInfo {\n  const inShape = bestIndicesA != null ? bestIndicesA.shape : x.shape;\n  const inSize = inShape[inShape.length - 1];\n  const windowSize = backend_util.computeOptimalWindowSize(inSize);\n  const program = new ArgMinMaxPackedProgram(\n      inShape, windowSize, reduceType, bestIndicesA == null);\n  const inputs = bestIndicesA == null ? [x] : [x, bestIndicesA];\n  const output = backend.runWebGLProgram(program, inputs, 'int32');\n  if (output.shape.length === x.shape.length) {\n    const result = argReducePacked(backend, x, reduceType, output);\n    backend.disposeIntermediateTensorInfo(output);\n    return result;\n  }\n  return output;\n}\n\nexport function argMinMaxReduce(\n    backend: MathBackendWebGL, x: TensorInfo, axis: number,\n    reduceType: 'min'|'max'): TensorInfo {\n  const axes = [axis];\n  backend_util.assertAxesAreInnerMostDims(\n      'arg' + reduceType.charAt(0).toUpperCase() + reduceType.slice(1), axes,\n      x.shape.length);\n  if (!env().getBool('WEBGL_PACK_REDUCE') || x.shape.length <= 2) {\n    const intermediateTensorInfos = [];\n    // Eagerly unpack x input since it is passed in to all the shaders which\n    // require unpacked inputs.\n    const xtexData = backend.texData.get(x.dataId);\n    const xIsPacked = xtexData !== null && xtexData.isPacked;\n    let xUnPacked = x;\n    if (xIsPacked) {\n      xUnPacked = backend.unpackTensor(x);\n      intermediateTensorInfos.push(xUnPacked);\n    }\n\n    const [outShape, reduceShape] =\n        backend_util.computeOutAndReduceShapes(xUnPacked.shape, axes);\n    const inSize = util.sizeFromShape(reduceShape);\n    const a2D = reshape(\n        {inputs: {x: xUnPacked}, backend, attrs: {shape: [-1, inSize]}});\n    intermediateTensorInfos.push(a2D);\n\n    const reduced = argReduce(backend, a2D, reduceType);\n    intermediateTensorInfos.push(reduced);\n    const reshaped =\n        reshape({inputs: {x: reduced}, backend, attrs: {shape: outShape}});\n\n    intermediateTensorInfos.forEach(\n        t => backend.disposeIntermediateTensorInfo(t));\n    return reshaped;\n  }\n  return argReducePacked(backend, x, reduceType);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ArgMax, ArgMaxAttrs, ArgMaxInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {argMinMaxReduce} from '../kernel_utils/arg_min_max';\n\nimport {transpose} from './Transpose';\n\nexport function argMax(\n    args:\n        {inputs: ArgMaxInputs, backend: MathBackendWebGL, attrs: ArgMaxAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis} = attrs;\n\n  let axes = util.parseAxisParam(axis, x.shape);\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  const intermediateTensorInfos = [];\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    intermediateTensorInfos.push($x);\n    axes = backend_util.getInnerMostAxes(axes.length, $x.shape.length);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('argMax', [axes[0]], $x.shape.length);\n  const out = argMinMaxReduce(backend, $x, axes[0], 'max');\n\n  intermediateTensorInfos.forEach(\n      t => backend.disposeIntermediateTensorInfo(t));\n  return out;\n}\n\nexport const argMaxConfig: KernelConfig = {\n  kernelName: ArgMax,\n  backendName: 'webgl',\n  kernelFunc: argMax as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ArgMin, ArgMinAttrs, ArgMinInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {argMinMaxReduce} from '../kernel_utils/arg_min_max';\nimport {transpose} from './Transpose';\n\nexport function argMin(\n    args:\n        {inputs: ArgMinInputs, backend: MathBackendWebGL, attrs: ArgMinAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis} = attrs;\n\n  let axes = util.parseAxisParam(axis, x.shape);\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  const intermediateTensorInfos = [];\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    intermediateTensorInfos.push($x);\n    axes = backend_util.getInnerMostAxes(axes.length, $x.shape.length);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('argMin', [axes[0]], $x.shape.length);\n\n  const out = argMinMaxReduce(backend, $x, axes[0], 'min');\n\n  intermediateTensorInfos.forEach(\n      t => backend.disposeIntermediateTensorInfo(t));\n  return out;\n}\n\nexport const argMinConfig: KernelConfig = {\n  kernelName: ArgMin,\n  backendName: 'webgl',\n  kernelFunc: argMin as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Asin, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {CHECK_NAN_SNIPPET} from '../unaryop_gpu';\n\nconst ASIN = CHECK_NAN_SNIPPET + `\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n`;\n\nexport const asin = unaryKernelFunc({opSnippet: ASIN});\n\nexport const asinConfig: KernelConfig = {\n  kernelName: Asin,\n  backendName: 'webgl',\n  kernelFunc: asin,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Asinh, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {CHECK_NAN_SNIPPET} from '../unaryop_gpu';\n\nconst ASINH = CHECK_NAN_SNIPPET + `return log(x + sqrt(x * x + 1.0));`;\n\nexport const asinh = unaryKernelFunc({opSnippet: ASINH});\n\nexport const asinhConfig: KernelConfig = {\n  kernelName: Asinh,\n  backendName: 'webgl',\n  kernelFunc: asinh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Atan, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {CHECK_NAN_SNIPPET} from '../unaryop_gpu';\n\nconst ATAN = CHECK_NAN_SNIPPET + `\n  return atan(x);\n`;\n\nexport const atan = unaryKernelFunc({opSnippet: ATAN});\n\nexport const atanConfig: KernelConfig = {\n  kernelName: Atan,\n  backendName: 'webgl',\n  kernelFunc: atan,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Atan2} from '@tensorflow/tfjs-core';\nimport {KernelConfig} from '@tensorflow/tfjs-core';\nimport {CHECK_NAN_SNIPPET} from '../binaryop_gpu';\nimport {CHECK_NAN_SNIPPET_PACKED} from '../binaryop_packed_gpu';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst ATAN2 = CHECK_NAN_SNIPPET + `\n  return atan(a, b);\n`;\n\nconst ATAN2_PACKED = `\n  vec4 result = atan(a, b);\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  ` +\n    CHECK_NAN_SNIPPET_PACKED + `\n  return result;\n`;\n\nexport const atan2 =\n    binaryKernelFunc({opSnippet: ATAN2, packedOpSnippet: ATAN2_PACKED});\n\nexport const atan2Config: KernelConfig = {\n  kernelName: Atan2,\n  backendName: 'webgl',\n  kernelFunc: atan2,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Atanh, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {CHECK_NAN_SNIPPET} from '../unaryop_gpu';\n\nconst ATANH = CHECK_NAN_SNIPPET + `\n  if ((x < -1.0) || (x > 1.0)) return NAN;\nreturn (log(1.0 + x) - log(1.0 - x)) / 2.0;`;\n\nexport const atanh = unaryKernelFunc({opSnippet: ATANH});\n\nexport const atanhConfig: KernelConfig = {\n  kernelName: Atanh,\n  backendName: 'webgl',\n  kernelFunc: atanh,\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class Pool2DProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      convInfo: backend_util.Conv2DInfo, poolType: 'max'|'avg',\n      computePositions: boolean, flattenPositions = false,\n      includeBatchInIndex = false) {\n    if (poolType === 'avg' && computePositions) {\n      throw new Error('Cannot compute positions for average pool.');\n    }\n\n    const filterWidth = convInfo.filterWidth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    this.outputShape = convInfo.outShape;\n\n    const isAvgPool = poolType === 'avg';\n    const batchFlattenPositionStr = `((batch  * ${convInfo.inHeight} + xR) * ${\n        convInfo.inWidth} + xC) * ${convInfo.inChannels} + d`;\n    const flattenPositionStr =\n        `(xR * ${convInfo.inWidth} + xC) * ${convInfo.inChannels} + d`;\n\n    let initializationValue = '0.0';\n    if (!isAvgPool) {\n      // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\n      initializationValue = '-1.0 / 1e-20';\n    }\n\n    if (computePositions) {\n      const compareOp = '>=';\n\n      this.userCode = `\n        const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n        const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < ${effectiveFilterHeight};\n              wR += ${dilationHeight}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${effectiveFilterWidth};\n                wC += ${dilationWidth}) {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value ${compareOp} currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = ${\n          flattenPositions ? (includeBatchInIndex ? batchFlattenPositionStr :\n                                                    flattenPositionStr) :\n                             `wR * ${effectiveFilterWidth} + wC`};\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `;\n      return;\n    }\n\n    const compareOp = 'max';\n\n    let returnValue = `${poolType}(${poolType}(${poolType}(` +\n        'minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])';\n    if (poolType === 'avg') {\n      returnValue = `avgValue / max(count, 1.0)`;\n    }\n\n    const filterWidthNearestVec4 = Math.floor(filterWidth / 4) * 4;\n    const filterWidthVec4Remainder = filterWidth % 4;\n\n    const updateSnippet = `\n      if (${isAvgPool}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = ${compareOp}(values, minMaxValue);\n      }\n    `;\n\n    this.userCode = `\n      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n      const float initializationValue = ${initializationValue};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= ${convInfo.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${initializationValue});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < ${effectiveFilterHeight};\n            wR += ${dilationHeight}) {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= ${convInfo.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${filterWidthNearestVec4}; wC += 4) {\n            int xC = xCCorner + wC * ${dilationWidth};\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${dilationWidth}, d),\n              getValue(batch, xR, xC + 2 * ${dilationWidth}, d),\n              getValue(batch, xR, xC + 3 * ${dilationWidth}, d)\n            );\n\n            ${updateSnippet}\n          }\n\n          int xC = xCCorner + ${filterWidthNearestVec4};\n          if (${filterWidthVec4Remainder === 1}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            ${updateSnippet}\n          } else if (${filterWidthVec4Remainder === 2}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${dilationWidth}, d),\n              initializationValue,\n              initializationValue\n            );\n\n            ${updateSnippet}\n          } else if (${filterWidthVec4Remainder === 3}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${dilationWidth}, d),\n              getValue(batch, xR, xC + 2 * ${dilationWidth}, d),\n              initializationValue\n            );\n\n            ${updateSnippet}\n          }\n        }\n        setOutput(${returnValue});\n      }\n    `;\n  }\n}\n\nexport class Pool3DProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      convInfo: backend_util.Conv3DInfo, poolType: 'max'|'avg',\n      computePositions: boolean, flattenPositions = false,\n      includeBatchInIndex = false) {\n    if (poolType === 'avg' && computePositions) {\n      throw new Error('Cannot compute positions for average pool.');\n    }\n\n    const filterWidth = convInfo.filterWidth;\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n\n    const padFront = convInfo.padInfo.front;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    this.outputShape = convInfo.outShape;\n\n    const isAvgPool = poolType === 'avg';\n\n    let initializationValue = '0.0';\n    if (!isAvgPool) {\n      // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\n      initializationValue = '-1.0 / 1e-20';\n    }\n\n    if (computePositions) {\n      const compareOp = '>=';\n\n      this.userCode = `\n        const ivec3 strides =\n            ivec3(${strideDepth}, ${strideHeight}, ${strideWidth});\n        const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < ${effectiveFilterDepth};\n              wD += ${dilationDepth}) {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= ${convInfo.inDepth}) {\n              continue;\n            }\n\n            for (int wR = 0; wR < ${effectiveFilterHeight};\n                wR += ${dilationHeight}) {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= ${convInfo.inHeight}) {\n                continue;\n              }\n\n              for (int wC = 0; wC < ${effectiveFilterWidth};\n                  wC += ${dilationWidth}) {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value ${compareOp} currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition = ${\n          flattenPositions ?\n              (includeBatchInIndex ?\n                   `(((batch * ${convInfo.inDepth} + xD) * ${\n                       convInfo.inHeight} + xR) * ${convInfo.inWidth} + xC) * ${\n                       convInfo.inChannels} + ch` :\n                   `((xD * ${convInfo.inHeight} + xR) * ${\n                       convInfo.inWidth} + xC) * ${convInfo.inChannels} + ch`) :\n              `wD * ${effectiveFilterHeight} * ${effectiveFilterWidth} +\n                      wR * ${effectiveFilterWidth} + wC`};\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `;\n      return;\n    }\n\n    const compareOp = 'max';\n\n    let returnValue = `${poolType}(${poolType}(${poolType}(` +\n        'minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])';\n    if (poolType === 'avg') {\n      // Use `max(count, 1.0)` instead of `count` in case count === 0.0.\n      // If count === 0.0, `avgValue` is always 0.0 and we change `count`'s\n      // value to avoid dividing zero.\n      returnValue = `avgValue / max(count, 1.0)`;\n    }\n\n    const filterWidthNearestVec4 = Math.floor(filterWidth / 4) * 4;\n    const filterWidthVec4Remainder = filterWidth % 4;\n\n    const updateSnippet = `\n      if (${isAvgPool}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = ${compareOp}(values, minMaxValue);\n      }\n    `;\n\n    this.userCode = `\n      const ivec3 strides =\n        ivec3(${strideDepth}, ${strideHeight}, ${strideWidth});\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n      const float initializationValue = ${initializationValue};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= ${convInfo.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${initializationValue});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < ${effectiveFilterDepth};\n            wD += ${dilationDepth}) {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= ${convInfo.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${effectiveFilterHeight};\n            wR += ${dilationHeight}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${filterWidthNearestVec4}; wC += 4) {\n              int xC = xCCorner + wC * ${dilationWidth};\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${dilationWidth}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${dilationWidth}, ch),\n                getValue(batch, xD, xR, xC + 3 * ${dilationWidth}, ch)\n              );\n\n              ${updateSnippet}\n            }\n\n            int xC = xCCorner + ${filterWidthNearestVec4};\n            if (${filterWidthVec4Remainder === 1}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              ${updateSnippet}\n            } else if (${filterWidthVec4Remainder === 2}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${dilationWidth}, ch),\n                initializationValue,\n                initializationValue\n              );\n\n              ${updateSnippet}\n            } else if (${filterWidthVec4Remainder === 3}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${dilationWidth}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${dilationWidth}, ch),\n                initializationValue\n              );\n\n              ${updateSnippet}\n            }\n          }\n        }\n        setOutput(${returnValue});\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {AvgPool, AvgPoolAttrs, AvgPoolInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Pool2DProgram} from '../pool_gpu';\nimport {assertNotComplex} from '../webgl_util';\nimport {identity} from './Identity';\n\nexport function avgPool(args: {\n  inputs: AvgPoolInputs,\n  backend: MathBackendWebGL,\n  attrs: AvgPoolAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  assertNotComplex(x, 'avgPool');\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n  const dilations = 1;\n\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, dilations),\n      () => 'Error in avgPool: Either strides or dilations must be 1. ' +\n          `Got strides ${strides} and dilations '${dilations}'`);\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode);\n  if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 &&\n      util.arraysEqual(convInfo.inShape, convInfo.outShape)) {\n    return identity({inputs: {x}, backend});\n  }\n  const avgPoolProgram = new Pool2DProgram(convInfo, 'avg', false);\n  return backend.runWebGLProgram(avgPoolProgram, [x], 'float32');\n}\n\nexport const avgPoolConfig: KernelConfig = {\n  kernelName: AvgPool,\n  backendName: 'webgl',\n  kernelFunc: avgPool as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {AvgPool3D, AvgPool3DAttrs, AvgPool3DInputs, backend_util, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Pool3DProgram} from '../pool_gpu';\n\nexport function avgPool3D(args: {\n  inputs: AvgPool3DInputs,\n  backend: MathBackendWebGL,\n  attrs: AvgPool3DAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {filterSize, strides, pad, dimRoundingMode, dataFormat} = attrs;\n  const dilations: [number, number, number] = [1, 1, 1];\n\n  const convInfo = backend_util.computePool3DInfo(\n      x.shape as [number, number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode, dataFormat);\n  const avgPoolProgram = new Pool3DProgram(convInfo, 'avg', false);\n  return backend.runWebGLProgram(avgPoolProgram, [x], 'float32');\n}\n\nexport const avgPool3DConfig: KernelConfig = {\n  kernelName: AvgPool3D,\n  backendName: 'webgl',\n  kernelFunc: avgPool3D as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class AvgPool2DBackpropProgram implements GPGPUProgram {\n  variableNames = ['dy'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.inShape;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n\n    const avgMultiplier = 1 / (filterHeight * filterWidth);\n\n    this.userCode = `\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n      const float avgMultiplier = float(${avgMultiplier});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${effectiveFilterHeight};\n            wR += ${dilationHeight}) {\n          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${effectiveFilterWidth};\n            wC+= ${dilationWidth}) {\n            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n\nexport class AvgPool3DBackpropProgram implements GPGPUProgram {\n  variableNames = ['dy'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv3DInfo) {\n    this.outputShape = convInfo.inShape;\n    const filterDepth = convInfo.filterDepth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n\n    const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n\n    const avgMultiplier = 1 / (filterDepth * filterHeight * filterWidth);\n\n    this.userCode = `\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n      const float avgMultiplier = float(${avgMultiplier});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${effectiveFilterDepth};\n            wD += ${dilationDepth}) {\n          float dyD = float(dyDCorner + wD) / ${strideDepth}.0;\n\n          if (dyD < 0.0 || dyD >= ${convInfo.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${effectiveFilterHeight};\n              wR += ${dilationHeight}) {\n            float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${effectiveFilterWidth};\n                wC += ${dilationWidth}) {\n              float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {AvgPool3DGrad, AvgPool3DGradAttrs, AvgPool3DGradInputs, backend_util, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {AvgPool3DBackpropProgram} from '../avg_pool_backprop_gpu';\nimport {MathBackendWebGL} from '../backend_webgl';\n\nexport function avgPool3DGrad(args: {\n  inputs: AvgPool3DGradInputs,\n  backend: MathBackendWebGL,\n  attrs: AvgPool3DGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input} = inputs;\n  const x = input;\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n  const dilations: [number, number, number] = [1, 1, 1];\n\n  const convInfo = backend_util.computePool3DInfo(\n      x.shape as [number, number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode);\n  const avgPoolBackpropProgram = new AvgPool3DBackpropProgram(convInfo);\n  return backend.runWebGLProgram(avgPoolBackpropProgram, [dy], x.dtype);\n}\n\nexport const avgPool3DGradConfig: KernelConfig = {\n  kernelName: AvgPool3DGrad,\n  backendName: 'webgl',\n  kernelFunc: avgPool3DGrad as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {AvgPoolGrad, AvgPoolGradAttrs, AvgPoolGradInputs, backend_util, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {AvgPool2DBackpropProgram} from '../avg_pool_backprop_gpu';\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {assertNotComplex} from '../webgl_util';\n\nexport function avgPoolGrad(args: {\n  inputs: AvgPoolGradInputs,\n  backend: MathBackendWebGL,\n  attrs: AvgPoolGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input} = inputs;\n  const x = input;\n  assertNotComplex([dy, input], 'avgPoolGrad');\n  const {filterSize, strides, pad} = attrs;\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      1 /* dilations */, pad);\n  const avgPoolBackpropProgram = new AvgPool2DBackpropProgram(convInfo);\n  return backend.runWebGLProgram(avgPoolBackpropProgram, [dy], x.dtype);\n}\n\nexport const avgPoolGradConfig: KernelConfig = {\n  kernelName: AvgPoolGrad,\n  backendName: 'webgl',\n  kernelFunc: avgPoolGrad as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {BatchMatMul, BatchMatMulAttrs, BatchMatMulInputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {batchMatMulImpl} from './BatchMatMul_impl';\n\nexport function batchMatMul(args: {\n  inputs: BatchMatMulInputs,\n  attrs: BatchMatMulAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {a, b} = inputs;\n  const {transposeA, transposeB} = attrs;\n\n  return batchMatMulImpl({a, b, transposeA, transposeB, backend});\n}\n\nexport const batchMatMulConfig: KernelConfig = {\n  kernelName: BatchMatMul,\n  backendName: 'webgl',\n  kernelFunc: batchMatMul as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class BatchNormProgram implements GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      xShape: number[], meanShape: number[], varianceShape: number[],\n      offsetShape: number[]|null, scaleShape: number[]|null,\n      varianceEpsilon: number) {\n    this.variableNames = ['x', 'mean', 'variance'];\n    backend_util.assertAndGetBroadcastShape(xShape, meanShape);\n    backend_util.assertAndGetBroadcastShape(xShape, varianceShape);\n\n    let offsetSnippet = '0.0';\n    if (offsetShape != null) {\n      backend_util.assertAndGetBroadcastShape(xShape, offsetShape);\n      this.variableNames.push('offset');\n      offsetSnippet = 'getOffsetAtOutCoords()';\n    }\n\n    let scaleSnippet = '1.0';\n    if (scaleShape != null) {\n      backend_util.assertAndGetBroadcastShape(xShape, scaleShape);\n      this.variableNames.push('scale');\n      scaleSnippet = 'getScaleAtOutCoords()';\n    }\n\n    this.outputShape = xShape;\n    this.userCode = `\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = ${offsetSnippet};\n        float scale = ${scaleSnippet};\n        float inv = scale * inversesqrt(variance + float(${varianceEpsilon}));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class BatchNormPackedProgram implements GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[];\n  userCode: string;\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(\n      xShape: number[], meanShape: number[], varianceShape: number[],\n      offsetShape: number[]|null, scaleShape: number[]|null,\n      varianceEpsilon: number) {\n    this.variableNames = ['x', 'mean', 'variance'];\n    backend_util.assertAndGetBroadcastShape(xShape, meanShape);\n    backend_util.assertAndGetBroadcastShape(xShape, varianceShape);\n\n    let offsetSnippet = 'vec4(0.0)';\n    if (offsetShape != null) {\n      backend_util.assertAndGetBroadcastShape(xShape, offsetShape);\n      this.variableNames.push('offset');\n      offsetSnippet = 'getOffsetAtOutCoords()';\n    }\n\n    let scaleSnippet = 'vec4(1.0)';\n    if (scaleShape != null) {\n      backend_util.assertAndGetBroadcastShape(xShape, scaleShape);\n      this.variableNames.push('scale');\n      scaleSnippet = 'getScaleAtOutCoords()';\n    }\n\n    this.outputShape = xShape;\n    this.userCode = `\n      void main() {\n        vec4 offset = ${offsetSnippet};\n        vec4 scale = ${scaleSnippet};\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(${varianceEpsilon}));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    `;\n  }\n}\n","\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, FusedBatchNorm, FusedBatchNormAttrs, FusedBatchNormInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {BatchNormProgram} from '../batchnorm_gpu';\nimport {BatchNormPackedProgram} from '../batchnorm_packed_gpu';\n\nexport const batchNorm: (params: {\n  inputs: FusedBatchNormInputs,\n  backend: MathBackendWebGL,\n  attrs: FusedBatchNormAttrs\n}) => TensorInfo = ({inputs, backend, attrs}) => {\n  const {x, mean, variance, offset, scale} = inputs;\n\n  util.assert(\n      mean.shape.length === variance.shape.length,\n      () => 'Batch normalization gradient requires mean and variance to have ' +\n          'equal ranks.');\n  util.assert(\n      offset == null || mean.shape.length === offset.shape.length,\n      () => 'Batch normalization gradient requires mean and offset to have ' +\n          'equal ranks.');\n  util.assert(\n      scale == null || mean.shape.length === scale.shape.length,\n      () => 'Batch normalization gradient requires mean and scale to have ' +\n          'equal ranks.');\n\n  let {varianceEpsilon} = attrs;\n  if (varianceEpsilon == null) {\n    varianceEpsilon = 0.001;\n  }\n\n  const finalInputs = [x, mean, variance];\n\n  let offsetShape = null;\n  if (offset != null) {\n    offsetShape = offset.shape;\n    finalInputs.push(offset);\n  }\n\n  let scaleShape = null;\n  if (scale != null) {\n    scaleShape = scale.shape;\n    finalInputs.push(scale);\n  }\n\n  const program = env().getBool('WEBGL_PACK_NORMALIZATION') ?\n      new BatchNormPackedProgram(\n          x.shape, mean.shape, variance.shape, offsetShape, scaleShape,\n          varianceEpsilon) :\n      new BatchNormProgram(\n          x.shape, mean.shape, variance.shape, offsetShape, scaleShape,\n          varianceEpsilon);\n  const output =\n      backend.runWebGLProgram(program, finalInputs, finalInputs[0].dtype);\n\n  return output;\n};\n\nexport const batchNormConfig: KernelConfig = {\n  kernelName: FusedBatchNorm,\n  backendName: 'webgl',\n  kernelFunc: batchNorm as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType, UniformType} from './shader_compiler';\n\nexport class SliceProgram implements GPGPUProgram {\n  variableNames = ['source'];\n  outputShape: number[];\n  userCode: string;\n  rank: number;\n  customUniforms: Array<{name: string; arrayIndex: number; type: UniformType;}>;\n\n  constructor(destSize: number[]) {\n    this.outputShape = destSize;\n    this.rank = destSize.length;\n\n    const dtype = getCoordsDataType(this.rank);\n    this.customUniforms = [{name: 'start', arrayIndex: this.rank, type: 'int'}];\n    const sourceCoords = getCoords(this.rank);\n\n    let body: string;\n    const coordSum = destSize.map((_, i) => {\n      return `sourceLoc.${coords[i]} = start[${i}] + coords.${coords[i]};`;\n    });\n    body = `\n        ${dtype} sourceLoc;\n        ${dtype} coords = getOutputCoords();\n        ${coordSum.join('\\n')}\n      `;\n    this.userCode = `\n      void main() {\n        ${body}\n        setOutput(getSource(${sourceCoords}));\n      }\n    `;\n  }\n}\n\nconst coords = ['x', 'y', 'z', 'w', 'u', 'v'];\n\nfunction getCoords(rank: number): string {\n  if (rank === 1) {\n    return 'sourceLoc';\n  } else if (rank <= 6) {\n    return coords.slice(0, rank).map(x => 'sourceLoc.' + x).join(',');\n  } else {\n    throw Error(`Slicing for rank ${rank} is not yet supported`);\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType, UniformType} from './shader_compiler';\n\nexport class SlicePackedProgram implements GPGPUProgram {\n  variableNames = ['source'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n  rank: number;\n  customUniforms: Array<{name: string; arrayIndex: number; type: UniformType;}>;\n\n  constructor(destSize: number[]) {\n    this.outputShape = destSize;\n    this.rank = destSize.length;\n    this.customUniforms = [{name: 'start', arrayIndex: this.rank, type: 'int'}];\n    const dtype = getCoordsDataType(this.rank);\n    const coords = getChannels('coords', this.rank);\n    const sourceLoc = getChannels('sourceLoc', this.rank);\n\n    const innerDims =\n        this.rank === 1 ? 'sourceLoc' : `vec2(${sourceLoc.slice(-2).join()})`;\n    const getChannel =\n        `getChannel(getSource(${sourceLoc.join()}), ${innerDims})`;\n    const upperRow = `\n      result.x = ${getChannel};\n      if (++${coords[this.rank - 1]} < ${destSize[this.rank - 1]}) {\n        ++${sourceLoc[this.rank - 1]};\n        result.y = ${getChannel};\n        --${sourceLoc[this.rank - 1]};\n      }\n    `;\n    const lowerRow = this.rank === 1 ? '' : `\n      --${coords[this.rank - 1]};\n      if (++${coords[this.rank - 2]} < ${destSize[this.rank - 2]}) {\n        ++${sourceLoc[this.rank - 2]};\n        result.z = ${getChannel};\n        if (++${coords[this.rank - 1]} < ${destSize[this.rank - 1]}) {\n          ++${sourceLoc[this.rank - 1]};\n          result.w = ${getChannel};\n        }\n      }\n    `;\n\n    const sourceLocSetup = this.rank <= 4 ?\n        `sourceLoc = coords +\n            ${dtype}(${destSize.map((_, i) => `start[${i}]`).join()});` :\n        destSize.map((_, i) => `${sourceLoc[i]} = ${coords[i]} + start[${i}];`)\n            .join('\\n');\n    this.userCode = `\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        ${dtype} sourceLoc;\n        ${sourceLocSetup}\n        vec4 result = vec4(0.);\n        ${upperRow}\n        ${lowerRow}\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, Slice, slice_util, SliceAttrs, SliceInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {sliceImplCPU} from '../kernel_utils/shared';\nimport {SliceProgram} from '../slice_gpu';\nimport {SlicePackedProgram} from '../slice_packed_gpu';\n\nfunction shallowSlice(\n    x: TensorInfo, begin: number[], size: number[], backend: MathBackendWebGL) {\n  const xTexData = backend.texData.get(x.dataId);\n  const t = backend.makeTensorInfo(size, x.dtype);\n  const newTexData = backend.texData.get(t.dataId);\n  // Copy texture data from the original tensor.\n  Object.assign(newTexData, xTexData);\n  newTexData.refCount = 1;\n  newTexData.shape = size;\n  newTexData.dtype = x.dtype;\n  let flatOffset =\n      slice_util.computeFlatOffset(begin, util.computeStrides(x.shape));\n  if (xTexData.slice) {\n    // We are slicing an already sliced tensor, so we have to accumulate\n    // the offset.\n    flatOffset += xTexData.slice.flatOffset;\n  }\n  newTexData.slice = {\n    flatOffset,\n    // Point to the original dataId, which is used to do ref counting.\n    origDataId: xTexData.slice && xTexData.slice.origDataId || x.dataId\n  };\n\n  // Increase the ref count for that data bucket.\n  const refCount = backend.dataRefCount.get(newTexData.slice.origDataId) || 1;\n  backend.dataRefCount.set(newTexData.slice.origDataId, refCount + 1);\n  return t;\n}\n\nexport function slice(\n    args: {inputs: SliceInputs, backend: MathBackendWebGL, attrs: SliceAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {begin, size} = attrs;\n\n  const [$begin, $size] = slice_util.parseSliceParams(x, begin, size);\n  slice_util.assertParamsValid(x, $begin, $size);\n\n  if (util.sizeFromShape($size) === 0) {\n    return backend.makeTensorInfo($size, x.dtype, []);\n  }\n\n  // Run on cpu if dtype is string. For string, the backend represents it\n  // as Uint8Array[], where each Uint8Array is a character. Given that the\n  // computation is only on the outer array, uploading the whole data onto\n  // gpu is wasteful. Also, currently webgl doesn't have a design to\n  // upload and retrieve Uint8Array[] between cpu and gpu. Therefore, we\n  // just run the kernel on cpu if dtype is string.\n  if (backend.shouldExecuteOnCPU([x]) || x.dtype === 'string') {\n    const xTexData = backend.texData.get(x.dataId);\n    const outValues = sliceImplCPU(\n        xTexData.values as TypedArray, $begin, $size, x.shape, x.dtype);\n    return backend.makeTensorInfo($size, x.dtype, outValues);\n  }\n\n  const {isPacked} = backend.texData.get(x.dataId);\n  const isContinous = slice_util.isSliceContinous(x.shape, $begin, $size);\n  if (isPacked || !isContinous) {\n    const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?\n        new SlicePackedProgram($size) :\n        new SliceProgram($size);\n    const customValues = [$begin];\n    return backend.runWebGLProgram(program, [x], x.dtype, customValues);\n  }\n  backend.uploadToGPU(x.dataId);\n  return shallowSlice(x, $begin, $size, backend);\n}\n\nexport const sliceConfig: KernelConfig = {\n  kernelName: Slice,\n  backendName: 'webgl',\n  kernelFunc: slice as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BatchToSpaceND, BatchToSpaceNDAttrs, BatchToSpaceNDInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\nimport {transpose} from './Transpose';\n\nexport const batchToSpaceND = (args: {\n  inputs: BatchToSpaceNDInputs,\n  backend: MathBackendWebGL,\n  attrs: BatchToSpaceNDAttrs\n}): TensorInfo => {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {blockShape, crops} = attrs;\n\n  util.assert(\n      x.shape.length <= 4,\n      () => 'batchToSpaceND for rank > 4 with a WebGL backend not ' +\n          'implemented yet');\n  const prod = blockShape.reduce((a, b) => a * b);\n\n  const reshaped = backend_util.getReshaped(x.shape, blockShape, prod);\n  const permuted = backend_util.getPermuted(reshaped.length, blockShape.length);\n  const reshapedPermuted =\n      backend_util.getReshapedPermuted(x.shape, blockShape, prod);\n  const sliceBeginCoords =\n      backend_util.getSliceBeginCoords(crops, blockShape.length);\n  const sliceSize =\n      backend_util.getSliceSize(reshapedPermuted, crops, blockShape.length);\n\n  const toDispose = [];\n\n  const reshapedIntermediate =\n      reshape({inputs: {x}, backend, attrs: {shape: reshaped}});\n  const transposedIntermediate = transpose(\n      {inputs: {x: reshapedIntermediate}, backend, attrs: {perm: permuted}});\n  const reshapedIntermediate2 = reshape({\n    inputs: {x: transposedIntermediate},\n    backend,\n    attrs: {shape: reshapedPermuted}\n  });\n  const sliced = slice({\n    inputs: {x: reshapedIntermediate2},\n    backend,\n    attrs: {begin: sliceBeginCoords, size: sliceSize}\n  });\n\n  toDispose.push(reshapedIntermediate);\n  toDispose.push(transposedIntermediate);\n  toDispose.push(reshapedIntermediate2);\n\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return sliced;\n};\n\nexport const batchToSpaceNDConfig: KernelConfig = {\n  kernelName: BatchToSpaceND,\n  backendName: 'webgl',\n  kernelFunc: batchToSpaceND as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Bincount, BincountAttrs, BincountInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {bincountImplCPU} from '../kernel_utils/shared';\n\nexport function bincount(args: {\n  inputs: BincountInputs,\n  backend: MathBackendWebGL,\n  attrs: BincountAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, weights} = inputs;\n  const {size} = attrs;\n\n  const xVals = backend.readSync(x.dataId) as TypedArray;\n  const weightsVals = backend.readSync(weights.dataId) as TypedArray;\n\n  const outVals =\n      bincountImplCPU(xVals, weightsVals, weights.dtype, weights.shape, size);\n\n  return backend.makeTensorInfo([size], weights.dtype, outVals);\n}\n\nexport const bincountConfig: KernelConfig = {\n  kernelName: Bincount,\n  backendName: 'webgl',\n  kernelFunc: bincount as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BroadcastArgs, BroadcastArgsInputs, KernelConfig, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\nimport {MathBackendWebGL} from '../backend_webgl';\n\nexport function broadcastArgs(args: {\n  inputs: BroadcastArgsInputs,\n  backend: MathBackendWebGL,\n}): TensorInfo {\n  const {inputs, backend} = args;\n  const {s0, s1} = inputs;\n\n  const s0Vals = backend.readSync(s0.dataId) as TypedArray;\n  const s1Vals = backend.readSync(s1.dataId) as TypedArray;\n\n  const broadcastShape = backend_util.assertAndGetBroadcastShape(\n      Array.from(s0Vals), Array.from(s1Vals));\n\n  return backend.makeTensorInfo(\n      [broadcastShape.length], 'int32', Int32Array.from(broadcastShape));\n}\n\nexport const broadcastArgsConfig: KernelConfig = {\n  kernelName: BroadcastArgs,\n  backendName: 'webgl',\n  kernelFunc: broadcastArgs\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {NotEqual} from '@tensorflow/tfjs-core';\nimport {KernelConfig} from '@tensorflow/tfjs-core';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {notEqualImplCPU} from '../kernel_utils/shared';\n\nconst NOT_EQUAL = `return float(a != b);`;\n\nexport const notEqual = binaryKernelFunc(\n    {opSnippet: NOT_EQUAL, cpuKernelImpl: notEqualImplCPU, dtype: 'bool'});\n\nexport const notEqualConfig: KernelConfig = {\n  kernelName: NotEqual,\n  backendName: 'webgl',\n  kernelFunc: notEqual,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Real, RealInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {identity} from './Identity';\n\nexport function real(args: {inputs: RealInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n  const inputData = backend.texData.get(input.dataId);\n\n  return identity({inputs: {x: inputData.complexTensorInfos.real}, backend});\n}\n\nexport const realConfig: KernelConfig = {\n  kernelName: Real,\n  backendName: 'webgl',\n  kernelFunc: real as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as tf from '@tensorflow/tfjs-core';\nimport {BinaryInputs, Cast, CastAttrs, CastInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {castImplCPU} from '../kernel_utils/shared';\nimport {complex} from './Complex';\nimport {identity} from './Identity';\nimport {notEqual} from './NotEqual';\nimport {real} from './Real';\n\nimport {int} from '../kernel_utils/int';\n\nexport function cast(\n    args: {inputs: CastInputs, backend: MathBackendWebGL, attrs: CastAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {dtype} = attrs;\n\n  // Casting to complex64.\n  if (dtype === 'complex64') {\n    if (x.dtype === 'complex64') {\n      return identity({inputs: {x}, backend});\n    }\n\n    // TODO(annxingyuan): Import kernel function once zeros is modularized.\n    const zerosTensor = tf.zeros(x.shape);\n    const floatX = cast({inputs: {x}, backend, attrs: {dtype: 'float32'}});\n\n    const result =\n        complex({inputs: {real: floatX, imag: zerosTensor}, backend});\n\n    zerosTensor.dispose();\n    backend.disposeIntermediateTensorInfo(floatX);\n\n    return result;\n  }\n\n  // Casting from complex64\n  if (x.dtype === 'complex64') {\n    const realPart = real({inputs: {input: x}, backend});\n    const result = cast({inputs: {x: realPart}, backend, attrs: {dtype}});\n    backend.disposeIntermediateTensorInfo(realPart);\n    return result;\n  }\n\n  if (!util.hasEncodingLoss(x.dtype, dtype)) {\n    // We don't change the underlying data, since we cast to higher\n    // precision.\n    const result = identity({inputs: {x}, backend});\n    return {dataId: result.dataId, shape: result.shape, dtype};\n  }\n\n  if (backend.shouldExecuteOnCPU([x])) {\n    const values = backend.texData.get(x.dataId).values as TypedArray;\n    const [resultShape, resultType, resultData] =\n        castImplCPU(values, x.shape, x.dtype, dtype);\n    return backend.makeTensorInfo(resultShape, resultType, resultData);\n  }\n\n  if (dtype === 'int32') {\n    return int(x, backend);\n  }\n\n  if (dtype === 'bool') {\n    const zerosTensorInfo = backend.makeTensorInfo(\n        [], 'bool', util.getTypedArrayFromDType('bool', 1));\n\n    const binaryInputs: BinaryInputs = {a: x, b: zerosTensorInfo};\n\n    const result = notEqual({inputs: binaryInputs, backend}) as TensorInfo;\n    backend.disposeIntermediateTensorInfo(zerosTensorInfo);\n    return result;\n  }\n\n  throw new Error(`Error in Cast: failed to cast ${x.dtype} to ${dtype}`);\n}\n\nexport const castConfig: KernelConfig = {\n  kernelName: Cast,\n  backendName: 'webgl',\n  kernelFunc: cast as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {UnaryOpProgram} from '../unaryop_gpu';\n\nconst TO_INT = `return float(int(x));`;\n\nexport function int(input: TensorInfo, backend: MathBackendWebGL): TensorInfo {\n  const program = new UnaryOpProgram(input.shape, TO_INT);\n  const output = backend.runWebGLProgram(program, [input], 'int32');\n  return {dataId: output.dataId, shape: output.shape, dtype: output.dtype};\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Ceil, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {ceilImplCPU} from '../kernel_utils/shared';\n\nconst CEIL = `return ceil(x);`;\n\nexport const ceil = unaryKernelFunc(\n    {opSnippet: CEIL, packedOpSnippet: CEIL, cpuKernelImpl: ceilImplCPU});\n\nexport const ceilConfig: KernelConfig = {\n  kernelName: Ceil,\n  backendName: 'webgl',\n  kernelFunc: ceil as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {UniformType} from './shader_compiler';\n\nexport class ClipProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n  customUniforms = [\n    {name: 'minVal', type: 'float' as UniformType},\n    {name: 'maxVal', type: 'float' as UniformType}\n  ];\n\n  constructor(aShape: number[]) {\n    this.outputShape = aShape;\n    this.userCode = `\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {UniformType} from './shader_compiler';\n\nexport class ClipPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  packedInputs = true;\n  packedOutput = true;\n  userCode: string;\n  outputShape: number[];\n  customUniforms = [\n    {name: 'minVal', type: 'float' as UniformType},\n    {name: 'maxVal', type: 'float' as UniformType}\n  ];\n\n  constructor(aShape: number[]) {\n    this.outputShape = aShape;\n    this.userCode = `\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ClipByValue, ClipByValueAttrs, ClipByValueInputs, env, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ClipProgram} from '../clip_gpu';\nimport {ClipPackedProgram} from '../clip_packed_gpu';\n\nexport function clipByValue(args: {\n  inputs: ClipByValueInputs,\n  backend: MathBackendWebGL,\n  attrs: ClipByValueAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {clipValueMin, clipValueMax} = attrs;\n\n  let program;\n  if (env().getBool('WEBGL_PACK_CLIP')) {\n    program = new ClipPackedProgram(x.shape);\n  } else {\n    program = new ClipProgram(x.shape);\n  }\n  const customValues = [[clipValueMin], [clipValueMax]];\n  return backend.runWebGLProgram(program, [x], x.dtype, customValues);\n}\n\nexport const clipByValueConfig: KernelConfig = {\n  kernelName: ClipByValue,\n  backendName: 'webgl',\n  kernelFunc: clipByValue as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ComplexAbsProgram implements GPGPUProgram {\n  variableNames = ['real', 'imag'];\n  userCode: string;\n  outputShape: number[];\n\n  constructor(shape: number[]) {\n    this.outputShape = shape;\n    this.userCode = `\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ComplexAbs, ComplexAbsInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ComplexAbsProgram} from '../complex_abs_gpu';\n\n// Returns a TensorInfo with the complex shape and the dataId of the\n// underlying part. We need to do this because a reshaped complex tensor is\n// not reflected in its parts.\nfunction makeComplexComponentTensorInfo(\n    complexTensor: TensorInfo, complexPart: TensorInfo): TensorInfo {\n  return {\n    dataId: complexPart.dataId,\n    dtype: complexPart.dtype,\n    shape: complexTensor.shape\n  };\n}\n\nexport function complexAbs(\n    args: {inputs: ComplexAbsInputs, backend: MathBackendWebGL}): TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  const xData = backend.texData.get(x.dataId);\n\n  const program = new ComplexAbsProgram(x.shape);\n  const programInputs = [\n    makeComplexComponentTensorInfo(x, xData.complexTensorInfos.real),\n    makeComplexComponentTensorInfo(x, xData.complexTensorInfos.imag),\n  ];\n\n  return backend.runWebGLProgram(\n      program, programInputs, programInputs[0].dtype);\n}\n\nexport const complexAbsConfig: KernelConfig = {\n  kernelName: ComplexAbs,\n  backendName: 'webgl',\n  kernelFunc: complexAbs as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ConcatProgram implements GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[] = [];\n  userCode: string;\n\n  // Concats 2d tensors along axis=1. See comments in MathBackendWebGL.concat().\n  constructor(shapes: Array<[number, number]>) {\n    this.outputShape = backend_util.computeOutShape(shapes, 1 /* axis */);\n    this.variableNames = shapes.map((_, i) => `T${i}`);\n\n    const offsets: number[] = new Array(shapes.length - 1);\n    offsets[0] = shapes[0][1];\n    for (let i = 1; i < offsets.length; i++) {\n      offsets[i] = offsets[i - 1] + shapes[i][1];\n    }\n\n    const snippets = [`if (yC < ${offsets[0]}) setOutput(getT0(yR, yC));`];\n    for (let i = 1; i < offsets.length; i++) {\n      const shift = offsets[i - 1];\n      snippets.push(\n          `else if (yC < ${offsets[i]}) ` +\n          `setOutput(getT${i}(yR, yC-${shift}));`);\n    }\n    const lastIndex = offsets.length;\n    const lastShift = offsets[offsets.length - 1];\n    snippets.push(`else setOutput(getT${lastIndex}(yR, yC-${lastShift}));`);\n\n    this.userCode = `\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        ${snippets.join('\\n        ')}\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class ConcatPackedProgram implements GPGPUProgram {\n  variableNames: string[];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(shapes: number[][], axis: number) {\n    this.outputShape = backend_util.computeOutShape(shapes, axis);\n    const shape = this.outputShape;\n    const rank = shape.length;\n    const dtype = getCoordsDataType(rank);\n    const coords = getChannels('coords', rank);\n    const channels = ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, rank);\n    this.variableNames = shapes.map((_, i) => `T${i}`);\n\n    const offsets: number[] = new Array(shapes.length - 1);\n    offsets[0] = shapes[0][axis];\n    for (let i = 1; i < offsets.length; i++) {\n      offsets[i] = offsets[i - 1] + shapes[i][axis];\n    }\n\n    const channel = channels[axis];\n    const lastChannels = channels.slice(-2);\n    const allChannels = channels.join();\n\n    let getValueSnippet = `if (${channel} < ${offsets[0]}) {\n        return getChannel(\n            getT0(${allChannels}), vec2(${lastChannels.join()}));\n        }`;\n    for (let i = 1; i < offsets.length; i++) {\n      const shift = offsets[i - 1];\n      // Note: the >= comparison below may seem unnecessary given the check\n      // above but is needed to workaround branch execution issues on some\n      // devices. It makes all the conditions exclusive without relying on\n      // execution order.\n      getValueSnippet += `\n        if (${channel} < ${offsets[i]}  && ${channel} >= ${offsets[i - 1]}) {\n          return getChannel(\n            getT${i}(${shiftedChannels(channels, channel, shift)}),\n            vec2(${shiftedChannels(lastChannels, channel, shift)}));\n        }`;\n    }\n    const lastIndex = offsets.length;\n    const shift = offsets[offsets.length - 1];\n    getValueSnippet += `\n        return getChannel(\n          getT${lastIndex}(${shiftedChannels(channels, channel, shift)}),\n          vec2(${shiftedChannels(lastChannels, channel, shift)}));`;\n\n    this.userCode = `\n      float getValue(${channels.map(x => 'int ' + x)}) {\n        ${getValueSnippet}\n      }\n\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        vec4 result = vec4(getValue(${coords}), 0., 0., 0.);\n\n        ${coords[rank - 1]} = ${coords[rank - 1]} + 1;\n        if (${coords[rank - 1]} < ${shape[rank - 1]}) {\n          result.g = getValue(${coords});\n        }\n\n        ${coords[rank - 2]} = ${coords[rank - 2]} + 1;\n        if (${coords[rank - 2]} < ${shape[rank - 2]}) {\n          result.a = getValue(${coords});\n        }\n\n        ${coords[rank - 1]} = ${coords[rank - 1]} - 1;\n        if (${coords[rank - 2]} < ${shape[rank - 2]} &&\n            ${coords[rank - 1]} < ${shape[rank - 1]}) {\n          result.b = getValue(${coords});\n        }\n        setOutput(result);\n      }\n    `;\n  }\n}\n\n/**\n * Return an expression for coordinates into a vector where a given channel\n * will be offset by [shift].\n *\n * @param channels the channels to consider\n * @param channel the channel we want shifted\n * @param shift  the amount to subtract from the channel.\n *\n * @returns a string of the form 'x, y-[shift], z' where any one channel can\n * have the shift applied.\n */\nfunction shiftedChannels(channels: string[], channel: string, shift: number) {\n  const channelIdx = channels.indexOf(channel);\n  const res = channels.map((c, idx) => {\n    if (idx === channelIdx) {\n      return `${c} - ${shift}`;\n    } else {\n      return c;\n    }\n  });\n  return res.join();\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Imag, ImagInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {identity} from './Identity';\n\nexport function imag(args: {inputs: ImagInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n  const inputData = backend.texData.get(input.dataId);\n\n  return identity({inputs: {x: inputData.complexTensorInfos.imag}, backend});\n}\n\nexport const imagConfig: KernelConfig = {\n  kernelName: Imag,\n  backendName: 'webgl',\n  kernelFunc: imag as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, ConcatInputs, env, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ConcatProgram} from '../concat_gpu';\nimport {ConcatPackedProgram} from '../concat_packed_gpu';\nimport {concatImplCPU} from '../kernel_utils/shared';\nimport {CLONE, UnaryOpProgram} from '../unaryop_gpu';\nimport {UnaryOpPackedProgram} from '../unaryop_packed_gpu';\n\nimport {complex} from './Complex';\nimport {imag} from './Imag';\nimport {real} from './Real';\nimport {reshape} from './Reshape';\n\nexport function concatImpl(\n    inputs: ConcatInputs, axis: number, backend: MathBackendWebGL): TensorInfo {\n  const dtype = inputs[0].dtype;\n  if (dtype === 'complex64') {\n    const reals = inputs.map((t) => real({inputs: {input: t}, backend}));\n    const imags = inputs.map((t) => imag({inputs: {input: t}, backend}));\n\n    const realConcated = concatImpl(reals, axis, backend);\n    const imagConcated = concatImpl(imags, axis, backend);\n\n    const result =\n        complex({inputs: {real: realConcated, imag: imagConcated}, backend});\n\n    reals.forEach(r => backend.disposeIntermediateTensorInfo(r));\n    imags.forEach(i => backend.disposeIntermediateTensorInfo(i));\n    backend.disposeIntermediateTensorInfo(realConcated);\n    backend.disposeIntermediateTensorInfo(imagConcated);\n\n    return result;\n  }\n\n  let runOnCpu = backend.shouldExecuteOnCPU(inputs);\n\n  // Run on cpu if dtype is string. For string, the backend represents it\n  // as Uint8Array[], where each Uint8Array is a character. Given that the\n  // computation is only on the outer array, uploading the whole data onto\n  // gpu is wasteful. Also, currently webgl doesn't have a design to\n  // upload and retrieve Uint8Array[] between cpu and gpu. Therefore, we\n  // just run the kernel on cpu if dtype is string.\n  if (dtype === 'string') {\n    runOnCpu = true;\n  }\n\n  if (runOnCpu) {\n    // Any concat of n-dimensional tensors across any axis can be reduced to\n    // a concatenation of two-dimensional tensors across the axis 1 by first\n    // partitioning the axes of the original tensors into those less than the\n    // axis to be concatenated and the rest. Then reshape the tensors\n    // into a two-dimensional tensor by collapsing these two sets of axes and\n    // concatenate the resulting matrices across the axis 1, finally reshaping\n    // the result to have the proper shape.\n    const tensors2D = inputs.map(t => {\n      const innerSize = util.sizeFromShape(t.shape.slice(axis));\n      const shape = [-1, innerSize];\n      return reshape({inputs: {x: t}, backend, attrs: {shape}});\n    });\n\n    const inputsValShapes = tensors2D.map(t => {\n      return {vals: backend.readSync(t.dataId), shape: t.shape};\n    });\n\n    // Concats 2d tensors along axis=1.\n    const outShape =\n        backend_util.computeOutShape(tensors2D.map(t => t.shape), 1 /* axis */);\n    const simplyConcat = tensors2D[0].shape[0] === 1;\n    const outVals =\n        concatImplCPU(inputsValShapes, outShape, dtype, simplyConcat);\n\n    const finalOutShape =\n        backend_util.computeOutShape(inputs.map(t => t.shape), axis);\n\n    const outInfo = backend.makeTensorInfo(finalOutShape, dtype, outVals);\n\n    tensors2D.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n    return outInfo;\n  }\n\n  // Keep only non-empty tensors (ignore tensors with 0 in their shape).\n  const $inputs = inputs.filter(t => util.sizeFromShape(t.shape) > 0);\n\n  const shouldPack: boolean = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') &&\n      $inputs[0].shape.length > 1;\n\n  if ($inputs.length === 1) {\n    // Clone tensor.\n    const program = shouldPack ?\n        new UnaryOpProgram(inputs[0].shape, CLONE) :\n        new UnaryOpPackedProgram(inputs[0].shape, CLONE);\n    return backend.runWebGLProgram(program, inputs, dtype);\n  }\n\n  const maxTexturesInShader = env().getNumber('WEBGL_MAX_TEXTURES_IN_SHADER');\n  if ($inputs.length > maxTexturesInShader) {\n    const reducedInputs = [];\n    for (let i = 0; i < $inputs.length; i += maxTexturesInShader) {\n      const subArray = $inputs.slice(i, i + maxTexturesInShader);\n      reducedInputs.push(concatImpl(subArray, axis, backend));\n    }\n    const result = concatImpl(reducedInputs, axis, backend);\n\n    for (const i of reducedInputs) {\n      backend.disposeIntermediateTensorInfo(i);\n    }\n\n    return result;\n  }\n\n  if (shouldPack) {\n    const program = new ConcatPackedProgram($inputs.map(t => t.shape), axis);\n    return backend.runWebGLProgram(program, $inputs, dtype);\n  }\n\n  const {tensors2D, outShape} = computeTensors2D($inputs, axis, backend);\n  const program =\n      new ConcatProgram(tensors2D.map(t => t.shape as [number, number]));\n  const result = backend.runWebGLProgram(program, tensors2D, dtype);\n\n  tensors2D.forEach(r => backend.disposeIntermediateTensorInfo(r));\n  const reshapedResult =\n      reshape({inputs: {x: result}, attrs: {shape: outShape}, backend});\n  backend.disposeIntermediateTensorInfo(result);\n\n  return reshapedResult;\n}\n\nfunction computeTensors2D(\n    inputs: ConcatInputs, axis: number, backend: MathBackendWebGL) {\n  // Any concat of n-dimensional tensors across any axis can be reduced to\n  // a concatenation of two-dimensional tensors across the axis 1 by first\n  // partitioning the axes of the original tensors into those less than the\n  // axis to be concatenated and the rest. Then reshape the tensors\n  // into a two-dimensional tensor by collapsing these two sets of axes and\n  // concatenate the resulting matrices across the axis 1, finally reshaping\n  // the result to have the proper shape.\n  const outShape = backend_util.computeOutShape(inputs.map(t => t.shape), axis);\n  const tensors2D = inputs.map(\n      x => reshape({\n        inputs: {x},\n        attrs: {shape: [-1, util.sizeFromShape(x.shape.slice(axis))]},\n        backend\n      }));\n\n  return {tensors2D, outShape};\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Concat, ConcatAttrs, ConcatInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {concatImpl} from './Concat_impl';\nimport {identity} from './Identity';\n\nexport function concat(\n    args:\n        {inputs: ConcatInputs, attrs: ConcatAttrs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {axis} = attrs;\n\n  const $axis = util.parseAxisParam(axis, inputs[0].shape)[0];\n\n  const shapes = inputs.map(t => t.shape);\n  backend_util.assertParamsConsistent(shapes, $axis);\n\n  const outShape =\n      backend_util.computeOutShape(inputs.map(t => t.shape), $axis);\n\n  if (util.sizeFromShape(outShape) === 0) {\n    return backend.makeTensorInfo(outShape, inputs[0].dtype, []);\n  }\n\n  // Keep only non-empty tensors (ignore tensors with 0 in their shape).\n  const $inputs = inputs.filter(t => util.sizeFromShape(t.shape) > 0);\n  if ($inputs.length === 1) {\n    return identity({inputs: {x: $inputs[0]}, backend});\n  }\n\n  return concatImpl($inputs, $axis, backend);\n}\n\nexport const concatConfig: KernelConfig = {\n  kernelName: Concat,\n  backendName: 'webgl',\n  kernelFunc: concat as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class Conv2DProgram implements GPGPUProgram {\n  variableNames = ['x', 'W'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      convInfo: backend_util.Conv2DInfo, addBias = false,\n      activation: string = null, hasPreluActivationWeights = false,\n      hasLeakyreluAlpha = false) {\n    this.outputShape = convInfo.outShape;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n\n    const inputDepthNearestVec4 = Math.floor(convInfo.inChannels / 4) * 4;\n    const inputDepthVec4Remainder = convInfo.inChannels % 4;\n    const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n\n    const rowDim = isChannelsLast ? 1 : 2;\n    const colDim = isChannelsLast ? 2 : 3;\n    const channelDim = isChannelsLast ? 3 : 1;\n\n    let activationSnippet = '', applyActivationSnippet = '';\n    if (activation) {\n      if (hasPreluActivationWeights) {\n        activationSnippet = `float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${activation}\n        }`;\n      } else if (hasLeakyreluAlpha) {\n        activationSnippet = `float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${activation}\n        }`;\n      } else {\n        activationSnippet = `\n          float activation(float x) {\n            ${activation}\n          }\n        `;\n      }\n\n      applyActivationSnippet = `result = activation(result);`;\n    }\n\n    const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n\n    if (hasPreluActivationWeights) {\n      this.variableNames.push('preluActivationWeights');\n    }\n\n    if (hasLeakyreluAlpha) {\n      this.variableNames.push('leakyreluAlpha');\n    }\n\n    this.userCode = `\n      ${activationSnippet}\n\n      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[${channelDim}];\n\n        ivec2 xRCCorner =\n            ivec2(coords[${rowDim}], coords[${colDim}]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${filterHeight}; wR++) {\n          int xR = xRCorner + wR * ${dilationHeight};\n\n          if (xR < 0 || xR >= ${convInfo.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${filterWidth}; wC++) {\n            int xC = xCCorner + wC * ${dilationWidth};\n\n            if (xC < 0 || xC >= ${convInfo.inWidth}) {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < ${inputDepthNearestVec4}; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (${isChannelsLast}) {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (${inputDepthVec4Remainder === 1}) {\n\n              if (${isChannelsLast}) {\n                dotProd +=\n                    getX(batch, xR, xC, ${inputDepthNearestVec4}) *\n                    getW(wR, wC, ${inputDepthNearestVec4}, d2);\n              } else {\n                dotProd +=\n                    getX(batch, ${inputDepthNearestVec4}, xR, xC) *\n                    getW(wR, wC, ${inputDepthNearestVec4}, d2);\n              }\n\n            } else if (${inputDepthVec4Remainder === 2}) {\n              vec2 wValues = vec2(\n                getW(wR, wC, ${inputDepthNearestVec4}, d2),\n                getW(wR, wC, ${inputDepthNearestVec4} + 1, d2)\n              );\n\n              if (${isChannelsLast}) {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, ${inputDepthNearestVec4}),\n                  getX(batch, xR, xC, ${inputDepthNearestVec4} + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, ${inputDepthNearestVec4}, xR, xC),\n                  getX(batch, ${inputDepthNearestVec4} + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (${inputDepthVec4Remainder === 3}) {\n              vec3 wValues = vec3(\n                getW(wR, wC, ${inputDepthNearestVec4}, d2),\n                getW(wR, wC, ${inputDepthNearestVec4} + 1, d2),\n                getW(wR, wC, ${inputDepthNearestVec4} + 2, d2)\n              );\n\n              if (${isChannelsLast}) {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, ${inputDepthNearestVec4}),\n                  getX(batch, xR, xC, ${inputDepthNearestVec4} + 1),\n                  getX(batch, xR, xC, ${inputDepthNearestVec4} + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, ${inputDepthNearestVec4}, xR, xC),\n                  getX(batch, ${inputDepthNearestVec4} + 1, xR, xC),\n                  getX(batch, ${inputDepthNearestVec4} + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        ${addBiasSnippet}\n        ${applyActivationSnippet}\n        setOutput(result);\n      }\n    `;\n  }\n}\n\nexport class Conv3DProgram implements GPGPUProgram {\n  variableNames = ['x', 'W'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv3DInfo) {\n    this.outputShape = convInfo.outShape;\n    const padFront = convInfo.padInfo.front;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const filterDepth = convInfo.filterDepth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n\n    const inputDepthNearestVec4 = Math.floor(convInfo.inChannels / 4) * 4;\n    const inputDepthVec4Remainder = convInfo.inChannels % 4;\n\n    this.userCode = `\n      const ivec3 strides = ivec3(${strideDepth}, ${strideHeight}, ${\n        strideWidth});\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${filterDepth}; wF++) {\n          int xF = xFCorner + wF * ${dilationDepth};\n\n          if (xF < 0 || xF >= ${convInfo.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${filterHeight}; wR++) {\n            int xR = xRCorner + wR * ${dilationHeight};\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${filterWidth}; wC++) {\n              int xC = xCCorner + wC * ${dilationWidth};\n\n              if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < ${inputDepthNearestVec4}; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (${inputDepthVec4Remainder === 1}) {\n                dotProd +=\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4}) *\n                  getW(wF, wR, wC, ${inputDepthNearestVec4}, d2);\n              } else if (${inputDepthVec4Remainder === 2}) {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4}),\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4} + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, ${inputDepthNearestVec4}, d2),\n                  getW(wF, wR, wC, ${inputDepthNearestVec4} + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (${inputDepthVec4Remainder === 3}) {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4}),\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4} + 1),\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4} + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, ${inputDepthNearestVec4}, d2),\n                  getW(wF, wR, wC, ${inputDepthNearestVec4} + 1, d2),\n                  getW(wF, wR, wC, ${inputDepthNearestVec4} + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n import {backend_util, util} from '@tensorflow/tfjs-core';\n\n import {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\n\n export class Conv2DPackedProgram implements GPGPUProgram {\n   variableNames = ['x', 'W'];\n   packedInputs = true;\n   packedOutput = true;\n   outputShape: number[];\n   userCode: string;\n   enableShapeUniforms: boolean;\n   customUniforms = [\n     {name: 'pads', type: 'ivec2' as const },\n     {name: 'strides', type: 'ivec2' as const },\n     {name: 'dilations', type: 'ivec2' as const },\n     {name: 'inDims', type: 'ivec2' as const },\n   ];\n\n   constructor(\n       convInfo: backend_util.Conv2DInfo, addBias = false,\n       activation: string = null, hasPreluActivation = false,\n       hasLeakyReluAlpha = false) {\n     this.outputShape = convInfo.outShape;\n     this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n     const padLeft = convInfo.padInfo.left;\n     const strideWidth = convInfo.strideWidth;\n     const dilationWidth = convInfo.dilationWidth;\n     const filterHeight = convInfo.filterHeight;\n     const filterWidth = convInfo.filterWidth;\n     const texelsAcross = filterWidth;\n\n     let mainLoop = `\n       int xR; int xC; int xCOffset;\n       vec4 wTexel; vec4 previous; vec4 final;`;\n\n     for (let c = 0; c < filterWidth; c++) {\n       mainLoop += `\n           vec4 xTexelC${c * 2};\n           int xTexelC${c * 2}Ready;\n           vec4 xTexelC${c * 2 + 1};\n           int xTexelC${c * 2 + 1}Ready;\n           vec4 xC${c};`;\n     }\n\n     /**\n      * This vectorized implementation works by gathering the values needed for\n      * each output channel's dot product into vec4's and then multiplying them\n      * all together (this happens in the final double for-loop below). Most of\n      * the main loop consists of constructing these vec4's with the minimum\n      * number of texture2D calls, which means making use of all four returned\n      * values from a texture2D call at once.\n      */\n     mainLoop += `\n     for (int r = 0; r < ${filterHeight}; r++) {\n      for (int d1 = 0; d1 < ${convInfo.inChannels}; d1 += 2) {\n       `;\n     for (let c = 0; c < filterWidth; c++) {\n       mainLoop += `\n           xTexelC${c * 2} = vec4(0.0);\n           xTexelC${c * 2}Ready = 0;\n           xTexelC${c * 2 + 1} = vec4(0.0);\n           xTexelC${c * 2 + 1}Ready = 0;\n           xC${c} = vec4(0.0);`;\n     }\n     mainLoop += `\n         xR = xRCorner + r * dilations[0];\n         if (xR >=0 && xR < inDims[0]) {\n       `;\n\n     for (let texelC = 0; texelC < (texelsAcross + 1) / 2; texelC++) {\n       const colIndex = texelC * 2;\n\n       mainLoop += `\n           xC = xCCorner + ${colIndex * dilationWidth};\n           `;\n\n       if (strideWidth === 1) {\n         if (colIndex < filterWidth) {\n           // If padding is odd, the outer texels have to be composed.\n           if (padLeft % 2 === 1) {\n             // TODO: Ensure vec4 previous does not result in redundant sample,\n             // and avoid setting xTexelRC's that exceed the boundary in the\n             // first place rather than resetting them to vec4(0)).\n\n             // To compute xCOffset:\n             // - If padding is odd, we must add 1 to ensure we ask for an\n             // even-numbered row.\n             // - We subtract 2 to access the previous texel.\n\n             mainLoop += `\n                 xCOffset = xC + 1;\n                 if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${\n                 colIndex}Ready == 0) {\n                   xTexelC${colIndex} = getX(batch, xR, xCOffset, d1);\n\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${colIndex}.zw = vec2(0.0);\n                   }\n                   xTexelC${colIndex}Ready = 1;\n                 }\n               `;\n             // This texel has been read in previous iteration if the dilation\n             // is 1.\n             if (dilationWidth === 1 && colIndex > 0) {\n               mainLoop += `\n                 xC${colIndex} = vec4(xTexelC${colIndex - 2}.zw, xTexelC${\n                   colIndex}.xy);\n                 `;\n             } else {\n               mainLoop += `\n                   xCOffset = xC + 1 - 2;\n\n                   if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                     previous = getX(batch, xR, xCOffset, d1);\n\n                     // Need to manually clear unused channels in case\n                     // we're reading from recycled texture.\n                     if (xCOffset + 1 >= inDims[1]) {\n                       previous.zw = vec2(0.0);\n                     }\n\n                     xC${colIndex} = vec4(previous.zw, xTexelC${colIndex}.xy);\n                   } else {\n                     xC${colIndex} = vec4(0.0, 0.0, xTexelC${colIndex}.xy);\n                   }\n                   `;\n             }\n           } else {\n             // Padding is even, so xRC corresponds to a single texel.\n             mainLoop += `\n                 if (xC >= 0 && xC < inDims[1] && xTexelC${colIndex}Ready == 0) {\n                   xTexelC${colIndex} = getX(batch, xR, xC, d1);\n                   if (xC + 1 >= inDims[1]) {\n                     xTexelC${colIndex}.zw = vec2(0.0);\n                   }\n                   xTexelC${colIndex}Ready = 1;\n                 }\n\n                 xC${colIndex} = xTexelC${colIndex};\n                 `;\n           }\n\n           if (colIndex + 1 < filterWidth) {\n             // If dilation is even, the second entry should match the first\n             // (either both are composed or both are single samples). But if\n             // dilation is odd, then the second entry should be the opposite\n             // of the first (if the first is composed, the second is a single\n             // sample, and vice versa.)\n\n             const nextTexelOffset = padLeft % 2 === 0 ?\n                 util.nearestLargerEven(dilationWidth) :\n                 dilationWidth;\n\n             if ((dilationWidth % 2 === 0 && padLeft % 2 === 1) ||\n                 (dilationWidth % 2 !== 0 && padLeft % 2 !== 1)) {\n               mainLoop += `\n                   xCOffset = xC + imod(pads[1], 2) + ${nextTexelOffset};\n\n                   if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${\n                   colIndex + 1}Ready == 0) {\n                     xTexelC${colIndex + 1} = getX(batch, xR, xCOffset, d1);\n\n                     // Need to manually clear unused channels in case\n                     // we're reading from recycled texture.\n                     if (xCOffset + 1 >= inDims[1]) {\n                       xTexelC${colIndex + 1}.zw = vec2(0.0);\n                     }\n                     xTexelC${colIndex + 1}Ready = 1;\n                   }\n                   `;\n\n               // If dilation > 1 then the xRC's will not be able to share any\n               // values, so each xRC will require two unique calls to getX.\n               if (dilationWidth > 1) {\n                 mainLoop += `\n                     xCOffset -= 2;\n                     if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                      previous = getX(batch, xR, xCOffset, d1);\n                      xC${colIndex + 1} = vec4(previous.zw, xTexelC${\n                        colIndex + 1}.xy);\n                     } else {\n                      xC${colIndex + 1} = vec4(0.0, 0.0, xTexelC${\n                        colIndex + 1}.xy);\n                     }\n                     `;\n               } else {\n                 mainLoop += `\n                     xC${colIndex + 1} = vec4(xTexelC${colIndex}.zw, xTexelC${\n                     colIndex + 1}.xy);\n                     `;\n               }\n\n             } else {\n               // If dilation is 1 and padding is odd, we have already read the\n               // texel when constructing the previous x value. Here we can\n               // simply skip the texture read.\n               if (nextTexelOffset === 1) {\n                 mainLoop += `\n                     xC${colIndex + 1} = xTexelC${colIndex};\n                     `;\n               } else {\n                 mainLoop += `\n                     xCOffset = xC + ${nextTexelOffset};\n\n                     if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${\n                     colIndex + 1}Ready == 0) {\n                       xTexelC${colIndex + 1} = getX(batch, xR, xCOffset, d1);\n                       if (xCOffset + 1 >= inDims[1]) {\n                         xTexelC${colIndex + 1}.zw = vec2(0.0);\n                       }\n                       xTexelC${colIndex + 1}Ready = 1;\n                     }\n\n                     xC${colIndex + 1} = xTexelC${colIndex + 1};\n                     `;\n               }\n             }\n           }\n         }\n       } else {  // stride === 2\n         if (colIndex < filterWidth) {\n           // Depending on whether padLeft is even or odd, we want either the\n           // xy or zw channels from X texels for xC${colIndex}. If padLeft is\n           // even, xC${colIndex +1} is simply the zw channels of texels we've\n           // already sampled. But if padLeft is odd, xC{$c + 1}.zw will\n           // need to come from the xy channels of a new texel, hence the `\n           // vec4\n           // final` initialized below.\n           if (padLeft % 2 === 1) {\n             mainLoop += `\n                 xCOffset = xC + 1 - strides[1];\n                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${\n                 colIndex}Ready == 0) {\n                   xTexelC${colIndex} = getX(batch, xR, xCOffset, d1);\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${colIndex}.zw = vec2(0.0);\n                   }\n                   xTexelC${colIndex}Ready = 1;\n                 }\n\n                 if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${\n                 colIndex + 1}Ready == 0) {\n                   xTexelC${colIndex + 1} = getX(batch, xR, xC + 1, d1);\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xC + 2 >= inDims[1]) {\n                     xTexelC${colIndex + 1}.zw = vec2(0.0);\n                   }\n                   xTexelC${colIndex + 1}Ready = 1;\n                 }\n\n                 xC${colIndex} = vec4(xTexelC${colIndex}.zw, xTexelC${\n                 colIndex + 1}.zw);\n               `;\n\n             if (colIndex + 1 < filterWidth) {\n               mainLoop += `\n                   final = vec4(0.0);\n                   xCOffset = xC + 1 + strides[1];\n                   if(xCOffset >= 0 && xCOffset < inDims[1]) {\n                     final = getX(batch, xR, xCOffset, d1);\n                   }\n                   xC${colIndex + 1} = vec4(xTexelC${colIndex + 1}.xy, final.xy);\n                 `;\n             }\n           } else {\n             mainLoop += `\n                 if(xC >= 0 && xC < inDims[1] && xTexelC${colIndex}Ready == 0) {\n                   xTexelC${colIndex} = getX(batch, xR, xC, d1);\n                   if (xC + 1 >= inDims[1]) {\n                     xTexelC${colIndex}.zw = vec2(0.0);\n                   }\n                   xTexelC${colIndex}Ready = 1;\n                 }\n\n                 xCOffset = xC + strides[1];\n                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${\n                 colIndex + 1}Ready == 0) {\n                   xTexelC${colIndex + 1} = getX(batch, xR, xCOffset, d1);\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${colIndex + 1}.zw = vec2(0.);\n                   }\n                   xTexelC${colIndex + 1}Ready = 1;\n                 }\n\n                 xC${colIndex} = vec4(\n                   xTexelC${colIndex}.xy, xTexelC${colIndex + 1}.xy);\n               `;\n\n             if (colIndex + 1 < filterWidth) {\n               mainLoop += `\n                   xC${colIndex + 1} = vec4(xTexelC${colIndex}.zw, xTexelC${\n                   colIndex + 1}.zw);\n                 `;\n             }\n           }\n         }\n       }\n\n       // localize the dotProd accumulation within the loop, the theory is for\n       // GPU with limited cache, accumulate sum across large amount of\n       // veriables will cause lots of cache misses. (i.e. 5x5 filter will have\n       // 50 variables)\n       if (colIndex < filterWidth) {\n         mainLoop += `\n             wTexel = getW(r, ${colIndex}, d1, d2);\n             dotProd += xC${colIndex}.xxzz * vec4(wTexel.xy, wTexel.xy);\n             if(d1 + 1 < ${convInfo.inChannels}) {\n               dotProd += xC${colIndex}.yyww * vec4(wTexel.zw, wTexel.zw);\n             }\n           `;\n\n         if (colIndex + 1 < filterWidth) {\n           mainLoop += `\n               wTexel = getW(r, ${colIndex + 1}, d1, d2);\n               dotProd += xC${colIndex + 1}.xxzz * vec4(wTexel.xy, wTexel.xy);\n               if(d1 + 1 < ${convInfo.inChannels}) {\n                 dotProd += xC${colIndex + 1}.yyww * vec4(wTexel.zw, wTexel.zw);\n               }\n             `;\n         }\n       }\n     }\n     mainLoop += `\n     }\n   `;\n   mainLoop += `\n     }\n   `;\n   mainLoop += `\n     }\n   `;\n\n     let activationSnippet = '', applyActivationSnippet = '';\n     if (activation) {\n       if (hasPreluActivation) {\n         activationSnippet = `vec4 activation(vec4 a) {\n           vec4 b = getPreluActivationWeightsAtOutCoords();\n           ${activation}\n         }`;\n       } else if (hasLeakyReluAlpha) {\n         activationSnippet = `vec4 activation(vec4 a) {\n           vec4 b = getLeakyreluAlphaAtOutCoords();\n           ${activation}\n         }`;\n       } else {\n         activationSnippet = `vec4 activation(vec4 x) {\n           ${activation}\n         }`;\n       }\n\n       applyActivationSnippet = `result = activation(result);`;\n     }\n\n     const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n     if (addBias) {\n       this.variableNames.push('bias');\n     }\n\n     if (hasPreluActivation) {\n       this.variableNames.push('preluActivationWeights');\n     }\n     if (hasLeakyReluAlpha) {\n       this.variableNames.push('leakyreluAlpha');\n     }\n\n     this.userCode = `\n       ${activationSnippet}\n\n       void main() {\n         ivec4 coords = getOutputCoords();\n         int batch = coords.x;\n         ivec2 xRCCorner = coords.yz * strides - pads;\n         int d2 = coords.w;\n         int xRCorner = xRCCorner.x;\n         int xCCorner = xRCCorner.y;\n\n         //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n         vec4 dotProd = vec4(0.000000000000001);\n\n         ${mainLoop}\n\n         vec4 result = dotProd - vec4(0.000000000000001);\n         ${addBiasSnippet}\n         ${applyActivationSnippet}\n         setOutput(result);\n       }\n     `;\n   }\n }\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\n\nexport class Im2ColPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n  enableShapeUniforms: boolean;\n  customUniforms = [\n    {name: 'inputShape', type: 'ivec4' as const },\n    {name: 'pad', type: 'ivec2' as const },\n    {name: 'stride', type: 'ivec2' as const },\n    {name: 'dilation', type: 'ivec2' as const },\n    {name: 'inChannels', type: 'int' as const },\n    {name: 'itemsPerBlockRow', type: 'int' as const },\n    {name: 'outWidth', type: 'int' as const },\n  ];\n\n  constructor(outputShape: number[], convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = outputShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n    const {dataFormat} = convInfo;\n    const glsl = getGlslDifferences();\n    const isChannelsLast = dataFormat === 'channelsLast';\n    const rowDim = isChannelsLast ? 1 : 2;\n    const colDim = isChannelsLast ? 2 : 3;\n\n    const boundsCheckingSnippet = this.enableShapeUniforms ?\n        'if(blockIndex < outShape[2] && pos < outShape[1]) {' :\n        `if(blockIndex < ${outputShape[2]} && pos < ${outputShape[1]}) {`;\n    let unrolled = ``;\n\n    for (let row = 0; row <= 1; row++) {\n      for (let col = 0; col <= 1; col++) {\n        unrolled += `\n          blockIndex = rc.z + ${col};\n          pos = rc.y + ${row};\n\n          ${boundsCheckingSnippet}\n            offsetY = int(blockIndex / outWidth) * stride[0] - pad[0];\n            d0 = offsetY + dilation[0] * (pos / itemsPerBlockRow);\n\n            if(d0 < inputShape[${rowDim}] && d0 >= 0) {\n              // Use custom imod instead mod. On Intel GPU, mod may generate\n              // unexpected value.\n              // https://github.com/tensorflow/tfjs/issues/5447\n              offsetX = imod(blockIndex, outWidth) * stride[1] - pad[1];\n              d1 = offsetX + dilation[1] * (imod(pos, itemsPerBlockRow) /\n                  inChannels);\n\n              if(d1 < inputShape[${colDim}] && d1 >= 0) {\n\n                ch = imod(pos, inChannels);\n\n                if (${isChannelsLast}) {\n                  innerDims = vec2(d1, ch);\n                  result[${row * 2 + col}] = getChannel(\n                    getA(rc.x, d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${row * 2 + col}] = getChannel(\n                    getA(rc.x, ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;\n      }\n    }\n\n    this.userCode = `\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${unrolled}\n\n        ${glsl.output} = result;\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, TensorInfo, util} from '@tensorflow/tfjs-core';\n\n// import {assertAndGetBroadcastShape} from\n// '../../../tfjs-core/src/ops/broadcast_util';\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Im2ColPackedProgram} from '../im2col_packed_gpu';\nimport {mapActivationToShaderProgram} from '../kernel_utils/kernel_funcs_utils';\nimport {MatMulPackedProgram} from '../mulmat_packed_gpu';\nimport * as webgl_util from '../webgl_util';\n\nimport {batchMatMulImpl, MATMUL_SHARED_DIM_THRESHOLD} from './BatchMatMul_impl';\nimport {identity} from './Identity';\nimport {reshape} from './Reshape';\n\ntype Conv2DConfig = {\n  x: TensorInfo,\n  filter: TensorInfo,\n  convInfo: backend_util.Conv2DInfo,\n  backend: MathBackendWebGL,\n  bias?: TensorInfo,\n  preluActivationWeights?: TensorInfo,\n  leakyreluAlpha?: number,\n  activation?: backend_util.Activation\n};\n\n// Both conv2dByMatMul and conv2dWithIm2Row fuse height and width into one\n// dimension to compute batchMatMul, so bias and activation weights are also\n// supposed to fuse the two dimensions into one.\n//\n// This function computes the target shape for fusing height and width\n// dimensions. Returning null means the shape is already compatible.\n//\n// Even though the bias is not supposed to be a 3-D or a 4-D (including\n// batch) tensor and PReLU activiation weights is not supposed to be a 4-D\n// tensor, we still need to support them, because we haven't disabled\n// them for NHWC format.\n// https://github.com/tensorflow/tfjs/blob/b53bd47e880367ae57493f0ea628abaf08db2d5d/tfjs-core/src/ops/fused/conv2d.ts#L181-L196\nfunction getShapeForBatchMatMul(\n    shape: number[], isChannelsLast: boolean): number[] {\n  const length = shape.length;\n  if (length >= 3) {\n    return isChannelsLast ?\n        [\n          ...shape.slice(0, -3) /* batch */,\n          shape[length - 3] * shape[length - 2] /* height * width */,\n          shape[length - 1] /* channel */\n        ] :\n        [\n          ...shape.slice(0, -3) /* batch */, shape[length - 3] /* channel */,\n          shape[length - 2] * shape[length - 1] /* height * width */\n        ];\n  } else if (!isChannelsLast && length === 1 && shape[0] > 1) {\n    return [shape[0], 1];\n  } else {\n    return null;\n  }\n}\n\n// For 1x1 kernels that iterate through every point in the input, convolution\n// can be expressed as matrix multiplication (without need for memory\n// remapping).\nexport function conv2dByMatMul({\n  x,\n  filter,\n  convInfo,\n  backend,\n  bias = null,\n  preluActivationWeights = null,\n  leakyreluAlpha = 0,\n  activation = null\n}: Conv2DConfig) {\n  // Reshapes conv2D input to 2D tensors, uses matMul and then reshape the\n  // result from 2D to 4D.\n  const xShape = x.shape;\n  const xTexData = backend.texData.get(x.dataId);\n  const sharedMatMulDim = convInfo.inChannels;\n  const outerShapeX = xShape[0] * xShape[1] * xShape[2];\n  const outerShapeFilter = convInfo.outChannels;\n  const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n  const transposeA = false;\n  const transposeB = false;\n\n  let out: TensorInfo;\n  const intermediates: TensorInfo[] = [];\n\n  if (preluActivationWeights != null) {\n    const targetShape =\n        getShapeForBatchMatMul(preluActivationWeights.shape, isChannelsLast);\n    if (targetShape != null) {\n      preluActivationWeights = reshape({\n        inputs: {x: preluActivationWeights},\n        backend,\n        attrs: {shape: targetShape}\n      });\n      intermediates.push(preluActivationWeights);\n    }\n  }\n\n  if (bias != null) {\n    const targetShape = getShapeForBatchMatMul(bias.shape, isChannelsLast);\n    if (targetShape != null) {\n      bias = reshape({inputs: {x: bias}, backend, attrs: {shape: targetShape}});\n      intermediates.push(bias);\n    }\n  }\n\n  // TODO: Once reduction ops are packed, batchMatMul will always be packed\n  // and we can remove this condition.\n  const batchMatMulWillBeUnpacked =\n      (outerShapeX === 1 || outerShapeFilter === 1) &&\n      sharedMatMulDim > MATMUL_SHARED_DIM_THRESHOLD;\n\n  // The algorithm in the if condition assumes (1) the output will be packed,\n  // (2) x is packed, (3) x isChannelsLast, (4)  x's packed texture is already\n  // on GPU, (5) col is odd, (6) the width, height and inChannels are the same\n  // for xTexData.shape and xShape.\n  const canOptimize = !batchMatMulWillBeUnpacked && xTexData.isPacked &&\n      isChannelsLast && xTexData.texture != null && xShape[2] % 2 !== 0 &&\n      util.arraysEqual(xTexData.shape.slice(-3), xShape.slice(-3));\n\n  if (canOptimize) {\n    // We avoid expensive packed 2x2 reshape by padding col count to next,\n    // even number. When col is odd, the result of packed batchMatMul is\n    // the same (has the same texture layout and and values in the texture) as\n    // it is for next even col. We make the odd-cols tensor to look like\n    // even-cols tensor before the operation and, after the batchMatMul,\n    // fix the even-cols result to have odd number of cols.\n    const targetShape = xShape[0] * xShape[1] * (xShape[2] + 1);\n    const xReshaped: TensorInfo = {\n      dataId: x.dataId,\n      shape: [1, targetShape, convInfo.inChannels],\n      dtype: x.dtype\n    };\n    // xTexData.shape gets referenced from GPGPUBinary.inShapeInfos.\n    // Decrementing col count, after batchMatMul->...->compileProgram leads to\n    // invalid col count within the reference in GPGPUBinary.inShapeInfos.\n    // Alternative fix would be to provide a copy to GPGPUBinary.inShapeInfos\n    // in compileProgram method, but that would affect compilation of all\n    // programs - instead, provide a copy here, with even col count, before\n    // calling batchMatMul->...->compileProgram and after that, the original\n    // xTexData.shape is restored.\n    const originalXTexDataShape = xTexData.shape;\n    xTexData.shape = xTexData.shape.slice();\n    xTexData.shape[xTexData.shape.length - 2]++;\n    util.assert(\n        webgl_util.isReshapeFree(xTexData.shape, xReshaped.shape),\n        () => `packed reshape ${xTexData.shape} to ${\n            xReshaped.shape} isn't free`);\n    const filterReshaped = reshape({\n      inputs: {x: filter},\n      backend,\n      attrs: {shape: [1, convInfo.inChannels, convInfo.outChannels]}\n    });\n    intermediates.push(filterReshaped);\n    const pointwiseConv = batchMatMulImpl({\n      a: xReshaped,\n      b: filterReshaped,\n      backend,\n      transposeA,\n      transposeB,\n      bias,\n      activation,\n      preluActivationWeights,\n      leakyreluAlpha\n    });\n\n    const pointwiseConvTexData = backend.texData.get(pointwiseConv.dataId);\n    util.assert(\n        pointwiseConvTexData.isPacked,\n        () => 'batchMatMul result is expected to be packed');\n    // Restore the input shape to original.\n    xTexData.shape = originalXTexDataShape;\n    // Set the output shape - there is no need for expensive reshape as data\n    // layout is already correct.\n    pointwiseConvTexData.shape = convInfo.outShape;\n\n    out = identity({inputs: {x: pointwiseConv}, backend});\n    out.shape = convInfo.outShape;\n\n    intermediates.push(pointwiseConv);\n  } else {\n    const numCols = convInfo.outHeight * convInfo.outWidth;\n    const xReshaped = reshape({\n      inputs: {x},\n      backend,\n      attrs: {\n        shape: isChannelsLast ?\n            [convInfo.batchSize, numCols, convInfo.inChannels] :\n            [convInfo.batchSize, convInfo.inChannels, numCols]\n      }\n    });\n    const filterReshaped = reshape({\n      inputs: {x: filter},\n      backend,\n      attrs: {shape: [1, convInfo.inChannels, convInfo.outChannels]}\n    });\n    const result = batchMatMulImpl({\n      a: isChannelsLast ? xReshaped : filterReshaped,\n      b: isChannelsLast ? filterReshaped : xReshaped,\n      transposeA: !isChannelsLast,\n      transposeB,\n      backend,\n      bias,\n      activation,\n      preluActivationWeights,\n      leakyreluAlpha\n    });\n\n    out = reshape(\n        {inputs: {x: result}, backend, attrs: {shape: convInfo.outShape}});\n\n    intermediates.push(xReshaped);\n    intermediates.push(filterReshaped);\n    intermediates.push(result);\n  }\n\n  for (const i of intermediates) {\n    backend.disposeIntermediateTensorInfo(i);\n  }\n\n  return out;\n}\n\n// Implements the im2row algorithm as outlined in \"High Performance\n// Convolutional Neural Networks for Document Processing\" (Suvisoft, 2006)\nexport function conv2dWithIm2Row({\n  x,\n  filter,\n  convInfo,\n  backend,\n  bias = null,\n  preluActivationWeights = null,\n  leakyreluAlpha = 0,\n  activation = null\n}: Conv2DConfig) {\n  // Rearranges conv2d input so each block to be convolved over forms the\n  // column of a new matrix with shape [filterWidth * filterHeight *\n  // inChannels, outHeight * outWidth]. The filter is also rearranged so each\n  // output channel forms a row of a new matrix with shape [outChannels,\n  // filterWidth * filterHeight * inChannels]. The convolution is then\n  // computed by multiplying these matrices and reshaping the result.\n  const {\n    filterWidth,\n    filterHeight,\n    inChannels,\n    outWidth,\n    outHeight,\n    dataFormat\n  } = convInfo;\n\n  const isChannelsLast = dataFormat === 'channelsLast';\n\n  const sharedDim = filterWidth * filterHeight * inChannels;\n  const numCols = outHeight * outWidth;\n  const x2ColShape = [convInfo.batchSize, sharedDim, numCols];\n  const transposeA = true;\n  const transposeB = false;\n\n  const intermediates: TensorInfo[] = [];\n\n  if (preluActivationWeights != null) {\n    const targetShape =\n        getShapeForBatchMatMul(preluActivationWeights.shape, isChannelsLast);\n    if (targetShape != null) {\n      preluActivationWeights = reshape({\n        inputs: {x: preluActivationWeights},\n        backend,\n        attrs: {shape: targetShape}\n      });\n      intermediates.push(preluActivationWeights);\n    }\n  }\n\n  if (bias != null) {\n    const targetShape = getShapeForBatchMatMul(bias.shape, isChannelsLast);\n    if (targetShape != null) {\n      bias = reshape({inputs: {x: bias}, backend, attrs: {shape: targetShape}});\n      intermediates.push(bias);\n    }\n  }\n\n  const w2Row = reshape({\n    inputs: {x: filter},\n    backend,\n    attrs: {shape: [1, sharedDim, util.sizeFromShape(filter.shape) / sharedDim]}\n  });\n  intermediates.push(w2Row);\n\n  const im2ColProgram = new Im2ColPackedProgram(x2ColShape, convInfo);\n  const customValues = [\n    x.shape, [convInfo.padInfo.top, convInfo.padInfo.left],\n    [convInfo.strideHeight, convInfo.strideWidth],\n    [convInfo.dilationHeight, convInfo.dilationWidth], [convInfo.inChannels],\n    [convInfo.filterWidth * convInfo.inChannels], [convInfo.outWidth]\n  ];\n  const im2Col =\n      backend.runWebGLProgram(im2ColProgram, [x], 'float32', customValues);\n  const im2ColReshaped =\n      reshape({inputs: {x: im2Col}, backend, attrs: {shape: x2ColShape}});\n\n  intermediates.push(im2Col);\n  intermediates.push(im2ColReshaped);\n\n  const hasBias = bias != null;\n  const hasPreluActivationWeights = preluActivationWeights != null;\n  const hasLeakyreluAlpha = activation === 'leakyrelu';\n  const fusedActivation =\n      activation ? mapActivationToShaderProgram(activation, true) : null;\n  const matmulProgram = new MatMulPackedProgram(\n      isChannelsLast ? im2ColReshaped.shape as [number, number, number] :\n                       w2Row.shape as [number, number, number],\n      isChannelsLast ? w2Row.shape as [number, number, number] :\n                       im2ColReshaped.shape as [number, number, number],\n      isChannelsLast ? [convInfo.batchSize, numCols, convInfo.outChannels] :\n                       [convInfo.batchSize, convInfo.outChannels, numCols],\n      transposeA, transposeB, hasBias, fusedActivation,\n      hasPreluActivationWeights, hasLeakyreluAlpha);\n  const inputs: TensorInfo[] =\n      isChannelsLast ? [im2ColReshaped, w2Row] : [w2Row, im2ColReshaped];\n  if (bias) {\n    inputs.push(bias);\n  }\n  if (hasPreluActivationWeights) {\n    inputs.push(preluActivationWeights);\n  }\n  if (hasLeakyreluAlpha) {\n    const $leakyreluAlpha = backend.makeTensorInfo(\n        [], 'float32',\n        util.createScalarValue(leakyreluAlpha as unknown as 'float32',\n                               'float32'));\n    inputs.push($leakyreluAlpha);\n    intermediates.push($leakyreluAlpha);\n  }\n  const product = backend.runWebGLProgram(matmulProgram, inputs, 'float32');\n  const out = reshape(\n      {inputs: {x: product}, backend, attrs: {shape: convInfo.outShape}});\n\n  intermediates.push(product);\n  for (const i of intermediates) {\n    backend.disposeIntermediateTensorInfo(i);\n  }\n\n  return out;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv2D, Conv2DAttrs, Conv2DInputs, env, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Conv2DProgram} from '../conv_gpu';\nimport {Conv2DPackedProgram} from '../conv_packed_gpu';\nimport {conv2dByMatMul, conv2dWithIm2Row} from './Conv2D_impl';\nimport {reshape} from './Reshape';\n\nexport function conv2d(\n    args:\n        {inputs: Conv2DInputs, attrs: Conv2DAttrs, backend: MathBackendWebGL}) {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dataFormat, dilations, dimRoundingMode} = attrs;\n\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number, number], strides, dilations, pad,\n      dimRoundingMode, false /* depthwise */, $dataFormat);\n  let out: TensorInfo;\n\n  if (convInfo.filterHeight === 1 && convInfo.filterWidth === 1 &&\n      convInfo.dilationHeight === 1 && convInfo.dilationWidth === 1 &&\n      convInfo.strideHeight === 1 && convInfo.strideWidth === 1 &&\n      (convInfo.padInfo.type === 'SAME' || convInfo.padInfo.type === 'VALID')) {\n    out = conv2dByMatMul({x, filter, convInfo, backend});\n  } else if (convInfo.strideWidth <= 2 && $dataFormat === 'channelsLast'\n    && env().getBool('WEBGL_EXP_CONV')\n    ) {\n    const program = new Conv2DPackedProgram(convInfo);\n    const customValues = [\n      [convInfo.padInfo.top, convInfo.padInfo.left],\n      [convInfo.strideHeight, convInfo.strideWidth],\n      [convInfo.dilationHeight, convInfo.dilationWidth],\n      [convInfo.inHeight, convInfo.inWidth]\n    ];\n    out =\n        backend.runWebGLProgram(program, [x, filter], 'float32', customValues);\n  } else if (env().getBool('WEBGL_CONV_IM2COL')) {\n    out = conv2dWithIm2Row({x, filter, convInfo, backend});\n  } else {\n    const program = new Conv2DProgram(convInfo);\n    out = backend.runWebGLProgram(program, [x, filter], 'float32');\n  }\n\n  const outReshaped =\n      reshape({inputs: {x: out}, backend, attrs: {shape: convInfo.outShape}});\n  backend.disposeIntermediateTensorInfo(out);\n\n  return outReshaped;\n}\n\nexport const conv2DConfig: KernelConfig = {\n  kernelName: Conv2D,\n  backendName: 'webgl',\n  kernelFunc: conv2d as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class Conv2DDerFilterProgram implements GPGPUProgram {\n  variableNames = ['x', 'dy'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.filterShape;\n\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${convInfo.batchSize}; b++) {\n          for (int yR = 0; yR < ${convInfo.outHeight}; yR++) {\n            int xR = wR + yR * ${strideHeight} - ${padTop};\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${convInfo.outWidth}; yC++) {\n              int xC = wC + yC * ${strideWidth} - ${padLeft};\n\n              if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                continue;\n              }\n\n              ${isChannelsLast?\n             `float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);` :\n             `float dyValue = getDy(b, d2, yR, yC);\n              float xValue = getX(b, d1, xR, xC);\n              dotProd += (xValue * dyValue);`}\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n\nexport class Conv2DDerInputProgram implements GPGPUProgram {\n  variableNames = ['dy', 'W'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.inShape;\n\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n\n    const padTop = filterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = filterWidth - 1 - convInfo.padInfo.left;\n\n    const rowDim = isChannelsLast ? 1 : 2;\n    const colDim = isChannelsLast ? 2 : 3;\n    const channelDim = isChannelsLast ? 3 : 1;\n\n    this.userCode = `\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[${channelDim}];\n\n        ivec2 dyCorner = ivec2(coords[${rowDim}], coords[${colDim}]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${filterHeight}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${filterHeight} - 1 - wR;\n\n          for (int wC = 0; wC < ${filterWidth}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${filterWidth} - 1 - wC;\n\n            for (int d2 = 0; d2 < ${convInfo.outChannels}; d2++) {\n\n              if (${isChannelsLast}) {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n\nexport class Conv3DDerFilterProgram implements GPGPUProgram {\n  variableNames = ['x', 'dy'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv3DInfo) {\n    this.outputShape = convInfo.filterShape;\n\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const padFront = convInfo.padInfo.front;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n\n    this.userCode = `\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${convInfo.batchSize}; b++) {\n          for (int yF = 0; yF < ${convInfo.outDepth}; yF++) {\n            int xF = wF + yF * ${strideDepth} - ${padFront};\n\n            if (xF < 0 || xF >= ${convInfo.inDepth}) {\n              continue;\n            }\n\n            for (int yR = 0; yR < ${convInfo.outHeight}; yR++) {\n              int xR = wR + yR * ${strideHeight} - ${padTop};\n\n              if (xR < 0 || xR >= ${convInfo.inHeight}) {\n                continue;\n              }\n\n              for (int yC = 0; yC < ${convInfo.outWidth}; yC++) {\n                int xC = wC + yC * ${strideWidth} - ${padLeft};\n\n                if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n\nexport class Conv3DDerInputProgram implements GPGPUProgram {\n  variableNames = ['dy', 'W'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv3DInfo) {\n    this.outputShape = convInfo.inShape;\n\n    const filterDepth = convInfo.filterDepth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n\n    const padFront = filterDepth - 1 - convInfo.padInfo.front;\n    const padTop = filterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = filterWidth - 1 - convInfo.padInfo.left;\n\n    this.userCode = `\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${filterDepth}; wF++) {\n          float dyF = float(dyFCorner + wF) / ${strideDepth}.0;\n\n          if (dyF < 0.0 || dyF >= ${convInfo.outDepth}.0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = ${filterDepth} - 1 - wF;\n\n          for (int wR = 0; wR < ${filterHeight}; wR++) {\n            float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = ${filterHeight} - 1 - wR;\n\n            for (int wC = 0; wC < ${filterWidth}; wC++) {\n              float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = ${filterWidth} - 1 - wC;\n\n              for (int d2 = 0; d2 < ${convInfo.outChannels}; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv2DBackpropFilter, Conv2DBackpropFilterAttrs, Conv2DBackpropFilterInputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Conv2DDerFilterProgram} from '../conv_backprop_gpu';\n\nexport function conv2DBackpropFilter(args: {\n  inputs: Conv2DBackpropFilterInputs,\n  attrs: Conv2DBackpropFilterAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x, dy} = inputs;\n  const {strides, pad, dataFormat, dimRoundingMode, filterShape} = attrs;\n\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number], filterShape, strides,\n      1 /* dilations */, pad, dimRoundingMode, false /* depthwise */,\n      $dataFormat);\n\n  const program = new Conv2DDerFilterProgram(convInfo);\n  return backend.runWebGLProgram(program, [x, dy], 'float32');\n}\n\nexport const conv2DBackpropFilterConfig: KernelConfig = {\n  kernelName: Conv2DBackpropFilter,\n  backendName: 'webgl',\n  kernelFunc: conv2DBackpropFilter as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\n\nexport class Conv2DDerInputPackedProgram implements GPGPUProgram {\n  variableNames = ['dy', 'W'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n  enableShapeUniforms: boolean;\n  customUniforms = [\n    {name: 'strides', type: 'vec2' as const },\n  ];\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.inShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n\n    const padTop = filterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = filterWidth - 1 - convInfo.padInfo.left;\n\n    this.userCode = `\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n\n        ivec2 dyCorner = ivec2(coords[1], coords[2]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        vec4 result = vec4(0.);\n        for (int wR = 0; wR < ${filterHeight}; wR++) {\n          float dyR = float(dyRCorner + wR) / strides[0];\n          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n          int wRPerm = ${filterHeight} - 1 - wR;\n\n          for (int wC = 0; wC < ${filterWidth}; wC++) {\n            int wCPerm = ${filterWidth} - 1 - wC;\n\n            float dyC = float(dyCCorner + wC) / strides[1];\n            bool idyCVal = (dyC >= 0.0) && (dyC < ${convInfo.outWidth}.0)\n              && (fract(dyC) == 0.0);\n            int idyC = int(dyC);\n\n            float dyC2 = float(dyCCorner + wC + 1) / strides[1];\n            bool idyCVal2 = (dyC2 >= 0.0) && (dyC2 < ${convInfo.outWidth}.0)\n              && (fract(dyC2) == 0.0);\n            int idyC2 = int(dyC2);\n\n            if (idyCVal && idyCVal2) {\n              for (int d2 = 0; d2 < ${convInfo.outChannels}; d2 += 2) {\n                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);\n                vec4 dySample = getDy(batch, idyR, idyC, d2);\n                vec4 dySample2 = (idyC / 2 == idyC2 / 2) ?\n                  dySample : getDy(batch, idyR, idyC2, d2);\n\n                vec2 dyValue = mod(float(idyC), 2.) == 0. ?\n                  dySample.xy : dySample.zw;\n                result.xy += vec2(dot(dyValue, wValue.xy),\n                  dot(dyValue, wValue.zw));\n\n                dyValue = mod(float(idyC2), 2.) == 0. ?\n                  dySample2.xy : dySample2.zw;\n                result.zw += vec2(dot(dyValue, wValue.xy),\n                  dot(dyValue, wValue.zw));\n              }\n            } else if (idyCVal) {\n              for (int d2 = 0; d2 < ${convInfo.outChannels}; d2 += 2) {\n                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);\n                vec4 dySample = getDy(batch, idyR, idyC, d2);\n                vec2 dyValue = mod(float(idyC), 2.) == 0. ?\n                  dySample.xy : dySample.zw;\n                result.xy += vec2(dot(dyValue, wValue.xy),\n                  dot(dyValue, wValue.zw));\n              }\n            } else if (idyCVal2) {\n              for (int d2 = 0; d2 < ${convInfo.outChannels}; d2 += 2) {\n                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);\n                vec4 dySample = getDy(batch, idyR, idyC2, d2);\n                vec2 dyValue = mod(float(idyC2), 2.) == 0. ?\n                  dySample.xy : dySample.zw;\n                result.zw += vec2(dot(dyValue, wValue.xy),\n                  dot(dyValue, wValue.zw));\n              }\n            }\n          }\n        }\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv2DBackpropInput, Conv2DBackpropInputAttrs, Conv2DBackpropInputInputs, env, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Conv2DDerInputProgram} from '../conv_backprop_gpu';\nimport {Conv2DDerInputPackedProgram} from '../conv_backprop_packed_gpu';\n\nexport function conv2DBackpropInput(args: {\n  inputs: Conv2DBackpropInputInputs,\n  attrs: Conv2DBackpropInputAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {dy, filter} = inputs;\n  const {inputShape, strides, pad, dataFormat, dimRoundingMode} = attrs;\n\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      inputShape, filter.shape as [number, number, number, number], strides,\n      1 /* dilations */, pad, dimRoundingMode, false, $dataFormat);\n\n  if (env().getBool('WEBGL_PACK') && $dataFormat === 'channelsLast') {\n    const customValues = [\n      [convInfo.strideHeight, convInfo.strideWidth],\n    ];\n    const program = new Conv2DDerInputPackedProgram(convInfo);\n    return backend.runWebGLProgram(\n        program, [dy, filter], 'float32', customValues);\n  } else {\n    const program = new Conv2DDerInputProgram(convInfo);\n    return backend.runWebGLProgram(program, [dy, filter], 'float32');\n  }\n}\n\nexport const conv2DBackpropInputConfig: KernelConfig = {\n  kernelName: Conv2DBackpropInput,\n  backendName: 'webgl',\n  kernelFunc: conv2DBackpropInput as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv3D, Conv3DAttrs, Conv3DInputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Conv3DProgram} from '../conv_gpu';\n\nexport function conv3D(\n    args:\n        {inputs: Conv3DInputs, attrs: Conv3DAttrs, backend: MathBackendWebGL}) {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dilations} = attrs;\n\n  const convInfo = backend_util.computeConv3DInfo(\n      x.shape as [number, number, number, number, number],\n      filter.shape as [number, number, number, number, number], strides,\n      dilations, pad);\n\n  const program = new Conv3DProgram(convInfo);\n  return backend.runWebGLProgram(program, [x, filter], 'float32');\n}\n\nexport const conv3DConfig: KernelConfig = {\n  kernelName: Conv3D,\n  backendName: 'webgl',\n  kernelFunc: conv3D as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv3DBackpropFilterV2, Conv3DBackpropFilterV2Attrs, Conv3DBackpropFilterV2Inputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Conv3DDerFilterProgram} from '../conv_backprop_gpu';\n\nexport function conv3DBackpropFilterV2(args: {\n  inputs: Conv3DBackpropFilterV2Inputs,\n  attrs: Conv3DBackpropFilterV2Attrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x, dy} = inputs;\n  const {strides, pad, filterShape} = attrs;\n\n  const convInfo = backend_util.computeConv3DInfo(\n      x.shape as [number, number, number, number, number], filterShape, strides,\n      1 /* dilations */, pad);\n\n  const program = new Conv3DDerFilterProgram(convInfo);\n  return backend.runWebGLProgram(program, [x, dy], 'float32');\n}\n\nexport const conv3DBackpropFilterV2Config: KernelConfig = {\n  kernelName: Conv3DBackpropFilterV2,\n  backendName: 'webgl',\n  kernelFunc: conv3DBackpropFilterV2 as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv3DBackpropInputV2, Conv3DBackpropInputV2Attrs, Conv3DBackpropInputV2Inputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Conv3DDerInputProgram} from '../conv_backprop_gpu';\n\nexport function conv3DBackpropInput(args: {\n  inputs: Conv3DBackpropInputV2Inputs,\n  attrs: Conv3DBackpropInputV2Attrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {dy, filter} = inputs;\n  const {pad, strides, inputShape} = attrs;\n\n  const convInfo = backend_util.computeConv3DInfo(\n      inputShape, filter.shape as [number, number, number, number, number],\n      strides, 1 /* dilations */, pad);\n\n  const program = new Conv3DDerInputProgram(convInfo);\n  return backend.runWebGLProgram(program, [dy, filter], 'float32');\n}\n\nexport const conv3DBackpropInputConfig: KernelConfig = {\n  kernelName: Conv3DBackpropInputV2,\n  backendName: 'webgl',\n  kernelFunc: conv3DBackpropInput as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Cos, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {CHECK_NAN_SNIPPET_PACKED} from '../binaryop_packed_gpu';\nimport {CHECK_NAN_SNIPPET_UNARY, unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst COS = CHECK_NAN_SNIPPET_UNARY + `\n  return cos(x);\n`;\n\nconst COS_PACKED = `\n  vec4 result = cos(x);\n  bvec4 isNaN = isnan(x);\n  ${CHECK_NAN_SNIPPET_PACKED}\n  return result;\n`;\n\nexport const cos =\n    unaryKernelFunc({opSnippet: COS, packedOpSnippet: COS_PACKED});\n\nexport const cosConfig: KernelConfig = {\n  kernelName: Cos,\n  backendName: 'webgl',\n  kernelFunc: cos,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Cosh, KernelConfig} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst COSH = `\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n`;\n\nexport const cosh = unaryKernelFunc({opSnippet: COSH});\n\nexport const coshConfig: KernelConfig = {\n  kernelName: Cosh,\n  backendName: 'webgl',\n  kernelFunc: cosh,\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class CropAndResizeProgram implements GPGPUProgram {\n  variableNames = ['Image', 'Boxes', 'BoxInd'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      imageShape: [number, number, number, number], boxShape: [number, number],\n      cropSize: [number, number], method: 'bilinear'|'nearest',\n      extrapolationValue: number) {\n    const [batch, imageHeight, imageWidth, depth] = imageShape;\n    const [numBoxes, ] = boxShape;\n    const [cropHeight, cropWidth] = cropSize;\n    this.outputShape = [numBoxes, cropHeight, cropWidth, depth];\n    const methodId = method === 'bilinear' ? 1 : 0;\n\n    const [inputHeightFloat, inputWidthFloat] =\n        [`${imageHeight - 1}.0`, `${imageWidth - 1}.0`];\n\n    const [heightRatio, heightScale, inY] = cropHeight > 1 ?\n        [\n          `${(imageHeight - 1) / (cropHeight - 1)}`,\n          '(y2-y1) * height_ratio',\n          `y1*${inputHeightFloat} + float(y)*(height_scale)`,\n        ] :\n        [\n          '0.0',\n          '0.0',\n          `0.5 * (y1+y2) * ${inputHeightFloat}`,\n        ];\n    const [widthRatio, widthScale, inX] = cropWidth > 1 ?\n        [\n          `${(imageWidth - 1) / (cropWidth - 1)}`,\n          '(x2-x1) * width_ratio',\n          `x1*${inputWidthFloat} + float(x)*(width_scale)`,\n        ] :\n        [\n          '0.0',\n          '0.0',\n          `0.5 * (x1+x2) * ${inputWidthFloat}`,\n        ];\n\n    // Reference implementation\n    // tslint:disable-next-line:max-line-length\n    // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/crop_and_resize_op_gpu.cu.cc\n    this.userCode = `\n      const float height_ratio = float(${heightRatio});\n      const float width_ratio = float(${widthRatio});\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= ${batch}) {\n          return;\n        }\n\n        float height_scale = ${heightScale};\n        float width_scale = ${widthScale};\n\n        float in_y = ${inY};\n        if( in_y < 0.0 || in_y > ${inputHeightFloat} ) {\n          setOutput(float(${extrapolationValue}));\n          return;\n        }\n        float in_x = ${inX};\n        if( in_x < 0.0 || in_x > ${inputWidthFloat} ) {\n          setOutput(float(${extrapolationValue}));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(${methodId} == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {CropAndResize, CropAndResizeAttrs, CropAndResizeInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {CropAndResizeProgram} from '../crop_and_resize_gpu';\n\nexport const cropAndResize = (args: {\n  inputs: CropAndResizeInputs,\n  backend: MathBackendWebGL,\n  attrs: CropAndResizeAttrs\n}): TensorInfo => {\n  const {inputs, backend, attrs} = args;\n  const {image, boxes, boxInd} = inputs;\n  const {cropSize, method, extrapolationValue} = attrs;\n\n  const program = new CropAndResizeProgram(\n      image.shape as [number, number, number, number],\n      boxes.shape as [number, number], cropSize, method, extrapolationValue);\n  return backend.runWebGLProgram(program, [image, boxes, boxInd], 'float32');\n};\n\nexport const cropAndResizeConfig: KernelConfig = {\n  kernelName: CropAndResize,\n  backendName: 'webgl',\n  kernelFunc: cropAndResize as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType, UniformType} from './shader_compiler';\n\nexport enum CumOpType {\n  Prod = '*',\n  Sum = '+',\n}\n\nexport class CumProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  userCode: string;\n  customUniforms = [{name: 'index', type: 'float' as UniformType}];\n\n  constructor(\n      public op: CumOpType, public outputShape: number[], exclusive: boolean,\n      reverse: boolean) {\n    const rank = this.outputShape.length;\n    const initVal = this.op === CumOpType.Prod ? '1.0' : '0.0';\n    const val =\n        exclusive ? initVal : `getX(${getCoords(rank, 'coords', this.op)})`;\n    const length = this.outputShape[this.outputShape.length - 1];\n    let condition = '';\n    let idxString = '';\n    // When exclusive is set, the cum op becomes roll op that copies the\n    // value from the previous index based on the direction specified by the\n    // reverse flag.\n    if (exclusive) {\n      condition = reverse ? `end != ${length - 1}` : 'end != 0';\n      idxString = reverse ? 'end + 1' : 'end - 1';\n    } else {\n      condition = reverse ? `end + pow2 < ${length}` : 'end >= pow2';\n      idxString = (reverse ? 'end + pow2' : 'end - pow2');\n    }\n\n    this.userCode = `\n      void main() {\n        ${getCoordsDataType(rank)} coords = getOutputCoords();\n        int end = ${getFinalCoord(rank, 'coords', this.op)};\n        float val = ${val};\n        int pow2 = int(pow(2.0, index));\n        if (${condition}) {\n          int idx = ${idxString};\n          ${getFinalCoord(rank, 'coords', this.op)} = idx;\n          val ${this.op}= getX(${getCoords(rank, 'coords', this.op)});\n        }\n        setOutput(val);\n      }\n    `;\n  }\n}\n\nfunction getCoords(rank: number, name: string, op: CumOpType): string {\n  if (rank === 1) {\n    return `${name}`;\n  } else if (rank === 2) {\n    return `${name}.x, ${name}.y`;\n  } else if (rank === 3) {\n    return `${name}.x, ${name}.y, ${name}.z`;\n  } else if (rank === 4) {\n    return `${name}.x, ${name}.y, ${name}.z, ${name}.w`;\n  } else {\n    throw new Error(`Cumulative ${op} for rank ${rank} is not yet supported`);\n  }\n}\n\nfunction getFinalCoord(rank: number, name: string, op: CumOpType): string {\n  if (rank === 1) {\n    return `${name}`;\n  } else if (rank === 2) {\n    return `${name}.y`;\n  } else if (rank === 3) {\n    return `${name}.z`;\n  } else if (rank === 4) {\n    return `${name}.w`;\n  } else {\n    throw new Error(`Cumulative ${op} for rank ${rank} is not yet supported`);\n  }\n}\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {CumOpType, CumProgram} from '../cum_gpu';\n\nimport {identity} from './Identity';\nimport {transpose} from './Transpose';\n\nexport function cumImpl(\n    op: CumOpType, x: TensorInfo, backend: MathBackendWebGL, axis: number,\n    exclusive: boolean, reverse: boolean): TensorInfo {\n  const xRank = x.shape.length;\n  const permutation = backend_util.getAxesPermutation([axis], xRank);\n  let permutedX = x;\n  if (permutation != null) {\n    permutedX = transpose({inputs: {x}, backend, attrs: {perm: permutation}});\n  }\n  const permutedAxis = backend_util.getInnerMostAxes(1, xRank)[0];\n\n  if (permutedAxis !== xRank - 1) {\n    throw new Error(\n        `WebGL cumprod shader expects an inner-most axis=${\n            x.shape.length - 1} ` +\n        `but got axis=${axis}`);\n  }\n  const size = permutedX.shape[permutedAxis];\n  let result = identity({inputs: {x: permutedX}, backend});\n  // Use cum parallel algorithm, inspired by:\n  // https://developer.nvidia.com/gpugems/gpugems3/part-vi-gpu-computing/chapter-39-parallel-prefix-sum-scan-cuda\n  // Note: although the algorithm is called sum, it works for any associtative\n  // operator with an identity.\n\n  for (let i = 0; i <= Math.ceil(Math.log2(size)) - 1; i++) {\n    const program = new CumProgram(op, permutedX.shape, false, reverse);\n    const customValues = [[i]];\n    const prevResult = result;\n    result =\n        backend.runWebGLProgram(program, [result], result.dtype, customValues);\n    backend.disposeIntermediateTensorInfo(prevResult);\n  }\n  // For exclusive cum, shift the end result in the direction of product or sum\n  // and add 1 for product or 0 for sum to the front index.\n  if (exclusive) {\n    const program = new CumProgram(op, permutedX.shape, exclusive, reverse);\n    const prevResult = result;\n    result = backend.runWebGLProgram(program, [result], result.dtype);\n    backend.disposeIntermediateTensorInfo(prevResult);\n  }\n\n  if (permutation != null) {\n    const reversePermutation = backend_util.getUndoAxesPermutation(permutation);\n    const reverseTransposedResult = transpose(\n        {inputs: {x: result}, backend, attrs: {perm: reversePermutation}});\n\n    backend.disposeIntermediateTensorInfo(result);\n    backend.disposeIntermediateTensorInfo(permutedX);\n\n    return reverseTransposedResult;\n  }\n\n  return result;\n}\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Cumprod, CumprodAttrs, CumprodInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {CumOpType} from '../cum_gpu';\nimport {cumImpl} from './Cum_impl';\n\nexport function cumprod(args: {\n  inputs: CumprodInputs,\n  backend: MathBackendWebGL,\n  attrs: CumprodAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, exclusive, reverse} = attrs;\n\n  return cumImpl(CumOpType.Prod, x, backend, axis, exclusive, reverse);\n}\n\nexport const cumprodConfig: KernelConfig = {\n  kernelName: Cumprod,\n  backendName: 'webgl',\n  kernelFunc: cumprod as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Cumsum, CumsumAttrs, CumsumInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {CumOpType} from '../cum_gpu';\nimport {cumImpl} from './Cum_impl';\n\nexport function cumsum(\n    args:\n        {inputs: CumsumInputs, backend: MathBackendWebGL, attrs: CumsumAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, exclusive, reverse} = attrs;\n  return cumImpl(CumOpType.Sum, x, backend, axis, exclusive, reverse);\n}\n\nexport const cumsumConfig: KernelConfig = {\n  kernelName: Cumsum,\n  backendName: 'webgl',\n  kernelFunc: cumsum as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DenseBincount, DenseBincountAttrs, DenseBincountInputs, KernelConfig, KernelFunc, Rank, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {bincountImplCPU, bincountReduceImplCPU} from '../kernel_utils/shared';\n\nexport function denseBincount(args: {\n  inputs: DenseBincountInputs,\n  backend: MathBackendWebGL,\n  attrs: DenseBincountAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, weights} = inputs;\n  const {size, binaryOutput} = attrs;\n\n  if (x.shape.length === 1) {\n    const xVals = backend.readSync(x.dataId) as TypedArray;\n    const weightsVals = backend.readSync(weights.dataId) as TypedArray;\n\n    const outVals =\n        bincountImplCPU(xVals, weightsVals, weights.dtype, weights.shape, size);\n\n    return backend.makeTensorInfo([size], weights.dtype, outVals);\n  } else if (x.shape.length === 2) {\n    const xBuf = backend.bufferSync<Rank, 'float32'>(x);\n    const weightsBuf = backend.bufferSync<Rank, 'float32'>(weights);\n\n    const outBuf = bincountReduceImplCPU(xBuf, weightsBuf, size, binaryOutput);\n\n    return backend.makeTensorInfo(outBuf.shape, weights.dtype, outBuf.values);\n  }\n\n  throw new Error(\n      `Error in denseBincount: input must be at most rank 2, but got rank` +\n      `${x.shape.length}.`);\n}\n\nexport const denseBincountConfig: KernelConfig = {\n  kernelName: DenseBincount,\n  backendName: 'webgl',\n  kernelFunc: denseBincount as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class DepthToSpaceProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[] = [];\n  userCode: string;\n  blockSize: number;\n  dataFormat: string;\n\n  constructor(\n      outputShape: number[], blockSize: number, dataFormat: 'NHWC'|'NCHW') {\n    this.outputShape = outputShape;\n    this.blockSize = blockSize;\n    this.dataFormat = dataFormat;\n    this.userCode = `\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = ${this.getHeightCoordString()};\n      int w = ${this.getWidthCoordString()};\n      int d = ${this.getDepthCoordString()};\n\n      int in_h = h / ${blockSize};\n      int offset_h = imod(h, ${blockSize});\n      int in_w = w / ${blockSize};\n      int offset_w = imod(w, ${blockSize});\n      int offset_d = (offset_h * ${blockSize} + offset_w) *\n        ${this.getOutputDepthSize()};\n      int in_d = d + offset_d;\n\n      float result = ${this.getInputSamplingString()};\n      setOutput(result);\n    }\n  `;\n  }\n\n  private getHeightCoordString(): string {\n    if (this.dataFormat === 'NHWC') {\n      return `coords[1]`;\n    } else {\n      return `coords[2]`;\n    }\n  }\n\n  private getWidthCoordString(): string {\n    if (this.dataFormat === 'NHWC') {\n      return `coords[2]`;\n    } else {\n      return `coords[3]`;\n    }\n  }\n\n  private getDepthCoordString(): string {\n    if (this.dataFormat === 'NHWC') {\n      return `coords[3]`;\n    } else {\n      return `coords[1]`;\n    }\n  }\n\n  private getOutputDepthSize(): number {\n    if (this.dataFormat === 'NHWC') {\n      return this.outputShape[3];\n    } else {\n      return this.outputShape[1];\n    }\n  }\n\n  private getInputSamplingString(): string {\n    if (this.dataFormat === 'NHWC') {\n      return `getX(b, in_h, in_w, in_d)`;\n    } else {\n      return `getX(b, in_d, in_h, in_w)`;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DepthToSpace, DepthToSpaceAttrs, DepthToSpaceInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {DepthToSpaceProgram} from '../depth_to_space_gpu';\n\nexport function depthToSpace(args: {\n  inputs: DepthToSpaceInputs,\n  backend: MathBackendWebGL,\n  attrs: DepthToSpaceAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {blockSize, dataFormat} = attrs;\n\n  const batchSize = x.shape[0];\n  const inputHeight = (dataFormat === 'NHWC') ? x.shape[1] : x.shape[2];\n  const inputWidth = (dataFormat === 'NHWC') ? x.shape[2] : x.shape[3];\n  const inputDepth = (dataFormat === 'NHWC') ? x.shape[3] : x.shape[1];\n\n  const outputHeight = inputHeight * blockSize;\n  const outputWidth = inputWidth * blockSize;\n  const outputDepth = inputDepth / (blockSize * blockSize);\n\n  const outputShape = (dataFormat === 'NHWC') ?\n      [batchSize, outputHeight, outputWidth, outputDepth] :\n      [batchSize, outputDepth, outputHeight, outputWidth];\n\n  const program = new DepthToSpaceProgram(outputShape, blockSize, dataFormat);\n  return backend.runWebGLProgram(program, [x], x.dtype);\n}\n\nexport const depthToSpaceConfig: KernelConfig = {\n  kernelName: DepthToSpace,\n  backendName: 'webgl',\n  kernelFunc: depthToSpace as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\n\nexport class DepthwiseConv2DProgram implements GPGPUProgram {\n  variableNames = ['x', 'W'];\n  outputShape: number[];\n  userCode: string;\n  enableShapeUniforms: boolean;\n  customUniforms = [\n    {name: 'pads', type: 'ivec2' as const },\n    {name: 'strides', type: 'ivec2' as const },\n    {name: 'dilations', type: 'ivec2' as const },\n    {name: 'inDims', type: 'ivec2' as const },\n  ];\n\n  constructor(\n      convInfo: backend_util.Conv2DInfo, addBias = false,\n      activation: string = null, hasPreluActivation = false,\n      hasLeakyReluAlpha = false) {\n    this.outputShape = convInfo.outShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const channelMul = convInfo.outChannels / convInfo.inChannels;\n\n    let activationSnippet = '', applyActivationSnippet = '';\n    if (activation) {\n      if (hasPreluActivation) {\n        activationSnippet = `float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${activation}\n        }`;\n      } else if (hasLeakyReluAlpha) {\n        activationSnippet = `float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${activation}\n        }`;\n      } else {\n        activationSnippet = `\n          float activation(float x) {\n            ${activation}\n          }\n        `;\n      }\n\n      applyActivationSnippet = `result = activation(result);`;\n    }\n\n    const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n\n    if (hasPreluActivation) {\n      this.variableNames.push('preluActivationWeights');\n    }\n    if (hasLeakyReluAlpha) {\n      this.variableNames.push('leakyreluAlpha');\n    }\n\n    this.userCode = `\n      ${activationSnippet}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${channelMul};\n        int q = d2 - d1 * ${channelMul};\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ${filterHeight}; wR++) {\n          int xR = xRCorner + wR * dilations[0];\n\n          if (xR < 0 || xR >= inDims[0]) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${filterWidth}; wC++) {\n            int xC = xCCorner + wC * dilations[1];\n\n            if (xC < 0 || xC >= inDims[1]) {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        ${addBiasSnippet}\n        ${applyActivationSnippet}\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, util} from '@tensorflow/tfjs-core';\n\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\n\nexport class DepthwiseConvPacked2DProgram implements GPGPUProgram {\n  variableNames = ['x', 'W'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n  enableShapeUniforms: boolean;\n  customUniforms = [\n    {name: 'pads', type: 'ivec2' as const },\n    {name: 'strides', type: 'ivec2' as const },\n    {name: 'dilations', type: 'ivec2' as const },\n    {name: 'inDims', type: 'ivec2' as const },\n  ];\n\n  constructor(\n      convInfo: backend_util.Conv2DInfo, addBias = false,\n      activation: string = null, hasPreluActivation = false,\n      hasLeakyReluAlpha = false) {\n    this.outputShape = convInfo.outShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n    const channelMul = convInfo.outChannels / convInfo.inChannels;\n    const padLeft = convInfo.padInfo.left;\n    const strideWidth = convInfo.strideWidth;\n    const dilationWidth = convInfo.dilationWidth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const texelsAcross = filterWidth;\n\n    let mainLoop = `\n      int xR; int xC; int xCOffset;\n      vec4 wTexel; vec4 previous; vec4 final;`;\n\n    for (let c = 0; c < filterWidth; c++) {\n      mainLoop += `\n          vec4 xTexelC${c * 2};\n          int xTexelC${c * 2}Ready;\n          vec4 xTexelC${c * 2 + 1};\n          int xTexelC${c * 2 + 1}Ready;\n          vec4 xC${c};`;\n    }\n\n    /**\n     * This vectorized implementation works by gathering the values needed for\n     * each output channel's dot product into vec4's and then multiplying them\n     * all together (this happens in the final double for-loop below). Most of\n     * the main loop consists of constructing these vec4's with the minimum\n     * number of texture2D calls, which means making use of all four returned\n     * values from a texture2D call at once.\n     */\n    mainLoop += `\n    for (int r = 0; r < ${filterHeight}; r++) {\n      `;\n    for (let c = 0; c < filterWidth; c++) {\n      mainLoop += `\n          xTexelC${c * 2} = vec4(0.0);\n          xTexelC${c * 2}Ready = 0;\n          xTexelC${c * 2 + 1} = vec4(0.0);\n          xTexelC${c * 2 + 1}Ready = 0;\n          xC${c} = vec4(0.0);`;\n    }\n    mainLoop += `\n        xR = xRCorner + r * dilations[0];\n        if (xR >=0 && xR < inDims[0]) {\n      `;\n\n    for (let texelC = 0; texelC < (texelsAcross + 1) / 2; texelC++) {\n      const colIndex = texelC * 2;\n\n      mainLoop += `\n          xC = xCCorner + ${colIndex * dilationWidth};\n          `;\n\n      if (strideWidth === 1) {\n        if (colIndex < filterWidth) {\n          // If padding is odd, the outer texels have to be composed.\n          if (padLeft % 2 === 1) {\n            // TODO: Ensure vec4 previous does not result in redundant sample,\n            // and avoid setting xTexelRC's that exceed the boundary in the\n            // first place rather than resetting them to vec4(0)).\n\n            // To compute xCOffset:\n            // - If padding is odd, we must add 1 to ensure we ask for an\n            // even-numbered row.\n            // - We subtract 2 to access the previous texel.\n\n            mainLoop += `\n                xCOffset = xC + 1;\n                if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${\n                colIndex}Ready == 0) {\n                  xTexelC${colIndex} = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${colIndex}.zw = vec2(0.0);\n                  }\n                  xTexelC${colIndex}Ready = 1;\n                }\n              `;\n            // This texel has been read in previous iteration if the dilation\n            // is 1.\n            if (dilationWidth === 1 && colIndex > 0) {\n              mainLoop += `\n                xC${colIndex} = vec4(xTexelC${colIndex - 2}.zw, xTexelC${\n                  colIndex}.xy);\n                `;\n            } else {\n              mainLoop += `\n                  xCOffset = xC + 1 - 2;\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                    previous = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      previous.zw = vec2(0.0);\n                    }\n\n                    xC${colIndex} = vec4(previous.zw, xTexelC${colIndex}.xy);\n                  } else {\n                    xC${colIndex} = vec4(0.0, 0.0, xTexelC${colIndex}.xy);\n                  }\n                  `;\n            }\n          } else {\n            // Padding is even, so xRC corresponds to a single texel.\n            mainLoop += `\n                if (xC >= 0 && xC < inDims[1] && xTexelC${colIndex}Ready == 0) {\n                  xTexelC${colIndex} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${colIndex}.zw = vec2(0.0);\n                  }\n                  xTexelC${colIndex}Ready = 1;\n                }\n\n                xC${colIndex} = xTexelC${colIndex};\n                `;\n          }\n\n          if (colIndex + 1 < filterWidth) {\n            // If dilation is even, the second entry should match the first\n            // (either both are composed or both are single samples). But if\n            // dilation is odd, then the second entry should be the opposite\n            // of the first (if the first is composed, the second is a single\n            // sample, and vice versa.)\n\n            const nextTexelOffset = padLeft % 2 === 0 ?\n                util.nearestLargerEven(dilationWidth) :\n                dilationWidth;\n\n            if ((dilationWidth % 2 === 0 && padLeft % 2 === 1) ||\n                (dilationWidth % 2 !== 0 && padLeft % 2 !== 1)) {\n              mainLoop += `\n                  xCOffset = xC + imod(pads[1], 2) + ${nextTexelOffset};\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${\n                  colIndex + 1}Ready == 0) {\n                    xTexelC${colIndex + 1} = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      xTexelC${colIndex + 1}.zw = vec2(0.0);\n                    }\n                    xTexelC${colIndex + 1}Ready = 1;\n                  }\n                  `;\n\n              // If dilation > 1 then the xRC's will not be able to share any\n              // values, so each xRC will require two unique calls to getX.\n              if (dilationWidth > 1) {\n                mainLoop += `\n                    xCOffset -= 2;\n                    if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                     previous = getX(batch, xR, xCOffset, d1);\n                     xC${colIndex + 1} = vec4(previous.zw, xTexelC${\n                       colIndex + 1}.xy);\n                    } else {\n                     xC${colIndex + 1} = vec4(0.0, 0.0, xTexelC${\n                       colIndex + 1}.xy);\n                    }\n                    `;\n              } else {\n                mainLoop += `\n                    xC${colIndex + 1} = vec4(xTexelC${colIndex}.zw, xTexelC${\n                    colIndex + 1}.xy);\n                    `;\n              }\n            } else {\n              // If dilation is 1 and padding is odd, we have already read the\n              // texel when constructing the previous x value. Here we can\n              // simply skip the texture read.\n              if (nextTexelOffset === 1) {\n                mainLoop += `\n                    xC${colIndex + 1} = xTexelC${colIndex};\n                    `;\n              } else {\n                mainLoop += `\n                    xCOffset = xC + ${nextTexelOffset};\n\n                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${\n                    colIndex + 1}Ready == 0) {\n                      xTexelC${colIndex + 1} = getX(batch, xR, xCOffset, d1);\n                      if (xCOffset + 1 >= inDims[1]) {\n                        xTexelC${colIndex + 1}.zw = vec2(0.0);\n                      }\n                      xTexelC${colIndex + 1}Ready = 1;\n                    }\n\n                    xC${colIndex + 1} = xTexelC${colIndex + 1};\n                    `;\n              }\n            }\n          }\n        }\n      } else {  // stride === 2\n        if (colIndex < filterWidth) {\n          // Depending on whether padLeft is even or odd, we want either the\n          // xy or zw channels from X texels for xC${colIndex}. If padLeft is\n          // even, xC${colIndex +1} is simply the zw channels of texels we've\n          // already sampled. But if padLeft is odd, xC{$c + 1}.zw will\n          // need to come from the xy channels of a new texel, hence the `\n          // vec4\n          // final` initialized below.\n          if (padLeft % 2 === 1) {\n            mainLoop += `\n                xCOffset = xC + 1 - strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${\n                colIndex}Ready == 0) {\n                  xTexelC${colIndex} = getX(batch, xR, xCOffset, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${colIndex}.zw = vec2(0.0);\n                  }\n                  xTexelC${colIndex}Ready = 1;\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${\n                colIndex + 1}Ready == 0) {\n                  xTexelC${colIndex + 1} = getX(batch, xR, xC + 1, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xC + 2 >= inDims[1]) {\n                    xTexelC${colIndex + 1}.zw = vec2(0.0);\n                  }\n                  xTexelC${colIndex + 1}Ready = 1;\n                }\n\n                xC${colIndex} = vec4(xTexelC${colIndex}.zw, xTexelC${\n                colIndex + 1}.zw);\n              `;\n\n            if (colIndex + 1 < filterWidth) {\n              mainLoop += `\n                  final = vec4(0.0);\n                  xCOffset = xC + 1 + strides[1];\n                  if(xCOffset >= 0 && xCOffset < inDims[1]) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xC${colIndex + 1} = vec4(xTexelC${colIndex + 1}.xy, final.xy);\n                `;\n            }\n          } else {\n            mainLoop += `\n                if(xC >= 0 && xC < inDims[1] && xTexelC${colIndex}Ready == 0) {\n                  xTexelC${colIndex} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${colIndex}.zw = vec2(0.0);\n                  }\n                  xTexelC${colIndex}Ready = 1;\n                }\n\n                xCOffset = xC + strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${\n                colIndex + 1}Ready == 0) {\n                  xTexelC${colIndex + 1} = getX(batch, xR, xCOffset, d1);\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${colIndex + 1}.zw = vec2(0.);\n                  }\n                  xTexelC${colIndex + 1}Ready = 1;\n                }\n\n                xC${colIndex} = vec4(\n                  xTexelC${colIndex}.xy, xTexelC${colIndex + 1}.xy);\n              `;\n\n            if (colIndex + 1 < filterWidth) {\n              mainLoop += `\n                  xC${colIndex + 1} = vec4(xTexelC${colIndex}.zw, xTexelC${\n                  colIndex + 1}.zw);\n                `;\n            }\n          }\n        }\n      }\n\n      // localize the dotProd accumulation within the loop, the theory is for\n      // GPU with limited cache, accumulate sum across large amount of\n      // veriables will cause lots of cache misses. (i.e. 5x5 filter will have\n      // 50 variables)\n      if (colIndex < filterWidth) {\n        mainLoop += `\n            wTexel = getW(r, ${colIndex}, d1, q);\n            dotProd += xC${colIndex} * vec4(wTexel.xz, wTexel.xz);\n          `;\n\n        if (colIndex + 1 < filterWidth) {\n          mainLoop += `\n              wTexel = getW(r, ${colIndex + 1}, d1, q);\n              dotProd += xC${colIndex + 1} * vec4(wTexel.xz, wTexel.xz);\n            `;\n        }\n      }\n    }\n    mainLoop += `\n    }\n  `;\n    mainLoop += `\n      }\n    `;\n\n    let activationSnippet = '', applyActivationSnippet = '';\n    if (activation) {\n      if (hasPreluActivation) {\n        activationSnippet = `vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${activation}\n        }`;\n      } else if (hasLeakyReluAlpha) {\n        activationSnippet = `vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${activation}\n        }`;\n      } else {\n        activationSnippet = `vec4 activation(vec4 x) {\n          ${activation}\n        }`;\n      }\n\n      applyActivationSnippet = `result = activation(result);`;\n    }\n\n    const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n\n    if (hasPreluActivation) {\n      this.variableNames.push('preluActivationWeights');\n    }\n    if (hasLeakyReluAlpha) {\n      this.variableNames.push('leakyreluAlpha');\n    }\n\n    this.userCode = `\n      ${activationSnippet}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${channelMul};\n        int q = d2 - d1 * ${channelMul};\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n        vec4 dotProd = vec4(0.000000000000001);\n\n        ${mainLoop}\n\n        vec4 result = dotProd - vec4(0.000000000000001);\n        ${addBiasSnippet}\n        ${applyActivationSnippet}\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DepthwiseConv2dNative, DepthwiseConv2dNativeAttrs, DepthwiseConv2dNativeInputs, env, KernelConfig, KernelFunc, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {DepthwiseConv2DProgram} from '../conv_gpu_depthwise';\nimport {DepthwiseConvPacked2DProgram} from '../conv_packed_gpu_depthwise';\n\nexport function depthwiseConv2dNative(args: {\n  inputs: DepthwiseConv2dNativeInputs,\n  attrs: DepthwiseConv2dNativeAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dilations, dimRoundingMode} = attrs;\n\n  let $dilations = dilations;\n  if ($dilations == null) {\n    $dilations = [1, 1];\n  }\n\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, $dilations),\n      () => 'Error in depthwiseConv2d: Either strides or dilations must be ' +\n          `1. Got strides ${strides} and dilations '${$dilations}'`);\n\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number, number], strides, $dilations,\n      pad, dimRoundingMode, true /* depthwise */);\n\n  let program: DepthwiseConv2DProgram|DepthwiseConvPacked2DProgram;\n  if (env().getBool('WEBGL_PACK_DEPTHWISECONV') && convInfo.strideWidth <= 2 &&\n      convInfo.outChannels / convInfo.inChannels === 1) {\n    program = new DepthwiseConvPacked2DProgram(convInfo);\n  } else {\n    program = new DepthwiseConv2DProgram(convInfo);\n  }\n  const customValues = [\n    [convInfo.padInfo.top, convInfo.padInfo.left],\n    [convInfo.strideHeight, convInfo.strideWidth],\n    [convInfo.dilationHeight, convInfo.dilationWidth],\n    [convInfo.inHeight, convInfo.inWidth]\n  ];\n  return backend.runWebGLProgram(program, [x, filter], 'float32', customValues);\n}\n\nexport const depthwiseConv2dNativeConfig: KernelConfig = {\n  kernelName: DepthwiseConv2dNative,\n  backendName: 'webgl',\n  kernelFunc: depthwiseConv2dNative as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class DepthwiseConv2DDerFilterProgram implements GPGPUProgram {\n  variableNames = ['x', 'dy'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.filterShape;\n\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    const channelMul = convInfo.outChannels / convInfo.inChannels;\n\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * ${channelMul} + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < ${convInfo.batchSize}; b++) {\n          for (int yR = 0; yR < ${convInfo.outHeight}; yR++) {\n            int xR = wR + yR * ${strideHeight} - ${padTop};\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${convInfo.outWidth}; yC++) {\n              int xC = wC + yC * ${strideWidth} - ${padLeft};\n\n              if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n\nexport class DepthwiseConv2DDerInputProgram implements GPGPUProgram {\n  variableNames = ['dy', 'W'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.inShape;\n\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n\n    const padTop = filterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = filterWidth - 1 - convInfo.padInfo.left;\n    const channelMul = convInfo.outChannels / convInfo.inChannels;\n\n    this.userCode = `\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < ${filterHeight}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${filterHeight} - 1 - wR;\n\n          for (int wC = 0; wC < ${filterWidth}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${filterWidth} - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < ${channelMul}; dm++) {\n              int d2 = d1 * ${channelMul} + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DepthwiseConv2dNativeBackpropFilter, DepthwiseConv2dNativeBackpropFilterAttrs, DepthwiseConv2dNativeBackpropFilterInputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {DepthwiseConv2DDerFilterProgram} from '../conv_backprop_gpu_depthwise';\n\nexport function depthwiseConv2dNativeBackpropFilter(args: {\n  inputs: DepthwiseConv2dNativeBackpropFilterInputs,\n  attrs: DepthwiseConv2dNativeBackpropFilterAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x, dy} = inputs;\n  const {strides, dilations, pad, dimRoundingMode, filterShape} = attrs;\n\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number], filterShape, strides,\n      dilations, pad, dimRoundingMode, true /* depthwise */);\n\n  const program = new DepthwiseConv2DDerFilterProgram(convInfo);\n  return backend.runWebGLProgram(program, [x, dy], 'float32');\n}\n\nexport const depthwiseConv2dNativeBackpropFilterConfig: KernelConfig = {\n  kernelName: DepthwiseConv2dNativeBackpropFilter,\n  backendName: 'webgl',\n  kernelFunc: depthwiseConv2dNativeBackpropFilter as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DepthwiseConv2dNativeBackpropInput, DepthwiseConv2dNativeBackpropInputAttrs, DepthwiseConv2dNativeBackpropInputInputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {DepthwiseConv2DDerInputProgram} from '../conv_backprop_gpu_depthwise';\n\nexport function depthwiseConv2dNativeBackpropInput(args: {\n  inputs: DepthwiseConv2dNativeBackpropInputInputs,\n  attrs: DepthwiseConv2dNativeBackpropInputAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {dy, filter} = inputs;\n  const {strides, dilations, pad, dimRoundingMode, inputShape} = attrs;\n\n  const convInfo = backend_util.computeConv2DInfo(\n      inputShape, filter.shape as [number, number, number, number], strides,\n      dilations, pad, dimRoundingMode, true /* depthwise */);\n\n  const program = new DepthwiseConv2DDerInputProgram(convInfo);\n  return backend.runWebGLProgram(program, [dy, filter], 'float32');\n}\n\nexport const depthwiseConv2dNativeBackpropInputConfig: KernelConfig = {\n  kernelName: DepthwiseConv2dNativeBackpropInput,\n  backendName: 'webgl',\n  kernelFunc: depthwiseConv2dNativeBackpropInput as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class DiagProgram implements GPGPUProgram {\n  variableNames = ['X'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(size: number) {\n    this.outputShape = [size, size];\n    this.userCode = `\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Diag, DiagInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {DiagProgram} from '../diag_gpu';\nimport {reshape} from './Reshape';\n\nexport function diag(args: {inputs: DiagInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  const outShape = [...x.shape, ...x.shape];\n  const xSize = util.sizeFromShape(x.shape);\n\n  const flat = reshape({inputs: {x}, backend, attrs: {shape: [xSize]}});\n\n  const program = new DiagProgram(xSize);\n  const res = backend.runWebGLProgram(program, [flat], flat.dtype);\n\n  const out = reshape({inputs: {x: res}, backend, attrs: {shape: outShape}});\n\n  backend.disposeIntermediateTensorInfo(flat);\n  backend.disposeIntermediateTensorInfo(res);\n\n  return out;\n}\n\nexport const diagConfig: KernelConfig = {\n  kernelName: Diag,\n  backendName: 'webgl',\n  kernelFunc: diag as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class Dilation2DProgram implements GPGPUProgram {\n  variableNames = ['x', 'W'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.outShape;\n\n    const {\n      inHeight,\n      inWidth,\n      padInfo,\n      strideHeight,\n      strideWidth,\n      filterHeight,\n      filterWidth,\n      dilationHeight,\n      dilationWidth\n    } = convInfo;\n\n    const {top: padTop, left: padLeft} = padInfo;\n\n    this.userCode = `\n      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n      const float neg_infinity = -3.4e38;\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.w;\n        ivec2 outTopLeftCorner =\n            coords.yz * strides - pads;\n        int hBeg = outTopLeftCorner.x;\n        int wBeg = outTopLeftCorner.y;\n\n        float curVal = neg_infinity;\n        for (int h = 0; h < ${filterHeight}; h++) {\n          int hIn = hBeg + h * ${dilationHeight};\n\n          if (hIn >= 0 && hIn < ${inHeight}) {\n            for (int w = 0; w < ${filterWidth}; w++) {\n              int wIn = wBeg + w * ${dilationWidth};\n\n              if (wIn >= 0 && wIn < ${inWidth}) {\n                float xVal = getX(batch, hIn, wIn, d1);\n                float wVal = getW(h, w, d1);\n\n                float val = xVal + wVal;\n                if (val > curVal) {\n                  curVal = val;\n                }\n              }\n            }\n          }\n        }\n\n        float result = curVal;\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Dilation2D, Dilation2DAttrs, Dilation2DInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Dilation2DProgram} from '../dilation_gpu';\nimport {reshape} from './Reshape';\n\nexport function dilation2D(args: {\n  inputs: Dilation2DInputs,\n  attrs: Dilation2DAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dilations} = attrs;\n\n  const convInfo = backend_util.computeDilation2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number], strides, pad,\n      'NHWC' /* dataFormat */, dilations);\n  let out: TensorInfo;\n\n  const program = new Dilation2DProgram(convInfo);\n  out = backend.runWebGLProgram(program, [x, filter], 'float32');\n\n  const outReshaped =\n      reshape({inputs: {x: out}, backend, attrs: {shape: convInfo.outShape}});\n  backend.disposeIntermediateTensorInfo(out);\n\n  return outReshaped;\n}\n\nexport const dilation2DConfig: KernelConfig = {\n  kernelName: Dilation2D,\n  backendName: 'webgl',\n  kernelFunc: dilation2D as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Einsum, EinsumAttrs, EinsumInputs, KernelConfig, KernelFunc, Tensor, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {multiply} from './Multiply';\nimport {reshape} from './Reshape';\nimport {sum} from './Sum';\nimport {transpose} from './Transpose';\n\nexport function einsum(\n    args:\n        {inputs: EinsumInputs, backend: MathBackendWebGL, attrs: EinsumAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {equation} = attrs;\n  const tensors = inputs as Tensor[];\n\n  const {allDims, summedDims, idDims} =\n      backend_util.decodeEinsumEquation(equation, tensors.length);\n  backend_util.checkEinsumDimSizes(allDims.length, idDims, tensors);\n  const {path, steps} = backend_util.getEinsumComputePath(summedDims, idDims);\n\n  const nSteps = steps.length;\n  let out: TensorInfo|null = null;\n  let numDimsRemaining = allDims.length;\n  const tensorsToDispose: TensorInfo[] = [];\n  for (let i = 0; i < nSteps; ++i) {\n    for (const idTerm of steps[i]) {\n      const {permutationIndices: perm, expandDims: dimsToExpand} =\n          backend_util.getEinsumPermutation(numDimsRemaining, idDims[idTerm]);\n      let x: TensorInfo;\n      if (backend_util.isIdentityPermutation(perm)) {\n        x = tensors[idTerm];\n      } else {\n        x = transpose({inputs: {x: tensors[idTerm]}, backend, attrs: {perm}});\n        tensorsToDispose.push(x);\n      }\n      const targetShape: number[] = x.shape.slice();\n      for (let k = 0; k < dimsToExpand.length; ++k) {\n        targetShape.splice(dimsToExpand[k], 0, 1);\n      }\n\n      if (!util.arraysEqual(x.shape, targetShape)) {\n        x = reshape({inputs: {x}, backend, attrs: {shape: targetShape}});\n        tensorsToDispose.push(x);\n      }\n      if (out === null) {\n        out = x;\n      } else {\n        // tslint:disable-next-line: no-unnecessary-type-assertion\n        out = multiply({inputs: {a: x, b: out}, backend}) as TensorInfo;\n        tensorsToDispose.push(out);\n      }\n    }\n    if (i < nSteps - 1) {\n      if (path[i] >= 0) {\n        out = sum({\n          inputs: {x: out},\n          backend,\n          attrs: {\n            axis: path[i] - (allDims.length - numDimsRemaining),\n            keepDims: false\n          }\n        });\n        tensorsToDispose.push(out);\n      }\n      numDimsRemaining--;\n    }\n  }\n\n  // Clean up intermediate tensors.\n  for (const tensorInfo of tensorsToDispose) {\n    if (tensorInfo === out) {\n      continue;\n    }\n    backend.disposeIntermediateTensorInfo(tensorInfo);\n  }\n\n  return out;\n}\n\nexport const einsumConfig: KernelConfig = {\n  kernelName: Einsum,\n  backendName: 'webgl',\n  kernelFunc: einsum as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Elu, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst ELU = `return (x >= 0.0) ? x : (exp(x) - 1.0);`;\n\nconst ELU_PACKED = `\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n`;\n\nconst elu = unaryKernelFunc({opSnippet: ELU, packedOpSnippet: ELU_PACKED});\n\nexport const eluConfig: KernelConfig = {\n  kernelName: Elu,\n  backendName: 'webgl',\n  kernelFunc: elu as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {EluGrad, EluGradInputs, env, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {BinaryOpProgram} from '../binaryop_gpu';\nimport {BinaryOpPackedProgram} from '../binaryop_packed_gpu';\n\nconst ELU_DER = `return (b >= 0.0) ? a : a * (b + 1.0);`;\nconst ELU_DER_PACKED = `\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n`;\n\nexport const eluGrad =\n    (args: {inputs: EluGradInputs, backend: MathBackendWebGL}): TensorInfo => {\n      const {inputs, backend} = args;\n      const {dy, y} = inputs;\n\n      const program = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ?\n          new BinaryOpPackedProgram(ELU_DER_PACKED, dy.shape, y.shape) :\n          new BinaryOpProgram(ELU_DER, dy.shape, y.shape);\n      return backend.runWebGLProgram(program, [dy, y], dy.dtype);\n    };\n\nexport const eluGradConfig: KernelConfig = {\n  kernelName: EluGrad,\n  backendName: 'webgl',\n  kernelFunc: eluGrad as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Equal, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {equalImplCPU} from '../kernel_utils/shared';\nconst PACKED_EQUAL = `\n  return vec4(equal(a, b));\n`;\n\nconst EQUAL = `return float(a == b);`;\n\nexport const equal = binaryKernelFunc({\n  opSnippet: EQUAL,\n  packedOpSnippet: PACKED_EQUAL,\n  dtype: 'bool',\n  cpuKernelImpl: equalImplCPU,\n});\n\nexport const equalConfig: KernelConfig = {\n  kernelName: Equal,\n  backendName: 'webgl',\n  kernelFunc: equal as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Erf, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst ERF = `\n  // Error function is calculated approximately with elementary function.\n  // See \"Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables\", Abramowitz and Stegun.\n  float p = ${backend_util.ERF_P};\n  float a1 = ${backend_util.ERF_A1};\n  float a2 = ${backend_util.ERF_A2};\n  float a3 = ${backend_util.ERF_A3};\n  float a4 = ${backend_util.ERF_A4};\n  float a5 = ${backend_util.ERF_A5};\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n`;\n\nexport const erf = unaryKernelFunc({opSnippet: ERF});\n\nexport const erfConfig: KernelConfig = {\n  kernelName: Erf,\n  backendName: 'webgl',\n  kernelFunc: erf,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Exp, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {CHECK_NAN_SNIPPET_UNARY, unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {expImplCPU} from '../kernel_utils/shared';\n\nexport const EXP = CHECK_NAN_SNIPPET_UNARY + `\n  return exp(x);\n`;\n\nconst EXP_PACKED = `\n  vec4 result = exp(x);\n  bvec4 isNaN = isnan(x);\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n`;\n\nexport const exp = unaryKernelFunc({\n  opSnippet: EXP,\n  packedOpSnippet: EXP_PACKED,\n  cpuKernelImpl: expImplCPU,\n  dtype: 'float32',\n});\n\nexport const expConfig: KernelConfig = {\n  kernelName: Exp,\n  backendName: 'webgl',\n  kernelFunc: exp as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ExpandDims, ExpandDimsAttrs, ExpandDimsInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reshape} from './Reshape';\n\nexport function expandDims(args: {\n  inputs: ExpandDimsInputs,\n  attrs: ExpandDimsAttrs,\n  backend: MathBackendWebGL\n}): TensorInfo {\n  const {inputs, attrs, backend} = args;\n  const {dim} = attrs;\n  const {input} = inputs;\n\n  const inputRank = input.shape.length;\n  const newShape = input.shape.slice();\n  let $dim = dim;\n  if (dim < 0) {\n    // Negative value is counted from the tail of rank.\n    util.assert(\n        -(inputRank + 1) <= dim,\n        () => `Axis must be in the interval [${- (inputRank + 1)}, ${\n            inputRank}]`);\n    $dim = inputRank + dim + 1;\n  }\n  newShape.splice($dim, 0, 1);\n\n  return reshape({inputs: {x: input}, backend, attrs: {shape: newShape}});\n}\n\nexport const expandDimsConfig: KernelConfig = {\n  kernelName: ExpandDims,\n  backendName: 'webgl',\n  kernelFunc: expandDims as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Expm1, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {expm1ImplCPU} from '../kernel_utils/shared';\n\nconst EXPM1 = `return exp(x) - 1.0;`;\n\nexport const expm1 = unaryKernelFunc(\n    {opSnippet: EXPM1, packedOpSnippet: EXPM1, cpuKernelImpl: expm1ImplCPU});\n\nexport const expm1Config: KernelConfig = {\n  kernelName: Expm1,\n  backendName: 'webgl',\n  kernelFunc: expm1 as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class FFTProgram implements GPGPUProgram {\n  variableNames = ['real', 'imag'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      component: 'real'|'imag', inputShape: [number, number],\n      inverse: boolean) {\n    const innerDim = inputShape[1];\n    this.outputShape = inputShape;\n\n    const exponentMultiplierSnippet =\n        inverse ? `2.0 * ${Math.PI}` : `-2.0 * ${Math.PI}`;\n    const resultDenominator = inverse ? `${innerDim}.0` : '1.0';\n\n    let opString: string;\n    if (component === 'real') {\n      opString = 'return real * expR - imag * expI;';\n    } else if (component === 'imag') {\n      opString = 'return real * expI + imag * expR;';\n    } else {\n      throw new Error(\n          `FFT component must be either \"real\" or \"imag\", got ${component}.`);\n    }\n\n    this.userCode = `\n      const float exponentMultiplier = ${exponentMultiplierSnippet};\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        ${opString}\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(${innerDim});\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < ${innerDim}; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / ${resultDenominator};\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {FFTProgram} from '../fft_gpu';\n\nimport {complex} from './Complex';\nimport {reshape} from './Reshape';\n\nexport function fftImpl(\n    x: TensorInfo, inverse: boolean, backend: MathBackendWebGL): TensorInfo {\n  const xData = backend.texData.get(x.dataId);\n\n  const inputSize = util.sizeFromShape(x.shape);\n  // Collapse all outer dimensions to a single batch dimension.\n  const innerDimensionSize = x.shape[x.shape.length - 1];\n  const batch = inputSize / innerDimensionSize;\n\n  const input2D = reshape(\n      {inputs: {x}, backend, attrs: {shape: [batch, innerDimensionSize]}});\n\n  const xShape = input2D.shape as [number, number];\n  const realProgram = new FFTProgram('real', xShape, inverse);\n  const imagProgram = new FFTProgram('imag', xShape, inverse);\n\n  const inputs = [\n    {\n      dataId: xData.complexTensorInfos.real.dataId,\n      dtype: xData.complexTensorInfos.real.dtype,\n      shape: xShape\n    },\n    {\n      dataId: xData.complexTensorInfos.imag.dataId,\n      dtype: xData.complexTensorInfos.imag.dtype,\n      shape: xShape\n    }\n  ];\n\n  const realPart = backend.runWebGLProgram(realProgram, inputs, 'float32');\n  const imagPart = backend.runWebGLProgram(imagProgram, inputs, 'float32');\n\n  const complexOutput =\n      complex({inputs: {real: realPart, imag: imagPart}, backend});\n\n  backend.disposeIntermediateTensorInfo(realPart);\n  backend.disposeIntermediateTensorInfo(imagPart);\n\n  const complexOutputReshaped =\n      reshape({inputs: {x: complexOutput}, backend, attrs: {shape: x.shape}});\n\n  backend.disposeIntermediateTensorInfo(input2D);\n  backend.disposeIntermediateTensorInfo(complexOutput);\n  return complexOutputReshaped;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FFT, FFTInputs, KernelConfig, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {fftImpl} from './FFT_impl';\n\nexport function fft(args: {inputs: FFTInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n\n  return fftImpl(input, false /* inverse */, backend);\n}\n\nexport const fftConfig: KernelConfig = {\n  kernelName: FFT,\n  backendName: 'webgl',\n  kernelFunc: fft\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {UniformType} from './shader_compiler';\n\nexport class FillProgram implements GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[] = [];\n  userCode: string;\n  customUniforms = [{name: 'value', type: 'float' as UniformType}];\n\n  constructor(shape: number[], value: number) {\n    this.variableNames = ['x'];\n    this.outputShape = shape;\n\n    this.userCode = `\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Fill, FillAttrs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {FillProgram} from '../fill_gpu';\n\nexport function fill(args: {backend: MathBackendWebGL, attrs: FillAttrs}):\n    TensorInfo {\n  const {backend, attrs} = args;\n  const {shape, value} = attrs;\n  let {dtype} = attrs;\n\n  dtype = dtype || util.inferDtype(value);\n\n  if (dtype === 'string') {\n    // String type should be handled in CPU memory.\n    const values = util.getArrayFromDType(dtype, util.sizeFromShape(shape));\n    values.fill(value as string);\n    return backend.makeTensorInfo(shape, dtype, values);\n  } else {\n    const program = new FillProgram(shape, value as number);\n    const customValues = [[value as number]];\n    return backend.runWebGLProgram(program, [], dtype, customValues);\n  }\n}\n\nexport const fillConfig: KernelConfig = {\n  kernelName: Fill,\n  backendName: 'webgl',\n  kernelFunc: fill as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class FlipLeftRightProgram implements GPGPUProgram {\n  variableNames = ['Image'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(imageShape: [number, number, number, number]) {\n    const imageWidth = imageShape[2];\n    this.outputShape = imageShape;\n\n    this.userCode = `\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n\n          int coordX = ${imageWidth} - x - 1;\n          float outputValue;\n          if(coordX >= 0 && coordX < ${imageWidth}) {\n            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);\n          } else {\n            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Tensor4D} from '@tensorflow/tfjs-core';\nimport {FlipLeftRight, FlipLeftRightInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {FlipLeftRightProgram} from '../flip_left_right_gpu';\n\nexport const flipLeftRightConfig: KernelConfig = {\n  kernelName: FlipLeftRight,\n  backendName: 'webgl',\n  kernelFunc: ({inputs, backend}) => {\n    const {image} = inputs as FlipLeftRightInputs;\n    const webglBackend = backend as MathBackendWebGL;\n\n    const program = new FlipLeftRightProgram((image as Tensor4D).shape);\n    const output = webglBackend.runWebGLProgram(program, [image], image.dtype);\n    return output;\n  }\n};\n","\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Floor, KernelConfig} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {floorImplCPU} from '../kernel_utils/shared';\n\nconst FLOOR = `return floor(x);`;\n\nexport const floor = unaryKernelFunc(\n    {opSnippet: FLOOR, packedOpSnippet: FLOOR, cpuKernelImpl: floorImplCPU});\n\nexport const floorConfig: KernelConfig = {\n  kernelName: Floor,\n  backendName: 'webgl',\n  kernelFunc: floor,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FloorDiv, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\n// We use native integer division to deal with floating point imprecision. Since\n// we implement floor division and glsl implements truncated division, we\n// correct for this by subtracting 1 from result when the result is negative and\n// there is a remainder.\nconst INT_DIV = `\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n`;\n\nconst INT_DIV_PACKED = `\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n`;\n\nexport const floorDiv = binaryKernelFunc(\n    {opSnippet: INT_DIV, packedOpSnippet: INT_DIV_PACKED, dtype: 'int32'});\n\nexport const floorDivConfig: KernelConfig = {\n  kernelName: FloorDiv,\n  backendName: 'webgl',\n  kernelFunc: floorDiv as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from '../../glsl_version';\nimport {GPGPUProgram} from '../../gpgpu_math';\n\nexport class FromPixelsProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n\n  constructor(outputShape: number[]) {\n    const glsl = getGlslDifferences();\n    const [height, width, ] = outputShape;\n    this.outputShape = outputShape;\n    this.userCode = `\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${width}.0, ${height}.0);\n\n        vec4 values = ${glsl.texture2D}(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from '../../glsl_version';\nimport {GPGPUProgram} from '../../gpgpu_math';\n\nexport class FromPixelsPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n  packedInputs = false;\n  packedOutput = true;\n\n  constructor(outputShape: number[]) {\n    const glsl = getGlslDifferences();\n    const [height, width, ] = outputShape;\n    this.outputShape = outputShape;\n    this.userCode = `\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2(${width}.0, ${height}.0);\n            vec4 values = ${glsl.texture2D}(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        ${glsl.output} = result;\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\nimport {FromPixels, FromPixelsAttrs, FromPixelsInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {TextureUsage} from '../tex_util';\n\nimport {FromPixelsProgram} from './FromPixels_utils/from_pixels_gpu';\nimport {FromPixelsPackedProgram} from './FromPixels_utils/from_pixels_packed_gpu';\n\nexport const fromPixelsConfig: KernelConfig = {\n  kernelName: FromPixels,\n  backendName: 'webgl',\n  kernelFunc: fromPixels as unknown as KernelFunc,\n};\n\nlet fromPixels2DContext: CanvasRenderingContext2D;\nlet willReadFrequently = env().getBool('CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU');\n\nfunction fromPixels(args: {\n  inputs: FromPixelsInputs,\n  backend: MathBackendWebGL,\n  attrs: FromPixelsAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  let {pixels} = inputs;\n  const {numChannels} = attrs;\n\n  const isVideo = typeof (HTMLVideoElement) !== 'undefined' &&\n      pixels instanceof HTMLVideoElement;\n  const isImage = typeof (HTMLImageElement) !== 'undefined' &&\n      pixels instanceof HTMLImageElement;\n  const [width, height] = isVideo ?\n      [\n        (pixels as HTMLVideoElement).videoWidth,\n        (pixels as HTMLVideoElement).videoHeight\n      ] :\n      [pixels.width, pixels.height];\n\n  const texShape: [number, number] = [height, width];\n  const outShape = [height, width, numChannels];\n\n  if (isImage || isVideo) {\n    const newWillReadFrequently =\n        env().getBool('CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU');\n    if (fromPixels2DContext == null ||\n        newWillReadFrequently !== willReadFrequently) {\n      willReadFrequently = newWillReadFrequently;\n      fromPixels2DContext =\n          document.createElement('canvas').getContext(\n              '2d', {willReadFrequently});\n    }\n\n    fromPixels2DContext.canvas.width = width;\n    fromPixels2DContext.canvas.height = height;\n    fromPixels2DContext.drawImage(\n        pixels as HTMLVideoElement | HTMLImageElement | ImageBitmap, 0, 0,\n        width, height);\n    pixels = fromPixels2DContext.canvas;\n  }\n\n  const tempPixelHandle = backend.makeTensorInfo(texShape, 'int32');\n  // This is a byte texture with pixels.\n  backend.texData.get(tempPixelHandle.dataId).usage = TextureUsage.PIXELS;\n  backend.gpgpu.uploadPixelDataToTexture(\n      backend.getTexture(tempPixelHandle.dataId), pixels as ImageData);\n  const program = env().getBool('WEBGL_PACK') ?\n      new FromPixelsPackedProgram(outShape) :\n      new FromPixelsProgram(outShape);\n  const res = backend.runWebGLProgram(program, [tempPixelHandle], 'int32');\n  backend.disposeData(tempPixelHandle.dataId);\n  return res;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, env, FusedConv2D, FusedConv2DAttrs, FusedConv2DInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Conv2DProgram} from '../conv_gpu';\nimport {Conv2DPackedProgram} from '../conv_packed_gpu';\nimport {mapActivationToShaderProgram} from '../kernel_utils/kernel_funcs_utils';\n\nimport {conv2dByMatMul, conv2dWithIm2Row} from './Conv2D_impl';\nimport {reshape} from './Reshape';\n\nexport function fusedConv2d(args: {\n  inputs: FusedConv2DInputs,\n  attrs: FusedConv2DAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x, filter, bias, preluActivationWeights} = inputs;\n  const {\n    strides,\n    pad,\n    dataFormat,\n    dilations,\n    dimRoundingMode,\n    activation,\n    leakyreluAlpha\n  } = attrs;\n\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number, number], strides, dilations, pad,\n      dimRoundingMode, false /* depthwise */, $dataFormat);\n  let out: TensorInfo;\n  const intermediates: TensorInfo[] = [];\n\n  const hasBias = bias != null;\n  const hasPreluActivationWeights = preluActivationWeights != null;\n  const hasLeakyreluAlpha = activation === 'leakyrelu';\n\n  const prepareInputs = (): TensorInfo[] => {\n    const inputs: TensorInfo[] = [x, filter];\n\n    // If the input is a 1-D tensor, align it with the channels.\n    //\n    // For fusedConv2d, the inputs (x, W, bias, preluActivationWeights) are\n    // supposed to be aligned with the dataFormat. The 4-D tensor inputs or\n    // scalar inputs are originally aligned, but the 1-D tensor inputs are\n    // supposed to be aligned with the channels (only bias and PReLU activation\n    // weights could be a 1-D tensor).\n    const alignInputWithDataFormat =\n        (input: TensorInfo, dataFormat: 'NHWC'|'NCHW'): TensorInfo => {\n          if (dataFormat === 'NCHW' && input.shape.length === 1 &&\n              input.shape[0] !== 1) {\n            const alignedInput = reshape({\n              inputs: {x: input},\n              backend,\n              attrs: {shape: [input.shape[0], 1, 1]}\n            });\n            intermediates.push(alignedInput);\n            return alignedInput;\n          }\n          return input;\n        };\n\n    if (hasBias) {\n      inputs.push(alignInputWithDataFormat(bias, dataFormat));\n    }\n\n    if (hasPreluActivationWeights) {\n      inputs.push(alignInputWithDataFormat(preluActivationWeights, dataFormat));\n    }\n\n    if (hasLeakyreluAlpha) {\n      const $leakyreluAlpha = backend.makeTensorInfo(\n          [], 'float32',\n          util.createScalarValue(leakyreluAlpha as unknown as 'float32', 'float32'));\n      inputs.push($leakyreluAlpha);\n      intermediates.push($leakyreluAlpha);\n    }\n    return inputs;\n  };\n\n  if (convInfo.filterHeight === 1 && convInfo.filterWidth === 1 &&\n      convInfo.dilationHeight === 1 && convInfo.dilationWidth === 1 &&\n      convInfo.strideHeight === 1 && convInfo.strideWidth === 1 &&\n      (convInfo.padInfo.type === 'SAME' || convInfo.padInfo.type === 'VALID')) {\n    out = conv2dByMatMul({\n      x,\n      filter,\n      convInfo,\n      backend,\n      bias,\n      activation,\n      preluActivationWeights,\n      leakyreluAlpha\n    });\n  } else if (convInfo.strideWidth <= 2 && $dataFormat === 'channelsLast'\n    && env().getBool('WEBGL_EXP_CONV')\n    ) {\n      const fusedActivation =\n          activation ? mapActivationToShaderProgram(activation, true) : null;\n    const program = new Conv2DPackedProgram(\n      convInfo, hasBias, fusedActivation, hasPreluActivationWeights,\n      hasLeakyreluAlpha);\n    const customValues = [\n      [convInfo.padInfo.top, convInfo.padInfo.left],\n      [convInfo.strideHeight, convInfo.strideWidth],\n      [convInfo.dilationHeight, convInfo.dilationWidth],\n      [convInfo.inHeight, convInfo.inWidth]\n    ];\n    const inputs = prepareInputs();\n    out = backend.runWebGLProgram(program, inputs, 'float32', customValues);\n  } else if (env().getBool('WEBGL_CONV_IM2COL')) {\n    out = conv2dWithIm2Row({\n      x,\n      filter,\n      convInfo,\n      backend,\n      bias,\n      activation,\n      preluActivationWeights,\n      leakyreluAlpha\n    });\n  } else {\n    const fusedActivation =\n        activation ? mapActivationToShaderProgram(activation, false) : null;\n    const program = new Conv2DProgram(\n        convInfo, hasBias, fusedActivation, hasPreluActivationWeights,\n        hasLeakyreluAlpha);\n\n    const inputs = prepareInputs();\n    out = backend.runWebGLProgram(program, inputs, 'float32');\n  }\n\n  const outReshaped =\n      reshape({inputs: {x: out}, backend, attrs: {shape: convInfo.outShape}});\n\n  intermediates.push(out);\n  intermediates.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return outReshaped;\n}\n\nexport const fusedConv2DConfig: KernelConfig = {\n  kernelName: FusedConv2D,\n  backendName: 'webgl',\n  kernelFunc: fusedConv2d as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, env, FusedDepthwiseConv2D, FusedDepthwiseConv2DAttrs, FusedDepthwiseConv2DInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {DepthwiseConv2DProgram} from '../conv_gpu_depthwise';\nimport {DepthwiseConvPacked2DProgram} from '../conv_packed_gpu_depthwise';\nimport {mapActivationToShaderProgram} from '../kernel_utils/kernel_funcs_utils';\n\nexport function fusedDepthwiseConv2D(args: {\n  inputs: FusedDepthwiseConv2DInputs,\n  attrs: FusedDepthwiseConv2DAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x, filter, bias, preluActivationWeights} = inputs;\n  const {strides, pad, dilations, dimRoundingMode, activation, leakyreluAlpha} =\n      attrs;\n\n  const intermediates: TensorInfo[] = [];\n\n  let $dilations = dilations;\n  if ($dilations == null) {\n    $dilations = [1, 1];\n  }\n\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, $dilations),\n      () => 'Error in depthwiseConv2d: Either strides or dilations must be ' +\n          `1. Got strides ${strides} and dilations '${$dilations}'`);\n\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number, number], strides, $dilations,\n      pad, dimRoundingMode, true /* depthwise */);\n\n  const shouldPackDepthwiseConv = env().getBool('WEBGL_PACK_DEPTHWISECONV') &&\n      convInfo.strideWidth <= 2 &&\n      convInfo.outChannels / convInfo.inChannels === 1;\n  const fusedActivation = activation ?\n      mapActivationToShaderProgram(activation, shouldPackDepthwiseConv) :\n      null;\n  const programInputs: TensorInfo[] = [x, filter];\n\n  const hasBias = bias != null;\n  const hasPreluActivationWeights = preluActivationWeights != null;\n  const hasLeakyreluAlpha = activation === 'leakyrelu';\n\n  if (hasBias) {\n    programInputs.push(bias);\n  }\n  if (hasPreluActivationWeights) {\n    programInputs.push(preluActivationWeights);\n  }\n  if (hasLeakyreluAlpha) {\n    const $leakyreluAlpha = backend.makeTensorInfo(\n        [], 'float32',\n        util.createScalarValue(leakyreluAlpha as unknown as 'float32',\n                               'float32'));\n    programInputs.push($leakyreluAlpha);\n    intermediates.push($leakyreluAlpha);\n  }\n\n  let program: DepthwiseConv2DProgram|DepthwiseConvPacked2DProgram;\n  if (shouldPackDepthwiseConv) {\n    program = new DepthwiseConvPacked2DProgram(\n        convInfo, hasBias, fusedActivation, hasPreluActivationWeights,\n        hasLeakyreluAlpha);\n  } else {\n    program = new DepthwiseConv2DProgram(\n        convInfo, hasBias, fusedActivation, hasPreluActivationWeights,\n        hasLeakyreluAlpha);\n  }\n  const customValues = [\n    [convInfo.padInfo.top, convInfo.padInfo.left],\n    [convInfo.strideHeight, convInfo.strideWidth],\n    [convInfo.dilationHeight, convInfo.dilationWidth],\n    [convInfo.inHeight, convInfo.inWidth]\n  ];\n  const result =\n      backend.runWebGLProgram(program, programInputs, 'float32', customValues);\n\n  intermediates.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return result;\n}\n\nexport const fusedDepthwiseConv2DConfig: KernelConfig = {\n  kernelName: FusedDepthwiseConv2D,\n  backendName: 'webgl',\n  kernelFunc: fusedDepthwiseConv2D as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class GatherNDProgram implements GPGPUProgram {\n  variableNames = ['x', 'indices'];\n  outputShape: number[];\n  userCode: string;\n  constructor(\n      private sliceDim: number, private strides: number[], shape: number[],\n      private paramsShape: number[]) {\n    this.outputShape = shape;\n    const dtype = getCoordsDataType(shape.length);\n\n    let mainLoop = `\n    int index;`;\n    for (let j = 0; j < this.sliceDim; j++) {\n      mainLoop += `\n          index = round(getIndices(coords[0], ${j}));\n          out_of_bounds = out_of_bounds || index < 0;\n          out_of_bounds = out_of_bounds || index >= ${this.paramsShape[j]};\n          flattenIndex += index * ${this.strides[j]};`;\n    }\n\n    this.userCode = `\n         void main() {\n          ${dtype} coords = getOutputCoords();\n          int flattenIndex = 0;\n          bool out_of_bounds = false;\n\n          ${mainLoop}\n\n          setOutput(out_of_bounds ? 0.0 : getX(flattenIndex, coords[1]));\n        }\n      `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, GatherNd, GatherNdInputs, KernelConfig, KernelFunc, Rank, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {GatherNDProgram} from '../gather_nd_gpu';\nimport {gatherNdImplCPU} from '../kernel_utils/shared';\n\nimport {reshape} from './Reshape';\n\nexport function gatherNd(\n    args: {inputs: GatherNdInputs, backend: MathBackendWebGL}): TensorInfo {\n  const {inputs, backend} = args;\n  const {params, indices} = inputs;\n\n  const indicesShape = indices.shape;\n  const sliceRank = indicesShape[indicesShape.length - 1];\n  const paramsSize = util.sizeFromShape(params.shape);\n\n  const [resultShape, numSlices, sliceSize, strides] =\n      backend_util.prepareAndValidate(params, indices);\n\n  const flattenIndices = reshape(\n      {inputs: {x: indices}, backend, attrs: {shape: [numSlices, sliceRank]}});\n  const flattenX = reshape({\n    inputs: {x: params},\n    backend,\n    attrs: {shape: [(util.sizeFromShape(params.shape) / sliceSize), sliceSize]}\n  });\n\n  if (backend.shouldExecuteOnCPU([params, indices]) ||\n      params.dtype === 'string') {\n    const indicesData = backend.readSync(indices.dataId) as TypedArray;\n    const paramsBuf = backend.bufferSync<Rank, 'float32'>(params);\n    const outValue = gatherNdImplCPU(\n        indicesData, paramsBuf, params.dtype, numSlices, sliceRank, sliceSize,\n        strides, params.shape, paramsSize);\n\n    return backend.makeTensorInfo(resultShape, params.dtype, outValue.values);\n  }\n  const program =\n      new GatherNDProgram(sliceRank, strides, [numSlices, sliceSize], \n        params.shape);\n  const res = backend.runWebGLProgram(\n      program, [flattenX, flattenIndices], flattenX.dtype);\n\n  const reshaped =\n      reshape({inputs: {x: res}, backend, attrs: {shape: resultShape}});\n\n  backend.disposeIntermediateTensorInfo(flattenIndices);\n  backend.disposeIntermediateTensorInfo(flattenX);\n  backend.disposeIntermediateTensorInfo(res);\n\n  return reshaped;\n}\n\nexport const gatherNdConfig: KernelConfig = {\n  kernelName: GatherNd,\n  backendName: 'webgl',\n  kernelFunc: gatherNd as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport type GatherShape = [number, number, number, number];\n\nexport class GatherProgram implements GPGPUProgram {\n  variableNames = ['A', 'indices'];\n  outputShape: number[];\n  userCode: string;\n  rank: number;\n\n  constructor(aShape: GatherShape, outputShape: GatherShape) {\n    this.outputShape = outputShape;\n    this.rank = outputShape.length;\n    const dtype = getCoordsDataType(this.rank);\n    const sourceCoords = getSourceCoords(aShape, 2);\n\n    this.userCode = `\n      void main() {\n        ${dtype} resRC = getOutputCoords();\n        int index = int(getIndices(resRC.x, resRC.z));\n        float inBounds = (index >= 0) && (index < ${aShape[2]}) ? 1.0 : 0.0;\n        setOutput(inBounds * getA(${sourceCoords}));\n      }\n    `;\n  }\n}\n\n// The input and output are always flattened into rank 4 tensors.\nfunction getSourceCoords(aShape: GatherShape, axis: number): string {\n  const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w'];\n\n  const sourceCoords = [];\n  for (let i = 0; i < aShape.length; i++) {\n    if (i === 2) {\n      sourceCoords.push('index');\n    } else {\n      sourceCoords.push(`${currentCoords[i]}`);\n    }\n  }\n  return sourceCoords.join();\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, GatherV2, GatherV2Attrs, GatherV2Inputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util, env} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {GatherProgram, GatherShape} from '../gather_gpu';\nimport {gatherV2ImplCPU} from '../kernel_utils/shared';\n\nimport {reshape} from './Reshape';\n\nexport function gatherV2(args: {\n  inputs: GatherV2Inputs,\n  backend: MathBackendWebGL,\n  attrs: GatherV2Attrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, indices} = inputs;\n  const {axis, batchDims} = attrs;\n\n  const parsedAxis = util.parseAxisParam(axis, x.shape)[0];\n  if (env().get('DEBUG')) {\n    // In debug mode, throw error when any index is out of bound.\n    // Otherwise, just fill out of bounds with zeroes.\n    const indicesVals = backend.readSync(indices.dataId) as TypedArray;\n    const axisDim = x.shape[parsedAxis];\n    for (let i = 0; i < indicesVals.length; ++i) {\n      const index = indicesVals[i];\n      util.assert(\n        index <= axisDim - 1 && index >= 0,\n        () =>\n          `GatherV2: the index value ${index} is not in [0, ${axisDim - 1}]`);\n    }\n  }\n\n  const shapeInfo = backend_util.segment_util.collectGatherOpShapeInfo(\n      x, indices, parsedAxis, batchDims);\n\n  const indicesSize = util.sizeFromShape(indices.shape);\n\n  const toDispose = [];\n\n  const flattenX = reshape({\n    inputs: {x},\n    backend,\n    attrs: {\n      shape: [\n        shapeInfo.batchSize, shapeInfo.outerSize, shapeInfo.dimSize,\n        shapeInfo.sliceSize\n      ]\n    }\n  });\n\n  const flattenIndex = reshape({\n    inputs: {x: indices},\n    backend,\n    attrs: {shape: [shapeInfo.batchSize, indicesSize / shapeInfo.batchSize]}\n  });\n\n  toDispose.push(flattenX);\n  toDispose.push(flattenIndex);\n\n  const flattenOutputShape = [\n    shapeInfo.batchSize, shapeInfo.outerSize, indicesSize / shapeInfo.batchSize,\n    shapeInfo.sliceSize\n  ];\n\n  if (backend.shouldExecuteOnCPU([x, indices]) || x.dtype === 'string') {\n    const indicesBuf = backend.bufferSync(flattenIndex);\n    const xBuf = backend.bufferSync(flattenX);\n    const outBuf = gatherV2ImplCPU(xBuf, indicesBuf, flattenOutputShape);\n\n    toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n    return backend.makeTensorInfo(\n        shapeInfo.outputShape, outBuf.dtype, outBuf.values as TypedArray);\n  }\n\n  const program = new GatherProgram(flattenX.shape as GatherShape,\n                                    flattenOutputShape as GatherShape);\n  const res = backend.runWebGLProgram(\n      program, [flattenX, flattenIndex], flattenX.dtype);\n  toDispose.push(res);\n\n  const reshaped = reshape(\n      {inputs: {x: res}, backend, attrs: {shape: shapeInfo.outputShape}});\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n  return reshaped;\n}\n\nexport const gatherV2Config: KernelConfig = {\n  kernelName: GatherV2,\n  backendName: 'webgl',\n  kernelFunc: gatherV2 as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Greater, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {greaterImplCPU} from '../kernel_utils/shared';\n\nconst GREATER = `return float(a > b);`;\nconst GREATER_PACKED = `\n  return vec4(greaterThan(a, b));\n`;\n\nexport const greater = binaryKernelFunc({\n  opSnippet: GREATER,\n  packedOpSnippet: GREATER_PACKED,\n  cpuKernelImpl: greaterImplCPU,\n  dtype: 'bool'\n});\n\nexport const greaterConfig: KernelConfig = {\n  kernelName: Greater,\n  backendName: 'webgl',\n  kernelFunc: greater as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GreaterEqual, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {greaterEqualImplCPU} from '../kernel_utils/shared';\n\nconst GREATER_EQUAL = `return float(a >= b);`;\nconst GREATER_EQUAL_PACKED = `\n  return vec4(greaterThanEqual(a, b));\n`;\n\nexport const greaterEqual = binaryKernelFunc({\n  opSnippet: GREATER_EQUAL,\n  packedOpSnippet: GREATER_EQUAL_PACKED,\n  dtype: 'bool',\n  cpuKernelImpl: greaterEqualImplCPU\n});\n\nexport const greaterEqualConfig: KernelConfig = {\n  kernelName: GreaterEqual,\n  backendName: 'webgl',\n  kernelFunc: greaterEqual as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IFFT, IFFTInputs, KernelConfig, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {fftImpl} from './FFT_impl';\n\nexport function ifft(args: {inputs: IFFTInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n\n  return fftImpl(input, true /* inverse */, backend);\n}\n\nexport const ifftConfig: KernelConfig = {\n  kernelName: IFFT,\n  backendName: 'webgl',\n  kernelFunc: ifft\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IsFinite, KernelConfig} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst IS_FINITE = `return float(!isnan(x) && !isinf(x));`;\n\nexport const isFinite = unaryKernelFunc({opSnippet: IS_FINITE, dtype: 'bool'});\n\nexport const isFiniteConfig: KernelConfig = {\n  kernelName: IsFinite,\n  backendName: 'webgl',\n  kernelFunc: isFinite,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IsInf, KernelConfig} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst IS_INF = `return float(isinf(x));`;\n\nexport const isInf = unaryKernelFunc({opSnippet: IS_INF, dtype: 'bool'});\n\nexport const isInfConfig: KernelConfig = {\n  kernelName: IsInf,\n  backendName: 'webgl',\n  kernelFunc: isInf,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IsNan, KernelConfig} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst IS_NAN = `return float(isnan(x));`;\n\nexport const isNaN = unaryKernelFunc({opSnippet: IS_NAN, dtype: 'bool'});\n\nexport const isNaNConfig: KernelConfig = {\n  kernelName: IsNan,\n  backendName: 'webgl',\n  kernelFunc: isNaN,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Less} from '@tensorflow/tfjs-core';\n\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {lessImplCPU} from '../kernel_utils/shared';\n\nconst LESS = `return float(a < b);`;\nconst LESS_PACKED = `\n  return vec4(lessThan(a, b));\n`;\n\nexport const less = binaryKernelFunc({\n  opSnippet: LESS,\n  packedOpSnippet: LESS_PACKED,\n  cpuKernelImpl: lessImplCPU,\n  dtype: 'bool'\n});\n\nexport const lessConfig: KernelConfig = {\n  kernelName: Less,\n  backendName: 'webgl',\n  kernelFunc: less as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LessEqual} from '@tensorflow/tfjs-core';\n\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {lessEqualImplCPU} from '../kernel_utils/shared';\n\nexport const LESS_EQUAL = `return float(a <= b);`;\nexport const LESS_EQUAL_PACKED = `\n  return vec4(lessThanEqual(a, b));\n`;\n\nexport const lessEqual = binaryKernelFunc({\n  opSnippet: LESS_EQUAL,\n  packedOpSnippet: LESS_EQUAL_PACKED,\n  cpuKernelImpl: lessEqualImplCPU,\n  dtype: 'bool'\n});\n\nexport const lessEqualConfig: KernelConfig = {\n  kernelName: LessEqual,\n  backendName: 'webgl',\n  kernelFunc: lessEqual as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LinSpace, LinSpaceAttrs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {linSpaceImplCPU} from '../kernel_utils/shared';\n\nexport function linSpace(\n    args: {backend: MathBackendWebGL, attrs: LinSpaceAttrs}): TensorInfo {\n  const {backend, attrs} = args;\n  const {start, stop, num} = attrs;\n\n  // TODO: Use CPU implementation due to the precision problem in Safari.\n  const outVals = linSpaceImplCPU(start, stop, num);\n  return backend.makeTensorInfo([outVals.length], 'float32', outVals);\n}\n\nexport const linSpaceConfig: KernelConfig = {\n  kernelName: LinSpace,\n  backendName: 'webgl',\n  kernelFunc: linSpace as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Log} from '@tensorflow/tfjs-core';\n\nimport {CHECK_NAN_SNIPPET_UNARY, unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {logImplCPU} from '../kernel_utils/shared';\n\n// Windows chrome return 0 if the input is negative value. We will specifically\n// return NaN if the input is 0 to solve compatiblity issue.\nconst LOG = CHECK_NAN_SNIPPET_UNARY + `\n  return x < 0.0 ? 0./0. : log(x);\n`;\n\nconst LOG_PACKED = `\n  vec4 result = log(x);\n  bvec4 isNaN = isnan(x);\n  result.r = isNaN.r ? x.r : (x.r < 0.0 ? 0./0. : result.r);\n  result.g = isNaN.g ? x.g : (x.g < 0.0 ? 0./0. : result.g);\n  result.b = isNaN.b ? x.b : (x.b < 0.0 ? 0./0. : result.b);\n  result.a = isNaN.a ? x.a : (x.a < 0.0 ? 0./0. : result.a);\n  return result;\n`;\n\nexport const log = unaryKernelFunc(\n    {opSnippet: LOG, packedOpSnippet: LOG_PACKED, cpuKernelImpl: logImplCPU});\n\nexport const logConfig: KernelConfig = {\n  kernelName: Log,\n  backendName: 'webgl',\n  kernelFunc: log as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Log1p} from '@tensorflow/tfjs-core';\n\nimport {CHECK_NAN_SNIPPET_UNARY, unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst LOG1P = CHECK_NAN_SNIPPET_UNARY + `\n  return log(1.0 + x);\n`;\n\nexport const log1p = unaryKernelFunc({opSnippet: LOG1P});\n\nexport const log1pConfig: KernelConfig = {\n  kernelName: Log1p,\n  backendName: 'webgl',\n  kernelFunc: log1p,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LogicalAnd} from '@tensorflow/tfjs-core';\n\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst LOGICAL_AND = `return float(a >= 1.0 && b >= 1.0);`;\nconst LOGICAL_AND_PACKED = `\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n`;\n\nexport const logicalAnd = binaryKernelFunc({\n  opSnippet: LOGICAL_AND,\n  packedOpSnippet: LOGICAL_AND_PACKED,\n  dtype: 'bool'\n});\n\nexport const logicalAndConfig: KernelConfig = {\n  kernelName: LogicalAnd,\n  backendName: 'webgl',\n  kernelFunc: logicalAnd as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, LogicalNot} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst LOGICAL_NOT = `return float(!(x >= 1.0));`;\n\nexport const logicalNot = unaryKernelFunc({opSnippet: LOGICAL_NOT});\n\nexport const logicalNotConfig: KernelConfig = {\n  kernelName: LogicalNot,\n  backendName: 'webgl',\n  kernelFunc: logicalNot,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LogicalOr} from '@tensorflow/tfjs-core';\n\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst LOGICAL_OR = `return float(a >= 1.0 || b >= 1.0);`;\nconst LOGICAL_OR_PACKED = `\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n`;\n\nexport const logicalOr = binaryKernelFunc(\n    {opSnippet: LOGICAL_OR, packedOpSnippet: LOGICAL_OR_PACKED, dtype: 'bool'});\n\nexport const logicalOrConfig: KernelConfig = {\n  kernelName: LogicalOr,\n  backendName: 'webgl',\n  kernelFunc: logicalOr as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class LRNProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      xShape: number[], radius: number, bias: number, alpha: number,\n      beta: number) {\n    const rad = radius;\n    const maxD = xShape[3] - 1;\n    this.outputShape = xShape;\n\n    // optimize pow(bias + alpha * sum, -beta)\n    // src: https://github.com/tensorflow/tensorflow/..\n    // blob/26033a1644a9c4a5fbe3170ab2e864b6a4ccd4ca/..\n    // tensorflow/core/kernels/mkl_lrn_op.cc#L320\n    let powOperator;\n    const basis = `float(${bias}) + float(${alpha}) * sum`;\n    if (beta === 0.5) {\n      powOperator = `inversesqrt(${basis})`;\n    } else if (beta === 1.0) {\n      powOperator = `1.0/(${basis})`;\n    } else {\n      powOperator = `exp(log(${basis}) * float(-${beta}));`;\n    }\n\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -${rad}; j <= ${rad}; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  ${maxD}) {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * ${powOperator};\n        setOutput(val);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class LRNPackedProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[] = [];\n  userCode: string;\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(\n      xShape: number[], radius: number, bias: number, alpha: number,\n      beta: number) {\n    const rad = radius;\n    const maxD = xShape[3] - 1;\n    this.outputShape = xShape;\n\n    // optimize pow(bias + alpha * sum, -beta)\n    // src: https://github.com/tensorflow/tensorflow/..\n    // blob/26033a1644a9c4a5fbe3170ab2e864b6a4ccd4ca/..\n    // tensorflow/core/kernels/mkl_lrn_op.cc#L320\n    let powOperator;\n    const basis = `float(${bias}) + float(${alpha}) * sum`;\n    if (beta === 0.5) {\n      powOperator = `inversesqrt(${basis})`;\n    } else if (beta === 1.0) {\n      powOperator = `1.0/(${basis})`;\n    } else {\n      powOperator = `exp(log(${basis}) * float(-${beta}));`;\n    }\n\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < ${this.outputShape[3]};\n        bool hasNextRow = c < ${this.outputShape[2]};\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - ${rad};\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - ${rad}; j <= ${rad}; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${maxD}));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * ${powOperator};\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, LRN, LRNAttrs, LRNInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {LRNProgram} from '../lrn_gpu';\nimport {LRNPackedProgram} from '../lrn_packed_gpu';\n\nexport const lrn =\n    (args: {inputs: LRNInputs, backend: MathBackendWebGL, attrs: LRNAttrs}):\n        TensorInfo => {\n          const {inputs, backend, attrs} = args;\n          const {x} = inputs;\n          const {depthRadius, bias, alpha, beta} = attrs;\n\n          const program = env().getBool('WEBGL_PACK_NORMALIZATION') ?\n              new LRNPackedProgram(x.shape, depthRadius, bias, alpha, beta) :\n              new LRNProgram(x.shape, depthRadius, bias, alpha, beta);\n          return backend.runWebGLProgram(program, [x], x.dtype);\n        };\n\n// tslint:disable-next-line: variable-name\nexport const LRNConfig: KernelConfig = {\n  kernelName: LRN,\n  backendName: 'webgl',\n  kernelFunc: lrn as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class LRNGradProgram implements GPGPUProgram {\n  variableNames = ['inputImage', 'outputImage', 'dy'];\n  outputShape: number[] = [];\n  userCode: string;\n  depthRadius: number;\n  bias: number;\n  alpha: number;\n  beta: number;\n  depth: number;\n\n  constructor(\n      inputShape: number[], depthRadius: number, bias: number, alpha: number,\n      beta: number) {\n    this.outputShape = inputShape;\n    this.depth = inputShape[3];\n    this.depthRadius = depthRadius;\n    this.bias = bias;\n    this.alpha = alpha;\n    this.beta = beta;\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < ${this.depth}; ++d) {\n          int depthBegin = int(max(0.0, float(d - ${depthRadius})));\n          int depthEnd = int(min(float(${this.depth}),\n              float(d + ${depthRadius} + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = ${this.depth};\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(${alpha}) * norm + float(${bias});\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(${alpha})\n                * float(${beta})\n                * getInputImage(b, r, c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * ${beta});\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LRNGrad, LRNGradAttrs, LRNGradInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {LRNGradProgram} from '../lrn_grad_gpu';\n\nexport const lrnGrad = (args: {\n  inputs: LRNGradInputs,\n  backend: MathBackendWebGL,\n  attrs: LRNGradAttrs\n}): TensorInfo => {\n  const {inputs, backend, attrs} = args;\n  const {x, y, dy} = inputs;\n  const {depthRadius, bias, alpha, beta} = attrs;\n\n  const program = new LRNGradProgram(x.shape, depthRadius, bias, alpha, beta);\n  return backend.runWebGLProgram(program, [x, y, dy], x.dtype);\n};\n\n// tslint:disable-next-line: variable-name\nexport const LRNGradConfig: KernelConfig = {\n  kernelName: LRNGrad,\n  backendName: 'webgl',\n  kernelFunc: lrnGrad as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelFunc, Max, MaxAttrs, MaxInputs, TensorInfo} from '@tensorflow/tfjs-core';\nimport {backend_util, KernelConfig, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {maxImplCPU} from '../kernel_utils/shared';\n\nimport {maxImpl} from './Max_impl';\nimport {transposeImpl, transposeImplCPU} from './Transpose_impl';\n\nexport function max(\n    args: {inputs: MaxInputs, backend: MathBackendWebGL, attrs: MaxAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {reductionIndices, keepDims} = attrs;\n\n  const xRank = x.shape.length;\n\n  const origAxes = util.parseAxisParam(reductionIndices, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  const maxInputIsTransposed = permutedAxes != null;\n  const shouldExecuteOnCPU = backend.shouldExecuteOnCPU([x]);\n\n  let maxInput = x;\n  if (maxInputIsTransposed) {\n    if (shouldExecuteOnCPU) {\n      const xTexData = backend.texData.get(maxInput.dataId);\n      const values = xTexData.values as TypedArray;\n\n      const newShape: number[] = new Array(xRank);\n      for (let i = 0; i < newShape.length; i++) {\n        newShape[i] = x.shape[permutedAxes[i]];\n      }\n      const maxInputValues =\n          transposeImplCPU(values, x.shape, x.dtype, permutedAxes, newShape);\n\n      maxInput = backend.makeTensorInfo(newShape, x.dtype);\n      const maxInputData = backend.texData.get(maxInput.dataId);\n      maxInputData.values = maxInputValues;\n    } else {\n      maxInput = transposeImpl(x, permutedAxes, backend);\n    }\n\n    axes = backend_util.getInnerMostAxes(axes.length, xRank);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('max', axes, xRank);\n  const [maxOutShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(maxInput.shape, axes);\n\n  let outShape = maxOutShape;\n  if (keepDims) {\n    // rather than reshape at the end, set the target shape here.\n    outShape = backend_util.expandShapeToKeepDim(maxOutShape, origAxes);\n  }\n\n  let out;\n  if (shouldExecuteOnCPU) {\n    const xTexData = backend.texData.get(maxInput.dataId);\n    const values = xTexData.values as TypedArray;\n\n    const outValues =\n        maxImplCPU(values, util.sizeFromShape(reduceShape), outShape, x.dtype);\n\n    out = backend.makeTensorInfo(outShape, x.dtype);\n    const outData = backend.texData.get(out.dataId);\n    outData.values = outValues;\n  } else {\n    out = maxImpl(maxInput, reduceShape, outShape, backend);\n  }\n\n  if (maxInputIsTransposed) {\n    backend.disposeIntermediateTensorInfo(maxInput);\n  }\n\n  return out;\n}\n\nexport const maxConfig: KernelConfig = {\n  kernelName: Max,\n  backendName: 'webgl',\n  kernelFunc: max as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reduce} from '../kernel_utils/reduce';\nimport {reshape} from '../kernels/Reshape';\n\nexport function maxImpl(\n    x: TensorInfo, reduceShape: number[], outShape: number[],\n    backend: MathBackendWebGL): TensorInfo {\n  const inSize = util.sizeFromShape(reduceShape);\n  const xSize = util.sizeFromShape(x.shape);\n  const batchSize = xSize / inSize;\n  const reshapedInput =\n      reshape({inputs: {x}, attrs: {shape: [batchSize, inSize]}, backend});\n\n  const reduced = reduce(reshapedInput, x.dtype, 'max', backend);\n  const reshapedOutput =\n      reshape({inputs: {x: reduced}, attrs: {shape: outShape}, backend});\n\n  backend.disposeIntermediateTensorInfo(reshapedInput);\n  backend.disposeIntermediateTensorInfo(reduced);\n\n  return reshapedOutput;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Maximum} from '@tensorflow/tfjs-core';\n\nimport {CHECK_NAN_SNIPPET} from '../binaryop_gpu';\nimport {CHECK_NAN_SNIPPET_PACKED} from '../binaryop_packed_gpu';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {maximumImplCPU} from '../kernel_utils/shared';\n\nconst MAXIMUM = CHECK_NAN_SNIPPET + `\n  return max(a, b);\n`;\n\nconst MAXIMUM_PACKED = `\n  vec4 result = vec4(max(a, b));\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  ` +\n    CHECK_NAN_SNIPPET_PACKED + `\n  return result;\n`;\n\nexport const maximum = binaryKernelFunc({\n  opSnippet: MAXIMUM,\n  packedOpSnippet: MAXIMUM_PACKED,\n  cpuKernelImpl: maximumImplCPU\n});\n\nexport const maximumConfig: KernelConfig = {\n  kernelName: Maximum,\n  backendName: 'webgl',\n  kernelFunc: maximum as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, KernelConfig, KernelFunc, MaxPool, MaxPoolAttrs, MaxPoolInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Pool2DProgram} from '../pool_gpu';\nimport {assertNotComplex} from '../webgl_util';\nimport {identity} from './Identity';\n\nexport function maxPool(args: {\n  inputs: MaxPoolInputs,\n  backend: MathBackendWebGL,\n  attrs: MaxPoolAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  assertNotComplex(x, 'maxPool');\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n  const dilations = 1;\n\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, dilations),\n      () => 'Error in maxPool: Either strides or dilations must be 1. ' +\n          `Got strides ${strides} and dilations '${dilations}'`);\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode);\n  if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 &&\n      util.arraysEqual(convInfo.inShape, convInfo.outShape)) {\n    return identity({inputs: {x}, backend});\n  }\n  const maxPoolProgram = new Pool2DProgram(convInfo, 'max', false);\n  return backend.runWebGLProgram(maxPoolProgram, [x], x.dtype);\n}\n\nexport const maxPoolConfig: KernelConfig = {\n  kernelName: MaxPool,\n  backendName: 'webgl',\n  kernelFunc: maxPool as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, KernelConfig, KernelFunc, MaxPool3D, MaxPool3DAttrs, MaxPool3DInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Pool3DProgram} from '../pool_gpu';\n\nexport function maxPool3d(args: {\n  inputs: MaxPool3DInputs,\n  backend: MathBackendWebGL,\n  attrs: MaxPool3DAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {filterSize, strides, pad, dataFormat, dimRoundingMode} = attrs;\n  const dilations: [number, number, number] = [1, 1, 1];\n\n  const convInfo = backend_util.computePool3DInfo(\n      x.shape as [number, number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode, dataFormat);\n  const maxPoolProgram = new Pool3DProgram(convInfo, 'max', false);\n  return backend.runWebGLProgram(maxPoolProgram, [x], x.dtype);\n}\n\nexport const maxPool3DConfig: KernelConfig = {\n  kernelName: MaxPool3D,\n  backendName: 'webgl',\n  kernelFunc: maxPool3d as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class MaxPool2DBackpropProgram implements GPGPUProgram {\n  variableNames = ['dy', 'maxPos'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.inShape;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n\n    const lastIndex = effectiveFilterHeight * effectiveFilterWidth - 1;\n    this.userCode = `\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${effectiveFilterHeight};\n          wR += ${dilationHeight}) {\n          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${effectiveFilterWidth}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = ${lastIndex} - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * ${effectiveFilterWidth} + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n\nexport class MaxPool3DBackpropProgram implements GPGPUProgram {\n  variableNames = ['dy', 'maxPos'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv3DInfo) {\n    this.outputShape = convInfo.inShape;\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n\n    const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n\n    const lastIndex =\n        effectiveFilterDepth * effectiveFilterHeight * effectiveFilterWidth - 1;\n    this.userCode = `\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${effectiveFilterDepth};\n           wD += ${dilationDepth}) {\n          float dyD = float(dyDCorner + wD) / ${strideDepth}.0;\n\n          if (dyD < 0.0 || dyD >= ${convInfo.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${effectiveFilterHeight};\n              wR += ${dilationHeight}) {\n            float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${effectiveFilterWidth};\n                wC += ${dilationWidth}) {\n              float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = ${lastIndex} -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * ${effectiveFilterHeight} * ${effectiveFilterWidth} +\n                  wR * ${effectiveFilterWidth} + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, KernelConfig, KernelFunc, MaxPool3DGrad, MaxPool3DGradAttrs, MaxPool3DGradInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {MaxPool3DBackpropProgram} from '../max_pool_backprop_gpu';\nimport {Pool3DProgram} from '../pool_gpu';\n\nexport function maxPool3DGrad(args: {\n  inputs: MaxPool3DGradInputs,\n  backend: MathBackendWebGL,\n  attrs: MaxPool3DGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input} = inputs;\n  const x = input;\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n  const dilations: [number, number, number] = [1, 1, 1];\n\n  const convInfo = backend_util.computePool3DInfo(\n      x.shape as [number, number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode);\n\n  const maxPool3dPositionsProgram =\n      new Pool3DProgram(convInfo, 'max', true /* get positions */);\n  const maxPool3dPositions =\n      backend.runWebGLProgram(maxPool3dPositionsProgram, [x], x.dtype);\n  const maxPoolBackpropProgram = new MaxPool3DBackpropProgram(convInfo);\n  const result = backend.runWebGLProgram(\n      maxPoolBackpropProgram, [dy, maxPool3dPositions], x.dtype);\n  backend.disposeIntermediateTensorInfo(maxPool3dPositions);\n  return result;\n}\n\nexport const maxPool3DGradConfig: KernelConfig = {\n  kernelName: MaxPool3DGrad,\n  backendName: 'webgl',\n  kernelFunc: maxPool3DGrad as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, KernelConfig, KernelFunc, MaxPoolGrad, MaxPoolGradAttrs, MaxPoolGradInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {MaxPool2DBackpropProgram} from '../max_pool_backprop_gpu';\nimport {Pool2DProgram} from '../pool_gpu';\nimport {assertNotComplex} from '../webgl_util';\n\nexport function maxPoolGrad(args: {\n  inputs: MaxPoolGradInputs,\n  backend: MathBackendWebGL,\n  attrs: MaxPoolGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input, output} = inputs;\n  const x = input;\n  assertNotComplex([input, output], 'maxPoolGrad');\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      1 /* dilations */, pad, dimRoundingMode);\n  const getPositions = true;\n  const maxPoolPositionsProgram =\n      new Pool2DProgram(convInfo, 'max', getPositions);\n  const maxPoolPositions: TensorInfo =\n      backend.runWebGLProgram(maxPoolPositionsProgram, [x], x.dtype);\n\n  const maxPoolBackPropProgram = new MaxPool2DBackpropProgram(convInfo);\n  const result = backend.runWebGLProgram(\n      maxPoolBackPropProgram, [dy, maxPoolPositions], x.dtype);\n  backend.disposeIntermediateTensorInfo(maxPoolPositions);\n  return result;\n}\n\nexport const maxPoolGradConfig: KernelConfig = {\n  kernelName: MaxPoolGrad,\n  backendName: 'webgl',\n  kernelFunc: maxPoolGrad as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {MaxPoolWithArgmax, MaxPoolWithArgmaxAttrs, MaxPoolWithArgmaxInputs} from '@tensorflow/tfjs-core';\nimport {backend_util, KernelConfig, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {maxPoolWithArgmaxImpl} from './MaxPoolWithArgmax_impl';\n\nexport const maxPoolWithArgmaxConfig: KernelConfig = {\n  kernelName: MaxPoolWithArgmax,\n  backendName: 'webgl',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {x} = inputs as MaxPoolWithArgmaxInputs;\n    const {filterSize, strides, pad, includeBatchInIndex} =\n        attrs as unknown as MaxPoolWithArgmaxAttrs;\n    const webglBackend = backend as MathBackendWebGL;\n\n    util.assert(\n        x.shape.length === 4,\n        () => `Error in maxPool: input must be rank 4 but got rank ${\n            x.shape.length}.`);\n    const dilations: [number, number] = [1, 1];\n    util.assert(\n        backend_util.eitherStridesOrDilationsAreOne(strides, dilations),\n        () => 'Error in maxPool: Either strides or dilations must be 1. ' +\n            `Got strides ${strides} and dilations '${dilations}'`);\n\n    const convInfo = backend_util.computePool2DInfo(\n        x.shape as [number, number, number, number], filterSize, strides,\n        dilations, pad);\n\n    const [result, indexes] =\n        maxPoolWithArgmaxImpl(x, includeBatchInIndex, convInfo, webglBackend);\n    return [result, indexes];\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Pool2DProgram} from '../pool_gpu';\n\nexport function maxPoolWithArgmaxImpl(\n    x: TensorInfo, includeBatchInIndex: boolean,\n    convInfo: backend_util.Conv2DInfo,\n    backend: MathBackendWebGL): TensorInfo[] {\n  let program = new Pool2DProgram(convInfo, 'max', false);\n  const poolOutput = backend.runWebGLProgram(program, [x], 'float32');\n\n  program = new Pool2DProgram(convInfo, 'max', true, true, includeBatchInIndex);\n  const indexOutput = backend.runWebGLProgram(program, [x], 'float32');\n  return [poolOutput, indexOutput];\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, Mean, MeanAttrs, MeanInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {meanImpl} from './Mean_impl';\nimport {transposeImpl, transposeImplCPU} from './Transpose_impl';\n\nexport const meanConfig: KernelConfig = {\n  kernelName: Mean,\n  backendName: 'webgl',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {x} = inputs as MeanInputs;\n    const {keepDims, axis} = attrs as unknown as MeanAttrs;\n    const webglBackend = backend as MathBackendWebGL;\n\n    const xRank = x.shape.length;\n    const origAxes = util.parseAxisParam(axis, x.shape);\n\n    let axes = origAxes;\n    const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n    const meanInputIsTransposed = permutedAxes != null;\n    const shouldExecuteOnCPU = webglBackend.shouldExecuteOnCPU([x]);\n\n    const intermediates: TensorInfo[] = [];\n\n    let meanInput = x;\n    if (meanInputIsTransposed) {\n      if (shouldExecuteOnCPU) {\n        const xTexData = webglBackend.texData.get(meanInput.dataId);\n        const values = xTexData.values as TypedArray;\n\n        const newShape: number[] = new Array(xRank);\n        for (let i = 0; i < newShape.length; i++) {\n          newShape[i] = x.shape[permutedAxes[i]];\n        }\n        const meanInputValues =\n            transposeImplCPU(values, x.shape, x.dtype, permutedAxes, newShape);\n\n        meanInput = webglBackend.makeTensorInfo(newShape, x.dtype);\n        const meanInputData = webglBackend.texData.get(meanInput.dataId);\n        meanInputData.values = meanInputValues;\n      } else {\n        meanInput = transposeImpl(x, permutedAxes, webglBackend);\n      }\n\n      intermediates.push(meanInput);\n      axes = backend_util.getInnerMostAxes(axes.length, xRank);\n    }\n\n    backend_util.assertAxesAreInnerMostDims('sum', axes, xRank);\n    const [meanOutShape, reduceShape] =\n        backend_util.computeOutAndReduceShapes(meanInput.shape, axes);\n\n    let outShape = meanOutShape;\n    if (keepDims) {\n      // rather than reshape at the end, set the target shape here.\n      outShape = backend_util.expandShapeToKeepDim(meanOutShape, origAxes);\n    }\n\n    const out = meanImpl(meanInput, reduceShape, outShape, webglBackend);\n    for (const i of intermediates) {\n      webglBackend.disposeIntermediateTensorInfo(i);\n    }\n\n    return out;\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reduce} from '../kernel_utils/reduce';\nimport {reshape} from '../kernels/Reshape';\n\nexport function meanImpl(\n    x: TensorInfo, reduceShape: number[], outShape: number[],\n    backend: MathBackendWebGL): TensorInfo {\n  const inSize = util.sizeFromShape(reduceShape);\n  const xSize = util.sizeFromShape(x.shape);\n  const batchSize = xSize / inSize;\n  const reshapedInput =\n      reshape({inputs: {x}, attrs: {shape: [batchSize, inSize]}, backend});\n\n  const reduced = reduce(reshapedInput, 'float32', 'mean', backend);\n  const reshapedOutput =\n      reshape({inputs: {x: reduced}, attrs: {shape: outShape}, backend});\n\n  backend.disposeIntermediateTensorInfo(reshapedInput);\n  backend.disposeIntermediateTensorInfo(reduced);\n\n  return reshapedOutput;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Min, MinAttrs, MinInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reduce} from '../kernel_utils/reduce';\n\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function min(\n    args: {inputs: MinInputs, backend: MathBackendWebGL, attrs: MinAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  const xRank = x.shape.length;\n\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  let permutedX = x;\n  if (permutedAxes != null) {\n    permutedX = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    axes = backend_util.getInnerMostAxes(axes.length, x.shape.length);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('min', axes, xRank);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(permutedX.shape, axes);\n  const inSize = util.sizeFromShape(reduceShape);\n  const a2D =\n      reshape({inputs: {x: permutedX}, backend, attrs: {shape: [-1, inSize]}});\n  const reduced = reduce(a2D, a2D.dtype, 'min', backend);\n\n  let res;\n  if (keepDims) {\n    const newShape = backend_util.expandShapeToKeepDim(outShape, origAxes);\n    res = reshape({inputs: {x: reduced}, backend, attrs: {shape: newShape}});\n  } else {\n    res = reshape({inputs: {x: reduced}, backend, attrs: {shape: outShape}});\n  }\n\n  backend.disposeIntermediateTensorInfo(a2D);\n  backend.disposeIntermediateTensorInfo(reduced);\n\n  if (permutedAxes != null) {\n    backend.disposeIntermediateTensorInfo(permutedX);\n  }\n\n  return res;\n}\n\nexport const minConfig: KernelConfig = {\n  kernelName: Min,\n  backendName: 'webgl',\n  kernelFunc: min as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Minimum} from '@tensorflow/tfjs-core';\n\nimport {CHECK_NAN_SNIPPET} from '../binaryop_gpu';\nimport {CHECK_NAN_SNIPPET_PACKED} from '../binaryop_packed_gpu';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {minimumImplCPU} from '../kernel_utils/shared';\n\nconst MINIMUM = CHECK_NAN_SNIPPET + `\n  return min(a, b);\n`;\n\nconst MINIMUM_PACKED = `\n  vec4 result = vec4(min(a, b));\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  ` +\n    CHECK_NAN_SNIPPET_PACKED + `\n  return result;\n`;\n\nexport const minimum = binaryKernelFunc({\n  opSnippet: MINIMUM,\n  packedOpSnippet: MINIMUM_PACKED,\n  cpuKernelImpl: minimumImplCPU\n});\n\nexport const minimumConfig: KernelConfig = {\n  kernelName: Minimum,\n  backendName: 'webgl',\n  kernelFunc: minimum as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class MirrorPadProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      xShape: number[], paddings: Array<[number, number]>,\n      mode: 'reflect'|'symmetric') {\n    this.outputShape = paddings.map(\n        (p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);\n    const rank = xShape.length;\n    const dtype = getCoordsDataType(rank);\n\n    const start = paddings.map(p => p[0]).join(',');\n    const end = paddings.map((p, i) => p[0] + xShape[i]).join(',');\n    const unpackedCoords =\n        ['coords[0]', 'coords[1]', 'coords[2]', 'coords[3]'].slice(0, rank);\n    const offset = mode === 'reflect' ? 0 : 1;\n\n    if (rank === 1) {\n      this.userCode = `\n        int start = ${start};\n        int end = ${end};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start) {\n            outC = start * 2 - outC - ${offset};\n          } else if(outC >= end) {\n            outC = (end - 1) * 2 - outC + ${offset};\n          }\n          setOutput(getX(outC - start));\n        }\n      `;\n      return;\n    }\n    this.userCode = `\n      ${dtype} start = ${dtype}(${start});\n      ${dtype} end = ${dtype}(${end});\n\n      void main() {\n        ${dtype} outC = getOutputCoords();\n        for (int i = 0; i < ${rank}; i++) {\n          if (outC[i] < start[i]) {\n            outC[i] = start[i] * 2 - outC[i] - ${offset};\n          } else if(outC[i] >= end[i]) {\n            outC[i] = (end[i] - 1) * 2 - outC[i] + ${offset};\n          }\n        }\n        ${dtype} coords = outC - start;\n        setOutput(getX(${unpackedCoords}));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\n/**\n * Example shader code for\n * `mirrorPad(tf.tensor1d([1, 2, 3], 'int32'), [[2, 2]], 'reflect')`\n * ```\n *    const int start = int(2);\n *    const int end = int(5);\n *\n *    void main() {\n *       int outputLoc = getOutputCoords();\n *       vec4 result = vec4(0.);\n *\n *       int rc = outputLoc;\n *\n *       int source = rc;\n *       if (source < start) {\n *         source = start * 2 - source - 0;\n *       } else if (source >= end) {\n *         source = (end - 1) * 2 - source + 0;\n *       }\n *       source -= start;\n *\n *       result[0] = getChannel(getX(source), source);\n *       rc += 1;\n *       if(rc < 6) {\n *          int source = rc;\n *          if (source < start) {\n *            source = start * 2 - source - 0;\n *          } else if (source >= end) {\n *            source = (end - 1) * 2 - source + 0;\n *          }\n *          source -= start;\n *\n *         result[1] = getChannel(getX(source), source);\n *       }\n *\n *       setOutput(result);\n *     }\n * ```\n */\nexport class MirrorPadPackedProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      xShape: number[], paddings: Array<[number, number]>,\n      mode: 'reflect'|'symmetric') {\n    this.outputShape = paddings.map(\n        (p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);\n    const rank = xShape.length;\n    const dtype = getCoordsDataType(rank);\n\n    const start = paddings.map(p => p[0]).join(',');\n    const end = paddings.map((p, i) => p[0] + xShape[i]).join(',');\n    const coords = getChannels('rc', rank);\n    const source = getChannels('source', rank);\n    const cLimit = `${coords[rank - 1]} < ${this.outputShape[rank - 1]}`;\n    const innerDims =\n        rank === 1 ? 'source' : `vec2(${source.slice(-2).join()})`;\n    const offset = mode === 'reflect' ? 0 : 1;\n\n    let mainLoop = '';\n    if (rank === 1) {\n      const padSetup = `\n        ${dtype} source = rc;\n        if (source < start) {\n          source = start * 2 - source - ${offset};\n        } else if (source >= end) {\n          source = (end - 1) * 2 - source + ${offset};\n        }\n        source -= start;\n      `;\n      mainLoop = `\n        ${dtype} rc = outputLoc;\n        ${padSetup}\n        result[0] = getChannel(getX(${source.join()}), ${innerDims});\n        ${coords[rank - 1]} += 1;\n        if(${cLimit}) {\n          ${padSetup}\n          result[1] = getChannel(getX(${source.join()}), ${innerDims});\n        }\n      `;\n    } else {\n      const padSetup = `\n        ${dtype} source = rc;\n        ${dtype} lt = ${dtype}(lessThan(source, start));\n        ${dtype} gte = ${dtype}(greaterThanEqual(source, end));\n        ${dtype} orig = 1 - (lt + gte);\n        source = orig * source +\n                lt * (start * 2 - source - ${offset}) +\n                gte * ((end - 1) * 2 - source + ${offset});\n        source -= start;\n      `;\n\n      mainLoop = `\n        ${dtype} rc = outputLoc;\n        ${padSetup}\n        result[0] = getChannel(getX(${source.join()}), ${innerDims});\n        ${coords[rank - 1]} += 1;\n        if(${cLimit}) {\n          ${padSetup}\n          result[1] = getChannel(getX(${source.join()}), ${innerDims});\n        }\n        rc = outputLoc;\n        ${coords[rank - 2]} += 1;\n        if(${coords[rank - 2]} < ${this.outputShape[rank - 2]}) {\n          ${padSetup}\n          result[2] = getChannel(getX(${source.join()}), ${innerDims});\n          ${coords[rank - 1]} += 1;\n          if(${cLimit}) {\n            ${padSetup}\n            result[3] = getChannel(getX(${source.join()}), ${innerDims});\n          }\n        }\n      `;\n    }\n\n    this.userCode = `\n      const ${dtype} start = ${dtype}(${start});\n      const ${dtype} end = ${dtype}(${end});\n\n      void main() {\n        ${dtype} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${mainLoop}\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, MirrorPad, MirrorPadAttrs, MirrorPadInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {MirrorPadProgram} from '../mirror_pad_gpu';\nimport {MirrorPadPackedProgram} from '../mirror_pad_packed_gpu';\n\nexport const mirrorPadKernelFunc: (params: {\n  inputs: MirrorPadInputs,\n  backend: MathBackendWebGL,\n  attrs: MirrorPadAttrs\n}) => TensorInfo = ({inputs, backend, attrs}) => {\n  const {x} = inputs;\n  const {paddings, mode} = attrs;\n\n  const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?\n      new MirrorPadPackedProgram(x.shape, paddings, mode) :\n      new MirrorPadProgram(x.shape, paddings, mode);\n\n  const output = backend.runWebGLProgram(program, [x], x.dtype);\n\n  return output;\n};\n\nexport const mirrorPadConfig: KernelConfig = {\n  kernelName: MirrorPad,\n  backendName: 'webgl',\n  kernelFunc: mirrorPadKernelFunc as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Mod} from '@tensorflow/tfjs-core';\n\nimport {CHECK_NAN_SNIPPET_PACKED} from '../binaryop_packed_gpu';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst MOD = `if (b == 0.0) return NAN;\n  return mod(a, b);`;\n\nconst MOD_PACKED = `\n  vec4 result = mod(a, b);\n  bvec4 isNaN = equal(b, vec4(0.0));\n  ` +\n    CHECK_NAN_SNIPPET_PACKED + `\n  return result;\n`;\n\nexport const mod = binaryKernelFunc({\n  opSnippet: MOD,\n  packedOpSnippet: MOD_PACKED,\n});\n\nexport const modConfig: KernelConfig = {\n  kernelName: Mod,\n  backendName: 'webgl',\n  kernelFunc: mod as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {UniformType} from './shader_compiler';\n\nexport class MultinomialProgram implements GPGPUProgram {\n  variableNames = ['probs'];\n  outputShape: number[];\n  userCode: string;\n  customUniforms = [{name: 'seed', type: 'float' as UniformType}];\n\n  constructor(batchSize: number, numOutcomes: number, numSamples: number) {\n    this.outputShape = [batchSize, numSamples];\n\n    this.userCode = `\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < ${numOutcomes - 1}; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(${numOutcomes - 1}));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {RealDiv} from '@tensorflow/tfjs-core';\nimport {KernelConfig} from '@tensorflow/tfjs-core';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\n// Without the equality check div produces 0.9999 for a = b, which when\n// floored can cause errors.\nconst DIV = `\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;`;\n\n// We do the same as in ./binaryop_gpu, with vec4 and ivec4.\n// On Linux, the vectorized implementation produces NaNs when a and b are 0.\nconst DIV_PACKED = `\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n`;\n\nexport const realDiv = binaryKernelFunc(\n    {opSnippet: DIV, packedOpSnippet: DIV_PACKED, checkOutOfBounds: true});\n\nexport const realDivConfig: KernelConfig = {\n  kernelName: RealDiv,\n  backendName: 'webgl',\n  kernelFunc: realDiv,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sub} from '@tensorflow/tfjs-core';\n\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {subImplCPU as cpuSub} from '../kernel_utils/shared';\n\nconst SUB = 'return a - b;';\n\nexport const sub = binaryKernelFunc({\n  opSnippet: SUB,\n  packedOpSnippet: SUB,\n  supportsComplex: true,\n  cpuKernelImpl: cpuSub\n});\n\nexport const subConfig: KernelConfig = {\n  kernelName: Sub,\n  backendName: 'webgl',\n  kernelFunc: sub\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Softmax, SoftmaxAttrs, SoftmaxInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {exp} from './Exp';\nimport {max} from './Max';\nimport {realDiv} from './RealDiv';\nimport {reshape} from './Reshape';\nimport {sub} from './Sub';\nimport {sum} from './Sum';\n\nexport function softmax(args: {\n  inputs: SoftmaxInputs,\n  backend: MathBackendWebGL,\n  attrs: SoftmaxAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {logits} = inputs;\n  const {dim} = attrs;\n\n  const axes = util.parseAxisParam([dim], logits.shape);\n\n  const maxLogit = max({\n    inputs: {x: logits},\n    backend,\n    attrs: {reductionIndices: axes, keepDims: false}\n  });\n\n  const expandedShape = backend_util.expandShapeToKeepDim(maxLogit.shape, axes);\n\n  const maxLogitsReshaped =\n      reshape({inputs: {x: maxLogit}, backend, attrs: {shape: expandedShape}});\n  const a =\n      sub({inputs: {a: logits, b: maxLogitsReshaped}, backend}) as TensorInfo;\n  const b = exp({inputs: {x: a}, backend}) as TensorInfo;\n  const sumExp =\n      sum({inputs: {x: b}, backend, attrs: {axis: axes, keepDims: false}});\n  const sumExpReshaped =\n      reshape({inputs: {x: sumExp}, backend, attrs: {shape: expandedShape}});\n\n  const res =\n      realDiv({inputs: {a: b, b: sumExpReshaped}, backend}) as TensorInfo;\n\n  backend.disposeIntermediateTensorInfo(maxLogit);\n  backend.disposeIntermediateTensorInfo(maxLogitsReshaped);\n  backend.disposeIntermediateTensorInfo(a);\n  backend.disposeIntermediateTensorInfo(b);\n  backend.disposeIntermediateTensorInfo(sumExp);\n  backend.disposeIntermediateTensorInfo(sumExpReshaped);\n\n  return res;\n}\n\nexport const softmaxConfig: KernelConfig = {\n  kernelName: Softmax,\n  backendName: 'webgl',\n  kernelFunc: softmax as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Multinomial, MultinomialAttrs, MultinomialInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {MultinomialProgram} from '../multinomial_gpu';\n\nimport {softmax} from './Softmax';\n\nexport function multinomial(args: {\n  inputs: MultinomialInputs,\n  backend: MathBackendWebGL,\n  attrs: MultinomialAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {logits} = inputs;\n  const {numSamples, seed, normalized} = attrs;\n\n  const probs = normalized ?\n      logits :\n      softmax(\n          {inputs: {logits}, backend, attrs: {dim: logits.shape.length - 1}});\n  const batchSize = probs.shape[0];\n  const numOutcomes = probs.shape[1];\n  const program = new MultinomialProgram(batchSize, numOutcomes, numSamples);\n  const customValues = [[seed]];\n  const res = backend.runWebGLProgram(program, [probs], 'int32', customValues);\n  if (!normalized) {\n    backend.disposeIntermediateTensorInfo(probs);\n  }\n  return res;\n}\n\nexport const multinomialConfig: KernelConfig = {\n  kernelName: Multinomial,\n  backendName: 'webgl',\n  kernelFunc: multinomial as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, Neg, NegInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {negImplCPU} from '../kernel_utils/shared';\nimport {CHECK_NAN_SNIPPET, UnaryOpProgram} from '../unaryop_gpu';\nimport {UnaryOpPackedProgram} from '../unaryop_packed_gpu';\n\nconst NEG = CHECK_NAN_SNIPPET + `\n  return -x;\n`;\n\nconst NEG_PACKED = `\n  vec4 result = -x;\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n`;\n\n// This doesn't use unaryKernelFunc because negImplCPU is not of type\n// SimpleUnaryKernelImplCPU.\nexport function neg(args: {inputs: NegInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  if (backend.shouldExecuteOnCPU([x])) {\n    const xData = backend.texData.get(x.dataId);\n    const [outValues, newShape] =\n        negImplCPU(xData.values as TypedArray, x.shape, x.dtype);\n    return backend.makeTensorInfo(newShape, x.dtype, outValues);\n  }\n\n  let program: UnaryOpProgram|UnaryOpPackedProgram;\n  if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n    program = new UnaryOpPackedProgram(x.shape, NEG_PACKED);\n  } else {\n    program = new UnaryOpProgram(x.shape, NEG);\n  }\n\n  return backend.runWebGLProgram(program, [x], x.dtype);\n}\n\nexport const negConfig: KernelConfig = {\n  kernelName: Neg,\n  backendName: 'webgl',\n  kernelFunc: neg as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, kernel_impls, KernelConfig, KernelFunc, NonMaxSuppressionV3, NonMaxSuppressionV3Attrs, NonMaxSuppressionV3Inputs, TypedArray} from '@tensorflow/tfjs-core';\n\nconst nonMaxSuppressionV3Impl = kernel_impls.nonMaxSuppressionV3Impl;\nimport {MathBackendWebGL} from '../backend_webgl';\n\nexport function nonMaxSuppressionV3(args: {\n  inputs: NonMaxSuppressionV3Inputs,\n  backend: MathBackendWebGL,\n  attrs: NonMaxSuppressionV3Attrs\n}) {\n  backend_util.warn(\n      'tf.nonMaxSuppression() in webgl locks the UI thread. ' +\n      'Call tf.nonMaxSuppressionAsync() instead');\n\n  const {inputs, backend, attrs} = args;\n  const {boxes, scores} = inputs;\n  const {maxOutputSize, iouThreshold, scoreThreshold} = attrs;\n\n  const boxesVals = backend.readSync(boxes.dataId) as TypedArray;\n  const scoresVals = backend.readSync(scores.dataId) as TypedArray;\n\n  const {selectedIndices} = nonMaxSuppressionV3Impl(\n      boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold);\n\n  return backend.makeTensorInfo(\n      [selectedIndices.length], 'int32', new Int32Array(selectedIndices));\n}\n\nexport const nonMaxSuppressionV3Config: KernelConfig = {\n  kernelName: NonMaxSuppressionV3,\n  backendName: 'webgl',\n  kernelFunc: nonMaxSuppressionV3 as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, kernel_impls, KernelConfig, KernelFunc, NonMaxSuppressionV4, NonMaxSuppressionV4Attrs, NonMaxSuppressionV4Inputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\nconst nonMaxSuppressionV4Impl = kernel_impls.nonMaxSuppressionV4Impl;\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nexport function nonMaxSuppressionV4(args: {\n  inputs: NonMaxSuppressionV4Inputs,\n  backend: MathBackendWebGL,\n  attrs: NonMaxSuppressionV4Attrs\n}): [TensorInfo, TensorInfo] {\n  backend_util.warn(\n      'tf.nonMaxSuppression() in webgl locks the UI thread. ' +\n      'Call tf.nonMaxSuppressionAsync() instead');\n\n  const {inputs, backend, attrs} = args;\n  const {boxes, scores} = inputs;\n  const {maxOutputSize, iouThreshold, scoreThreshold, padToMaxOutputSize} =\n      attrs;\n\n  const boxesVals = backend.readSync(boxes.dataId) as TypedArray;\n  const scoresVals = backend.readSync(scores.dataId) as TypedArray;\n\n  const {selectedIndices, validOutputs} = nonMaxSuppressionV4Impl(\n      boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold,\n      padToMaxOutputSize);\n\n  return [\n    backend.makeTensorInfo(\n        [selectedIndices.length], 'int32', new Int32Array(selectedIndices)),\n    backend.makeTensorInfo([], 'int32', new Int32Array([validOutputs]))\n  ];\n}\n\nexport const nonMaxSuppressionV4Config: KernelConfig = {\n  kernelName: NonMaxSuppressionV4,\n  backendName: 'webgl',\n  kernelFunc: nonMaxSuppressionV4 as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, kernel_impls, KernelConfig, KernelFunc, NonMaxSuppressionV5, NonMaxSuppressionV5Attrs, NonMaxSuppressionV5Inputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nconst nonMaxSuppressionV5Impl = kernel_impls.nonMaxSuppressionV5Impl;\nimport {MathBackendWebGL} from '../backend_webgl';\n\nexport function nonMaxSuppressionV5(args: {\n  inputs: NonMaxSuppressionV5Inputs,\n  backend: MathBackendWebGL,\n  attrs: NonMaxSuppressionV5Attrs\n}): [TensorInfo, TensorInfo] {\n  backend_util.warn(\n      'tf.nonMaxSuppression() in webgl locks the UI thread. ' +\n      'Call tf.nonMaxSuppressionAsync() instead');\n\n  const {inputs, backend, attrs} = args;\n  const {boxes, scores} = inputs;\n  const {maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma} = attrs;\n\n  const boxesVals = backend.readSync(boxes.dataId) as TypedArray;\n  const scoresVals = backend.readSync(scores.dataId) as TypedArray;\n\n  const maxOutputSizeVal = maxOutputSize;\n  const iouThresholdVal = iouThreshold;\n  const scoreThresholdVal = scoreThreshold;\n  const softNmsSigmaVal = softNmsSigma;\n\n  const {selectedIndices, selectedScores} = nonMaxSuppressionV5Impl(\n      boxesVals, scoresVals, maxOutputSizeVal, iouThresholdVal,\n      scoreThresholdVal, softNmsSigmaVal);\n\n  return [\n    backend.makeTensorInfo(\n        [selectedIndices.length], 'int32', new Int32Array(selectedIndices)),\n    backend.makeTensorInfo(\n        [selectedScores.length], 'float32', new Float32Array(selectedScores))\n  ];\n}\n\nexport const nonMaxSuppressionV5Config: KernelConfig = {\n  kernelName: NonMaxSuppressionV5,\n  backendName: 'webgl',\n  kernelFunc: nonMaxSuppressionV5 as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class OneHotProgram implements GPGPUProgram {\n  variableNames = ['indices'];\n  outputShape: number[];\n  userCode: string;\n\n  // Caching uniform location for speed.\n  seedLoc: WebGLUniformLocation;\n\n  constructor(\n      numIndices: number, depth: number, onValue: number, offValue: number) {\n    this.outputShape = [numIndices, depth];\n\n    this.userCode = `\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(${offValue}), float(${onValue}),\n                      float(index == coords.y)));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, OneHot, OneHotAttrs, OneHotInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {OneHotProgram} from '../onehot_gpu';\nimport {reshape} from './Reshape';\n\nexport const oneHot = (args: {\n  inputs: OneHotInputs,\n  backend: MathBackendWebGL,\n  attrs: OneHotAttrs\n}): TensorInfo => {\n  const {inputs, backend, attrs} = args;\n  const {indices} = inputs;\n  const {dtype, depth, onValue, offValue} = attrs;\n\n  const indicesSize = util.sizeFromShape(indices.shape);\n  const program = new OneHotProgram(indicesSize, depth, onValue, offValue);\n  const reshaped =\n      reshape({inputs: {x: indices}, backend, attrs: {shape: [indicesSize]}});\n  const result = backend.runWebGLProgram(program, [reshaped], dtype);\n  backend.disposeIntermediateTensorInfo(reshaped);\n\n  const outShape = [...indices.shape, depth];\n  const out = reshape({inputs: {x: result}, backend, attrs: {shape: outShape}});\n  backend.disposeIntermediateTensorInfo(result);\n  return out;\n};\n\nexport const oneHotConfig: KernelConfig = {\n  kernelName: OneHot,\n  backendName: 'webgl',\n  kernelFunc: oneHot as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, ZerosLike, ZerosLikeInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {complex} from './Complex';\nimport {fill} from './Fill';\nimport {imag} from './Imag';\nimport {real} from './Real';\n\nexport function zerosLike(\n    args: {inputs: ZerosLikeInputs, backend: MathBackendWebGL}): TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  if (x.dtype === 'complex64') {\n    const realPart = real({inputs: {input: x}, backend});\n    const r = zerosLike({inputs: {x: realPart}, backend});\n    const imagPart = imag({inputs: {input: x}, backend});\n    const i = zerosLike({inputs: {x: imagPart}, backend});\n\n    const result = complex({inputs: {real: r, imag: i}, backend});\n\n    backend.disposeIntermediateTensorInfo(realPart);\n    backend.disposeIntermediateTensorInfo(r);\n    backend.disposeIntermediateTensorInfo(imagPart);\n    backend.disposeIntermediateTensorInfo(i);\n\n    return result;\n  } else {\n    return fill({\n      attrs: {\n        shape: x.shape,\n        dtype: x.dtype,\n        value: x.dtype === 'string' ? '' : 0\n      },\n      backend\n    });\n  }\n}\n\nexport const zerosLikeConfig: KernelConfig = {\n  kernelName: ZerosLike,\n  backendName: 'webgl',\n  kernelFunc: zerosLike as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, OnesLike, OnesLikeInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {complex} from './Complex';\nimport {fill} from './Fill';\nimport {imag} from './Imag';\nimport {real} from './Real';\nimport {zerosLike} from './ZerosLike';\n\nexport function onesLike(\n    args: {inputs: OnesLikeInputs, backend: MathBackendWebGL}): TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  if (x.dtype === 'string') {\n    throw new Error('onesLike is not supported under string dtype');\n  } else if (x.dtype === 'complex64') {\n    const realPart = real({inputs: {input: x}, backend});\n    const r = onesLike({inputs: {x: realPart}, backend});\n    const imagPart = imag({inputs: {input: x}, backend});\n    const i = zerosLike({inputs: {x: imagPart}, backend});\n\n    const result = complex({inputs: {real: r, imag: i}, backend});\n\n    backend.disposeIntermediateTensorInfo(realPart);\n    backend.disposeIntermediateTensorInfo(r);\n    backend.disposeIntermediateTensorInfo(imagPart);\n    backend.disposeIntermediateTensorInfo(i);\n\n    return result;\n  } else {\n    // TODO(cais, smilkov): Add WebGL shader for onesLike:\n    //   https://github.com/tensorflow/tfjs/issues/1293\n    return fill({attrs: {shape: x.shape, dtype: x.dtype, value: 1}, backend});\n  }\n}\n\nexport const onesLikeConfig: KernelConfig = {\n  kernelName: OnesLike,\n  backendName: 'webgl',\n  kernelFunc: onesLike as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Pack, PackAttrs, PackInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {concat} from './Concat';\nimport {expandDims} from './ExpandDims';\n\nexport function pack(\n    args: {inputs: PackInputs, backend: MathBackendWebGL, attrs: PackAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {axis} = attrs;\n\n  if (inputs.length === 1) {\n    return expandDims(\n        {inputs: {input: inputs[0]}, backend, attrs: {dim: axis}});\n  }\n\n  const shape = inputs[0].shape;\n  const dtype = inputs[0].dtype;\n\n  inputs.forEach(t => {\n    util.assertShapesMatch(\n        shape, t.shape,\n        'All tensors passed to stack must have matching shapes');\n    util.assert(\n        dtype === t.dtype,\n        () => 'All tensors passed to stack must have matching dtypes');\n  });\n\n  const intermediateTensorInfos: TensorInfo[] = [];\n  const expandedTensors = inputs.map(t => {\n    const expandedT =\n        expandDims({inputs: {input: t}, backend, attrs: {dim: axis}});\n    intermediateTensorInfos.push(expandedT);\n    return expandedT;\n  });\n\n  const result = concat({inputs: expandedTensors, backend, attrs: {axis}});\n\n  intermediateTensorInfos.forEach(\n      t => backend.disposeIntermediateTensorInfo(t));\n\n  return result;\n}\n\nexport const packConfig: KernelConfig = {\n  kernelName: Pack,\n  backendName: 'webgl',\n  kernelFunc: pack as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType, UniformType} from './shader_compiler';\n\nexport class PadProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n  customUniforms = [{name: 'value', type: 'float' as UniformType}];\n\n  constructor(\n      xShape: number[], paddings: Array<[number, number]>,\n      constantValue: number) {\n    this.outputShape = paddings.map(\n        (p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);\n    const rank = xShape.length;\n    const type = getCoordsDataType(rank);\n\n    const start = paddings.map(p => p[0]).join(',');\n    const end = paddings.map((p, i) => p[0] + xShape[i]).join(',');\n    const unpackedCoords =\n        ['coords[0]', 'coords[1]', 'coords[2]', 'coords[3]'].slice(0, rank);\n\n    if (rank === 1) {\n      this.userCode = `\n        int start = ${start};\n        int end = ${end};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(value);\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      `;\n      return;\n    }\n    this.userCode = `\n      ${type} start = ${type}(${start});\n      ${type} end = ${type}(${end});\n\n      void main() {\n        ${type} outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(value);\n        } else {\n          ${type} coords = outC - start;\n          setOutput(getX(${unpackedCoords}));\n        }\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType, UniformType} from './shader_compiler';\n\nexport class PadPackedProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n  customUniforms = [{name: 'value', type: 'float' as UniformType}];\n\n  constructor(\n      xShape: number[], paddings: Array<[number, number]>,\n      constantValue: number) {\n    this.outputShape = paddings.map(\n        (p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);\n    const rank = xShape.length;\n    const dtype = getCoordsDataType(rank);\n\n    const start = paddings.map(p => p[0]).join(',');\n    const end = paddings.map((p, i) => p[0] + xShape[i]).join(',');\n    const coords = getChannels('rc', rank);\n    const source = getChannels('source', rank);\n    const cLimit = `${coords[rank - 1]} < ${this.outputShape[rank - 1]}`;\n    const innerDims =\n        rank === 1 ? 'source' : `vec2(${source.slice(-2).join()})`;\n\n    const componentSetup = [\n      `${dtype} rc = outputLoc;`, `${coords[rank - 1]} += 1;\n       if(${cLimit}) {\n      `,\n      rank === 1 ? '' : `}\n       rc = outputLoc;\n       ${coords[rank - 2]} += 1;\n       if(${coords[rank - 2]} < ${this.outputShape[rank - 2]}) {`,\n      rank === 1 ? '' : `  ${coords[rank - 1]} += 1;\n         if(${cLimit}) {`\n    ];\n\n    const paddingArea = rank === 1 ?\n        'rc < start || rc >= end' :\n        'any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))';\n    let mainLoop = '';\n    for (let i = 0, j = rank === 1 ? 2 : 4; i < j; i++) {\n      mainLoop += `\n        ${componentSetup[i]}\n        if (${paddingArea}) {\n          result[${i}] = float(value);\n        } else {\n          ${dtype} source = rc - start;\n          result[${i}] = getChannel(getX(${source.join()}), ${innerDims});\n        }\n      `;\n    }\n    mainLoop += (rank === 1 ? `} ` : `}}`);\n\n    this.userCode = `\n      const ${dtype} start = ${dtype}(${start});\n      const ${dtype} end = ${dtype}(${end});\n\n      void main() {\n        ${dtype} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${mainLoop}\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, PadV2, PadV2Attrs, PadV2Inputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {PadProgram} from '../pad_gpu';\nimport {PadPackedProgram} from '../pad_packed_gpu';\nimport {fill} from './Fill';\n\nexport const padV2 =\n    (args: {inputs: PadV2Inputs, backend: MathBackendWebGL, attrs: PadV2Attrs}):\n        TensorInfo => {\n          const {inputs, backend, attrs} = args;\n          const {x} = inputs;\n          const {paddings, constantValue} = attrs;\n\n          if (util.sizeFromShape(x.shape) === 0) {\n            // Short-circuit the computation, since x doesn't have value, only\n            // the shape is used to compute output shape to pad.\n            const outputShape = paddings.map(\n                (p, i) =>\n                    p[0] /* beforePad */ + x.shape[i] + p[1] /* afterPad */);\n            return fill({\n              backend,\n              attrs: {shape: outputShape, value: constantValue, dtype: x.dtype}\n            });\n          }\n\n          const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?\n              new PadPackedProgram(x.shape, paddings, constantValue) :\n              new PadProgram(x.shape, paddings, constantValue);\n          const customValues = [[constantValue]];\n          return backend.runWebGLProgram(program, [x], x.dtype, customValues);\n        };\n\nexport const padV2Config: KernelConfig = {\n  kernelName: PadV2,\n  backendName: 'webgl',\n  kernelFunc: padV2 as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Pow} from '@tensorflow/tfjs-core';\n\nimport {CHECK_NAN_SNIPPET_PACKED} from '../binaryop_packed_gpu';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst POW = `\n  if(a < 0.0 && floor(b) < b){\n    return NAN;\n  }\n  if (b == 0.0) {\n    return 1.0;\n  }\n  return (round(mod(b, 2.0)) != 1) ?\n      pow(abs(a), b) : sign(a) * pow(abs(a), b);\n`;\n\nconst POW_PACKED = `\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  bvec4 isNaN1 = lessThan(a, vec4(0.0));\n  bvec4 isNaN2 = lessThan(floor(b), b);\n  bvec4 isNaN = bvec4(isNaN1.x && isNaN2.x, isNaN1.y && isNaN2.y, isNaN1.z && isNaN2.z, isNaN1.w && isNaN2.w);\n  ` +\n    CHECK_NAN_SNIPPET_PACKED + `\n  return result;\n`;\n\nexport const pow =\n    binaryKernelFunc({opSnippet: POW, packedOpSnippet: POW_PACKED});\n\nexport const powConfig: KernelConfig = {\n  kernelName: Pow,\n  backendName: 'webgl',\n  kernelFunc: pow as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Prod, ProdAttrs, ProdInputs, sumOutType, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reduce} from '../kernel_utils/reduce';\nimport {prodImplCPU} from '../kernel_utils/shared';\n\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function prod(\n    args: {inputs: ProdInputs, backend: MathBackendWebGL, attrs: ProdAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  const xRank = x.shape.length;\n  const toDispose = [];\n\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  let permutedX = x;\n  if (permutedAxes != null) {\n    permutedX = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    axes = backend_util.getInnerMostAxes(axes.length, xRank);\n    toDispose.push(permutedX);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('prod', axes, xRank);\n\n  let res;\n  if (backend.shouldExecuteOnCPU([permutedX])) {\n    const xVals = backend.texData.get(permutedX.dataId).values as TypedArray;\n    const {outVals, outShape, outDtype} =\n        prodImplCPU(permutedX.shape, permutedX.dtype, xVals, axes);\n    res = backend.makeTensorInfo(outShape, outDtype, outVals);\n  } else {\n    const [outShape, reduceShape] =\n        backend_util.computeOutAndReduceShapes(permutedX.shape, axes);\n    const inSize = util.sizeFromShape(reduceShape);\n    const a2D = reshape(\n        {inputs: {x: permutedX}, backend, attrs: {shape: [-1, inSize]}});\n    const outputDType = sumOutType(x.dtype);\n    const reduced = reduce(a2D, outputDType, 'prod', backend);\n    res = reshape({inputs: {x: reduced}, backend, attrs: {shape: outShape}});\n\n    toDispose.push(a2D);\n    toDispose.push(reduced);\n  }\n\n  if (keepDims) {\n    toDispose.push(res);\n    const newShape = backend_util.expandShapeToKeepDim(res.shape, origAxes);\n    res = reshape({inputs: {x: res}, backend, attrs: {shape: newShape}});\n  }\n\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return res;\n}\n\nexport const prodConfig: KernelConfig = {\n  kernelName: Prod,\n  backendName: 'webgl',\n  kernelFunc: prod as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, RaggedGather, RaggedGatherAttrs, RaggedGatherInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {raggedGatherImplCPU} from '../kernel_utils/shared';\n\nexport function raggedGather(args: {\n  inputs: RaggedGatherInputs,\n  backend: MathBackendWebGL,\n  attrs: RaggedGatherAttrs\n}): TensorInfo[] {\n  const {inputs, backend, attrs} = args;\n  const {paramsNestedSplits, paramsDenseValues, indices} = inputs;\n  const {outputRaggedRank} = attrs;\n\n  const $paramsNestedSplits =\n      paramsNestedSplits.map(t => backend.readSync(t.dataId) as TypedArray);\n  const $paramsNestedSplitsShapes = paramsNestedSplits.map(t => t.shape);\n  const $paramsDenseValues =\n      backend.readSync(paramsDenseValues.dataId) as TypedArray;\n  const $indices = backend.readSync(indices.dataId) as TypedArray;\n\n  const [outputNestedSplits, outputDenseValues, outputDenseValuesShape] =\n      raggedGatherImplCPU(\n          $paramsNestedSplits, $paramsNestedSplitsShapes, $paramsDenseValues,\n          paramsDenseValues.shape, paramsDenseValues.dtype, $indices,\n          indices.shape, outputRaggedRank);\n\n  const outputNestedSplitsTensors = outputNestedSplits.map(\n      (splits) => backend.makeTensorInfo([splits.length], 'int32', splits));\n\n  const outputDenseValuesTensor = backend.makeTensorInfo(\n      outputDenseValuesShape, paramsDenseValues.dtype, outputDenseValues);\n\n  return outputNestedSplitsTensors.concat([outputDenseValuesTensor]);\n}\n\nexport const raggedGatherConfig: KernelConfig = {\n  kernelName: RaggedGather,\n  backendName: 'webgl',\n  kernelFunc: raggedGather as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, RaggedRange, RaggedRangeInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {raggedRangeImplCPU} from '../kernel_utils/shared';\n\nexport function raggedRange(\n    args: {inputs: RaggedRangeInputs, backend: MathBackendWebGL}):\n    [TensorInfo, TensorInfo] {\n  const {inputs, backend} = args;\n  const {starts, limits, deltas} = inputs;\n\n  const $starts = backend.readSync(starts.dataId) as TypedArray;\n  const $limits = backend.readSync(limits.dataId) as TypedArray;\n  const $deltas = backend.readSync(deltas.dataId) as TypedArray;\n\n  const [rtNestedSplitsData, rtDenseValuesData] = raggedRangeImplCPU(\n      $starts, starts.shape, starts.dtype, $limits, limits.shape, $deltas,\n      deltas.shape);\n\n  const rtNestedSplits = backend.makeTensorInfo(\n      [rtNestedSplitsData.length], 'int32', rtNestedSplitsData);\n  const rtDenseValues = backend.makeTensorInfo(\n      [rtDenseValuesData.length], starts.dtype, rtDenseValuesData);\n\n  return [rtNestedSplits, rtDenseValues];\n}\n\nexport const raggedRangeConfig: KernelConfig = {\n  kernelName: RaggedRange,\n  backendName: 'webgl',\n  kernelFunc: raggedRange as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, RaggedTensorToTensor, RaggedTensorToTensorAttrs, RaggedTensorToTensorInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {raggedTensorToTensorImplCPU} from '../kernel_utils/shared';\n\nexport function raggedTensorToTensor(args: {\n  inputs: RaggedTensorToTensorInputs,\n  backend: MathBackendWebGL,\n  attrs: RaggedTensorToTensorAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {shape, values, defaultValue, rowPartitionTensors} = inputs;\n  const {rowPartitionTypes} = attrs;\n\n  const $shape = backend.readSync(shape.dataId) as TypedArray;\n  const $values = backend.readSync(values.dataId) as TypedArray;\n  const $defaultValue = backend.readSync(defaultValue.dataId) as TypedArray;\n  const $rowPartitionValues =\n      rowPartitionTensors.map(t => backend.readSync(t.dataId) as TypedArray);\n  const rowPartitionValuesShapes = rowPartitionTensors.map(t => t.shape);\n\n  const [outputShape, output] = raggedTensorToTensorImplCPU(\n      $shape, shape.shape, $values, values.shape, values.dtype, $defaultValue,\n      defaultValue.shape, $rowPartitionValues, rowPartitionValuesShapes,\n      rowPartitionTypes);\n  return backend.makeTensorInfo(outputShape, values.dtype, output);\n}\n\nexport const raggedTensorToTensorConfig: KernelConfig = {\n  kernelName: RaggedTensorToTensor,\n  backendName: 'webgl',\n  kernelFunc: raggedTensorToTensor as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Range, RangeAttrs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {rangeImplCPU} from '../kernel_utils/shared';\n\nexport const range =\n    (args: {backend: MathBackendWebGL, attrs: RangeAttrs}): TensorInfo => {\n      const {backend, attrs} = args;\n      const {start, stop, step, dtype} = attrs;\n      const values = rangeImplCPU(start, stop, step, dtype);\n      return backend.makeTensorInfo([values.length], dtype, values);\n    };\n\nexport const rangeConfig: KernelConfig = {\n  kernelName: Range,\n  backendName: 'webgl',\n  kernelFunc: range as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Reciprocal} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst RECIPROCAL = `return 1.0 / x;`;\n\nexport const reciprocal = unaryKernelFunc({opSnippet: RECIPROCAL});\n\nexport const reciprocalConfig: KernelConfig = {\n  kernelName: Reciprocal,\n  backendName: 'webgl',\n  kernelFunc: reciprocal,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Relu} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {CHECK_NAN_SNIPPET} from '../unaryop_gpu';\n\nconst RELU = CHECK_NAN_SNIPPET + `\n  return (x < 0.0) ? 0.0 : x;\n`;\n\nconst RELU_PACKED = `\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n`;\n\nexport const relu =\n    unaryKernelFunc({opSnippet: RELU, packedOpSnippet: RELU_PACKED});\n\nexport const reluConfig: KernelConfig = {\n  kernelName: Relu,\n  backendName: 'webgl',\n  kernelFunc: relu as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Relu6} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {CHECK_NAN_SNIPPET} from '../unaryop_gpu';\n\nconst RELU6 = CHECK_NAN_SNIPPET + `\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n`;\n\nconst RELU6_PACKED = `\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n`;\n\nexport const relu6 =\n    unaryKernelFunc({opSnippet: RELU6, packedOpSnippet: RELU6_PACKED});\n\nexport const relu6Config: KernelConfig = {\n  kernelName: Relu6,\n  backendName: 'webgl',\n  kernelFunc: relu6 as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ResizeBilinearProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      inputShape: [number, number, number, number], newHeight: number,\n      newWidth: number, alignCorners: boolean, halfPixelCenters: boolean) {\n    const [batch, oldHeight, oldWidth, depth] = inputShape;\n    this.outputShape = [batch, newHeight, newWidth, depth];\n\n    const effectiveInSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n      (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n    ];\n\n    const effectiveOutSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n      (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n    ];\n\n    let sourceFracIndexRC: string;\n    if (halfPixelCenters) {\n      sourceFracIndexRC =\n          `(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC` +\n          ` - vec2(0.5)`;\n    } else {\n      sourceFracIndexRC = `vec2(yRC) * effectiveInputOverOutputRatioRC`;\n    }\n\n    this.userCode = `\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${effectiveInSize[0] / effectiveOutSize[0]},\n          ${effectiveInSize[1] / effectiveOutSize[1]});\n      const vec2 inputShapeRC = vec2(${oldHeight}.0, ${oldWidth}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${sourceFracIndexRC};\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ResizeBilinearPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      inputShape: [number, number, number, number], newHeight: number,\n      newWidth: number, alignCorners: boolean, halfPixelCenters: boolean) {\n    const [batch, oldHeight, oldWidth, depth] = inputShape;\n    this.outputShape = [batch, newHeight, newWidth, depth];\n\n    const effectiveInSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n      (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n    ];\n\n    const effectiveOutSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n      (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n    ];\n\n    let sourceFracIndexRC: string;\n    if (halfPixelCenters) {\n      sourceFracIndexRC = `(vec3(yRC) + vec3(0.5)) * ` +\n          `effectiveInputOverOutputRatioRC - vec3(0.5)`;\n    } else {\n      sourceFracIndexRC = `vec3(yRC) * effectiveInputOverOutputRatioRC`;\n    }\n\n    this.userCode = `\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${effectiveInSize[0] / effectiveOutSize[0]},\n          ${effectiveInSize[1] / effectiveOutSize[1]},\n          ${effectiveInSize[1] / effectiveOutSize[1]});\n      const vec3 inputShapeRC = vec3(${oldHeight}.0, ${oldWidth}.0,\n                                     ${oldWidth}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${sourceFracIndexRC};\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${depth - 1};\n        bool hasNextRow = coords.z < ${newWidth - 1};\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, ResizeBilinear, ResizeBilinearAttrs, ResizeBilinearInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ResizeBilinearProgram} from '../resize_bilinear_gpu';\nimport {ResizeBilinearPackedProgram} from '../resize_bilinear_packed_gpu';\n\nexport function resizeBilinear(args: {\n  inputs: ResizeBilinearInputs,\n  backend: MathBackendWebGL,\n  attrs: ResizeBilinearAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images} = inputs;\n  const {alignCorners, halfPixelCenters, size} = attrs;\n\n  const [newHeight, newWidth] = size;\n\n  const program = env().getBool('WEBGL_PACK_IMAGE_OPERATIONS') ?\n      new ResizeBilinearPackedProgram(\n          images.shape as [number, number, number, number], newHeight, newWidth,\n          alignCorners, halfPixelCenters) :\n      new ResizeBilinearProgram(\n          images.shape as [number, number, number, number], newHeight, newWidth,\n          alignCorners, halfPixelCenters);\n  return backend.runWebGLProgram(program, [images], 'float32');\n}\n\nexport const resizeBilinearConfig: KernelConfig = {\n  kernelName: ResizeBilinear,\n  backendName: 'webgl',\n  kernelFunc: resizeBilinear as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ResizeBilinearBackpropProgram implements GPGPUProgram {\n  variableNames = ['dy'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      dyShape: [number, number, number, number],\n      inputShape: [number, number, number, number], alignCorners: boolean) {\n    this.outputShape = inputShape;\n    const [, xHeight, xWidth, ] = inputShape;\n    const [, yHeight, yWidth] = dyShape;\n\n    // In the backwards pass, we want to find the pixels that were generated for\n    // each pixel in the input image the forward pass and add the corresponding\n    // coefficient from dy to the gradient (with some interpolation).\n\n    const effectiveXSize: [number, number] = [\n      (alignCorners && yHeight > 1) ? xHeight - 1 : xHeight,\n      (alignCorners && yWidth > 1) ? xWidth - 1 : xWidth\n    ];\n\n    const effectiveYSize: [number, number] = [\n      (alignCorners && yHeight > 1) ? yHeight - 1 : yHeight,\n      (alignCorners && yWidth > 1) ? yWidth - 1 : yWidth\n    ];\n\n    const heightScale = effectiveXSize[0] / effectiveYSize[0];\n    const widthScale = effectiveXSize[1] / effectiveYSize[1];\n\n    const invHeightScale = 1 / heightScale;\n    const invWidthScale = 1 / widthScale;\n\n    // This defines the size of the window of values around a particular\n    // index in dy that we want to search for contributions to dx.\n    const winHeight = (Math.ceil(invHeightScale) * 2) + 2;\n    const winWidth = (Math.ceil(invWidthScale) * 2) + 2;\n\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${heightScale});\n        const float widthScale = float(${widthScale});\n\n        const float invHeightScale = float(${invHeightScale});\n        const float invWidthScale = float(${invWidthScale});\n\n        const int winHeight = int(${winHeight});\n        const int winWidth = int(${winWidth});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${yHeight}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${yWidth}) {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), ${xHeight - 1}.0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), ${xWidth - 1}.0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, ResizeBilinearGrad, ResizeBilinearGradAttrs, ResizeBilinearGradInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ResizeBilinearBackpropProgram} from '../resize_bilinear_backprop_gpu';\n\nexport function resizeBilinearGrad(args: {\n  inputs: ResizeBilinearGradInputs,\n  backend: MathBackendWebGL,\n  attrs: ResizeBilinearGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images, dy} = inputs;\n  const {alignCorners} = attrs;\n\n  const program = new ResizeBilinearBackpropProgram(\n      dy.shape as [number, number, number, number],\n      images.shape as [number, number, number, number], alignCorners);\n\n  return backend.runWebGLProgram(program, [dy], dy.dtype);\n}\n\nexport const resizeBilinearGradConfig: KernelConfig = {\n  kernelName: ResizeBilinearGrad,\n  backendName: 'webgl',\n  kernelFunc: resizeBilinearGrad as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ResizeNearestNeighborProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      inputShape: [number, number, number, number], newHeight: number,\n      newWidth: number, alignCorners: boolean, halfPixelCenters: boolean) {\n    const [batch, oldHeight, oldWidth, depth] = inputShape;\n    this.outputShape = [batch, newHeight, newWidth, depth];\n\n    const effectiveInSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n      (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n    ];\n\n    const effectiveOutSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n      (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n    ];\n\n    // When align corners is false, we rounds the value with floor.\n    const roundBase = alignCorners ? '0.5' : '0.0';\n\n    let sourceFracIndexRC: string;\n    if (halfPixelCenters) {\n      sourceFracIndexRC =\n          `max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC` +\n          `, vec2(0.0))`;\n    } else {\n      sourceFracIndexRC = `vec2(yRC) * effectiveInputOverOutputRatioRC`;\n    }\n    this.userCode = `\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${effectiveInSize[0] / effectiveOutSize[0]},\n          ${effectiveInSize[1] / effectiveOutSize[1]});\n      const vec2 inputShapeRC = vec2(${oldHeight}.0, ${oldWidth}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${sourceFracIndexRC};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${roundBase})));\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ResizeNearestNeighborPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      inputShape: [number, number, number, number], newHeight: number,\n      newWidth: number, alignCorners: boolean, halfPixelCenters: boolean) {\n    const [batch, oldHeight, oldWidth, depth] = inputShape;\n    this.outputShape = [batch, newHeight, newWidth, depth];\n\n    const effectiveInSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n      (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n    ];\n\n    const effectiveOutSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n      (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n    ];\n\n    // When align corners is false, we rounds the value with floor.\n    const roundBase = alignCorners ? '0.5' : '0.0';\n    let sourceFracIndexRC: string;\n    if (halfPixelCenters) {\n      sourceFracIndexRC = `max((vec3(yRC) + vec3(0.5)) * ` +\n          `effectiveInputOverOutputRatioRC, vec3(0.0))`;\n    } else {\n      sourceFracIndexRC = `vec3(yRC) * effectiveInputOverOutputRatioRC`;\n    }\n\n    this.userCode = `\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${effectiveInSize[0] / effectiveOutSize[0]},\n          ${effectiveInSize[1] / effectiveOutSize[1]},\n          ${effectiveInSize[1] / effectiveOutSize[1]});\n      const vec3 inputShapeRC = vec3(${oldHeight}.0, ${oldWidth}.0,\n                                     ${oldWidth}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${sourceFracIndexRC};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec3 sourceNearestRC = ivec3(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${roundBase})));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${depth - 1};\n        bool hasNextRow = coords.z < ${newWidth - 1};\n\n        vec4 newValue = vec4(\n          getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d),\n          hasNextCol ? getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d + 1) : 0.0);\n\n        setOutput(newValue);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, ResizeNearestNeighbor, ResizeNearestNeighborAttrs, ResizeNearestNeighborInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ResizeNearestNeighborProgram} from '../resize_nearest_neighbor_gpu';\nimport {ResizeNearestNeighborPackedProgram} from '../resize_nearest_neighbor_packed_gpu';\n\nexport function resizeNearestNeighbor(args: {\n  inputs: ResizeNearestNeighborInputs,\n  backend: MathBackendWebGL,\n  attrs: ResizeNearestNeighborAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images} = inputs;\n  const {alignCorners, halfPixelCenters, size} = attrs;\n\n  const [newHeight, newWidth] = size;\n\n  const program = env().getBool('WEBGL_PACK_IMAGE_OPERATIONS') ?\n      new ResizeNearestNeighborPackedProgram(\n          images.shape as [number, number, number, number], newHeight, newWidth,\n          alignCorners, halfPixelCenters) :\n      new ResizeNearestNeighborProgram(\n          images.shape as [number, number, number, number], newHeight, newWidth,\n          alignCorners, halfPixelCenters);\n  return backend.runWebGLProgram(program, [images], images.dtype);\n}\n\nexport const resizeNearestNeighborConfig: KernelConfig = {\n  kernelName: ResizeNearestNeighbor,\n  backendName: 'webgl',\n  kernelFunc: resizeNearestNeighbor as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ResizeNearestNeigborBackpropProgram implements GPGPUProgram {\n  variableNames = ['dy'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      dyShape: [number, number, number, number],\n      inputShape: [number, number, number, number], alignCorners: boolean) {\n    this.outputShape = inputShape;\n    const [, xHeight, xWidth, ] = inputShape;\n    const [, yHeight, yWidth] = dyShape;\n\n    // In the backwards pass, we want to find the pixels that were generated for\n    // each pixel in the input image the forward pass and add the corresponding\n    // coefficient from dy to the gradient (with some interpolation).\n\n    const effectiveXSize: [number, number] = [\n      (alignCorners && yHeight > 1) ? xHeight - 1 : xHeight,\n      (alignCorners && yWidth > 1) ? xWidth - 1 : xWidth\n    ];\n\n    const effectiveYSize: [number, number] = [\n      (alignCorners && yHeight > 1) ? yHeight - 1 : yHeight,\n      (alignCorners && yWidth > 1) ? yWidth - 1 : yWidth\n    ];\n\n    const heightScale = effectiveXSize[0] / effectiveYSize[0];\n    const widthScale = effectiveXSize[1] / effectiveYSize[1];\n\n    const invHeightScale = 1 / heightScale;\n    const invWidthScale = 1 / widthScale;\n\n    // This defines the size of the window of values around a particular\n    // index in dy that we want to search for contributions to dx.\n    const winHeight = (Math.ceil(invHeightScale) * 2) + 2;\n    const winWidth = (Math.ceil(invWidthScale) * 2) + 2;\n\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${heightScale});\n        const float widthScale = float(${widthScale});\n\n        const float invHeightScale = float(${invHeightScale});\n        const float invWidthScale = float(${invWidthScale});\n\n        const int winHeight = int(${winHeight});\n        const int winWidth = int(${winWidth});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${yHeight}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${yWidth}) {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(${effectiveXSize[0]}) *\n                (float(dyR) / float(${effectiveYSize[0]}));\n\n            float sourceFracCol =\n                float(${effectiveXSize[1]}) *\n                  (float(dyC) / float(${effectiveYSize[1]}));\n\n            int sourceNearestRow = int(min(\n                float(int(${xHeight}) - 1),\n                ${alignCorners} ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(${xWidth}) - 1),\n                ${alignCorners} ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, ResizeNearestNeighborGrad, ResizeNearestNeighborGradAttrs, ResizeNearestNeighborGradInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ResizeNearestNeigborBackpropProgram} from '../resize_nearest_neighbor_backprop_gpu';\n\nexport function resizeNearestNeighborGrad(args: {\n  inputs: ResizeNearestNeighborGradInputs,\n  backend: MathBackendWebGL,\n  attrs: ResizeNearestNeighborGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images, dy} = inputs;\n  const {alignCorners} = attrs;\n\n  const program = new ResizeNearestNeigborBackpropProgram(\n      dy.shape as [number, number, number, number],\n      images.shape as [number, number, number, number], alignCorners);\n  return backend.runWebGLProgram(program, [dy], dy.dtype);\n}\n\nexport const resizeNearestNeighborGradConfig: KernelConfig = {\n  kernelName: ResizeNearestNeighborGrad,\n  backendName: 'webgl',\n  kernelFunc: resizeNearestNeighborGrad as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class ReverseProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(xShape: number[], axis: number[]) {\n    const rank = xShape.length;\n    if (rank > 4) {\n      throw new Error(\n          `WebGL backend: Reverse of rank-${rank} tensor is not yet supported`);\n    }\n    this.outputShape = xShape;\n\n    if (rank === 1) {\n      this.userCode = `\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(${xShape[0]} - coord - 1));\n        }\n      `;\n      return;\n    }\n    const getInCoord = (i: number) => {\n      if (axis.indexOf(i) !== -1 && xShape[i] !== 1) {\n        return `${xShape[i]} - coords[${i}] - 1`;\n      }\n      return `coords[${i}]`;\n    };\n    const inCoords = xShape.map((_, i) => getInCoord(i)).join(',');\n    const type = getCoordsDataType(rank);\n\n    this.userCode = `\n      void main() {\n        ${type} coords = getOutputCoords();\n        setOutput(getX(${inCoords}));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class ReversePackedProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(xShape: number[], axis: number[]) {\n    const rank = xShape.length;\n    if (rank > 4) {\n      throw new Error(\n          `WebGL backend: Reverse of rank-${rank} tensor is not yet supported`);\n    }\n    this.outputShape = xShape;\n    const channels = getChannels('rc', rank);\n    const nextColumn =\n        `${channels[rank - 1]} + 1 < ${this.outputShape[rank - 1]}`;\n    const nextRow = `${channels[rank - 2]} + 1 < ${this.outputShape[rank - 2]}`;\n    const type = getCoordsDataType(rank);\n    if (rank === 1) {\n      this.userCode = `\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(${xShape[0]} - rc - 1),\n            ${xShape[0]} - rc - 1);\n          if(${nextColumn}){\n              result.g = getChannel(getX(${xShape[0]} - (rc  + 1) - 1),\n                ${xShape[0]} - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      `;\n    } else {\n      this.userCode = `\n        void main() {\n          ${type} rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = ${getR(channels.slice())};\n          if(${nextColumn}){\n            result.g = ${getG(channels.slice())};\n          }\n          if(${nextRow}) {\n            result.b = ${getB(channels.slice())};\n            if(${nextColumn}) {\n              result.a = ${getA(channels.slice())};\n            }\n          }\n          setOutput(result);\n        }\n    `;\n    }\n\n    function getR(channels: string[]): string {\n      return getChannel(channels);\n    }\n\n    function getG(channels: string[]): string {\n      channels[rank - 1] = '(' + channels[rank - 1] + ` + 1)`;\n      return getChannel(channels);\n    }\n\n    function getB(channels: string[]): string {\n      channels[rank - 2] = '(' + channels[rank - 2] + ` + 1)`;\n      return getChannel(channels);\n    }\n\n    function getA(channels: string[]): string {\n      channels[rank - 1] = '(' + channels[rank - 1] + ` + 1)`;\n      channels[rank - 2] = '(' + channels[rank - 2] + ` + 1)`;\n      return getChannel(channels);\n    }\n\n    function getChannel(channels: string[]): string {\n      const inCoordsArray = xShape.map((_, i) => getInCoord(i, channels));\n      const inCoords = inCoordsArray.join(',');\n      const innerDims = inCoordsArray.slice(-2).join(',');\n      return `getChannel(getX(${inCoords}), vec2(${innerDims}))`;\n    }\n\n    function getInCoord(i: number, channels1: string[]): string {\n      if (axis.indexOf(i) !== -1 && xShape[i] !== 1) {\n        return `${xShape[i]} - ${channels1[i]} - 1`;\n      } else {\n        return `${channels1[i]}`;\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, Reverse, ReverseAttrs, ReverseInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ReverseProgram} from '../reverse_gpu';\nimport {ReversePackedProgram} from '../reverse_packed_gpu';\n\nimport {identity} from './Identity';\n\nexport function reverse(args: {\n  inputs: ReverseInputs,\n  backend: MathBackendWebGL,\n  attrs: ReverseAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {dims} = attrs;\n\n  const xRank = x.shape.length;\n\n  const $dims = util.parseAxisParam(dims, x.shape);\n  if (xRank === 0) {\n    return identity({inputs: {x}, backend});\n  }\n\n  const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?\n      new ReversePackedProgram(x.shape, $dims) :\n      new ReverseProgram(x.shape, $dims);\n\n  return backend.runWebGLProgram(program, [x], x.dtype);\n}\n\nexport const reverseConfig: KernelConfig = {\n  kernelName: Reverse,\n  backendName: 'webgl',\n  kernelFunc: reverse as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {UniformType} from './shader_compiler';\n\nexport class RotateProgram implements GPGPUProgram {\n  variableNames = ['Image'];\n  outputShape: number[] = [];\n  userCode: string;\n  customUniforms = [{name: 'params', type: 'vec4' as UniformType}];\n  constructor(\n      imageShape: [number, number, number, number],\n      fillValue: number|[number, number, number]) {\n    const imageHeight = imageShape[1];\n    const imageWidth = imageShape[2];\n    this.outputShape = imageShape;\n\n    let fillSnippet = '';\n    if (typeof fillValue === 'number') {\n      fillSnippet = `float outputValue = ${fillValue.toFixed(2)};`;\n    } else {\n      fillSnippet = `\n        vec3 fill = vec3(${fillValue.join(',')});\n        float outputValue = fill[coords[3]];`;\n    }\n\n    this.userCode = `\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n          int y = coords[1];\n          float coordXFloat = (float(x) - params[0]) * params[3] -\n            (float(y) - params[1]) * params[2];\n          float coordYFloat = (float(x) - params[0]) * params[2] +\n            (float(y) - params[1]) * params[3];\n          int coordX = int(round(coordXFloat + params[0]));\n          int coordY = int(round(coordYFloat + params[1]));\n          ${fillSnippet}\n          if(coordX >= 0 && coordX < ${imageWidth} && coordY >= 0 && coordY < ${\n        imageHeight}) {\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, Tensor4D} from '@tensorflow/tfjs-core';\nimport {RotateWithOffset, RotateWithOffsetAttrs, RotateWithOffsetInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {RotateProgram} from '../rotate_gpu';\n\nexport const rotateWithOffsetConfig: KernelConfig = {\n  kernelName: RotateWithOffset,\n  backendName: 'webgl',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {image} = inputs as RotateWithOffsetInputs;\n    const {radians, fillValue, center} =\n        attrs as unknown as RotateWithOffsetAttrs;\n    const webglBackend = backend as MathBackendWebGL;\n\n    const program = new RotateProgram((image as Tensor4D).shape, fillValue);\n    const [centerX, centerY] =\n        backend_util.getImageCenter(center, image.shape[1], image.shape[2]);\n    const customValues =\n        [[centerX, centerY, Math.sin(radians), Math.cos(radians)]];\n    const output = webglBackend.runWebGLProgram(\n        program, [image], image.dtype, customValues);\n    return output;\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Round} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst ROUND = `\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n`;\n\nexport const round = unaryKernelFunc({opSnippet: ROUND});\n\nexport const roundConfig: KernelConfig = {\n  kernelName: Round,\n  backendName: 'webgl',\n  kernelFunc: round,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Rsqrt} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {rsqrtImplCPU} from '../kernel_utils/shared';\n\nconst RSQRT = `return inversesqrt(x);`;\n\nexport const rsqrt =\n    unaryKernelFunc({opSnippet: RSQRT, cpuKernelImpl: rsqrtImplCPU});\n\nexport const rsqrtConfig: KernelConfig = {\n  kernelName: Rsqrt,\n  backendName: 'webgl',\n  kernelFunc: rsqrt as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class ScatterProgram implements GPGPUProgram {\n  variableNames = ['updates', 'indices', 'defaultValue'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      updateSize: number, sliceDim: number, indicesRank: number,\n      updatesRank: number, strides: number[], shape: number[],\n      summingDupeIndex = true, defaultIsTensor = false) {\n    this.outputShape = shape;\n    const stridesType = getCoordsDataType(strides.length);\n    const dtype = getCoordsDataType(shape.length);\n    let indicesString = '';\n    if (indicesRank === 1) {\n      indicesString = 'i';\n    } else if (indicesRank === 2) {\n      indicesString = 'i, j';\n    }\n    const indicesSnippet = `getIndices(${indicesString})`;\n\n    let updatesString = '';\n    if (updatesRank === 1) {\n      updatesString = 'i';\n    } else if (updatesRank === 2) {\n      updatesString = 'i, coords[1]';\n    }\n    const updatesSnippet = `getUpdates(${updatesString})`;\n\n    let defaultValuesString = '';\n    if (defaultIsTensor) {\n      defaultValuesString = 'coords[0], coords[1]';\n    }\n    const defaultValueSnippet = `getDefaultValue(${defaultValuesString})`;\n\n    const strideString = sliceDim > 1 ? 'strides[j]' : 'strides';\n    this.userCode = `\n        ${stridesType} strides = ${stridesType}(${strides});\n\n        void main() {\n          ${dtype} coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ${updateSize}; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ${sliceDim}; j++) {\n              int index = round(${indicesSnippet});\n              flattenedIndex += index * ${strideString};\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += ${updatesSnippet};\n              found = true;\n            }\n          }\n          setOutput(mix(${defaultValueSnippet}, sum, float(found)));\n        }\n      `;\n  }\n}\n","/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class ScatterPackedProgram implements GPGPUProgram {\n  variableNames = ['updates', 'indices', 'defaultValue'];\n  outputShape: number[];\n  packedInputs = true;\n  packedOutput = true;\n  userCode: string;\n\n  constructor(\n      updateSize: number, sliceDim: number, indicesRank: number,\n      updatesRank: number, strides: number[], shape: number[],\n      summingDupeIndex = true, defaultIsTensor = false) {\n    this.outputShape = shape;\n    const stridesType = getCoordsDataType(strides.length);\n    const dtype = getCoordsDataType(shape.length);\n    let indicesString = '';\n    if (indicesRank === 1) {\n      indicesString = 'i';\n    } else if (indicesRank === 2) {\n      indicesString = 'i, j';\n    }\n    const indicesSnippet = `getIndices(${indicesString})`;\n\n    let updatesString = '';\n    if (updatesRank === 1) {\n      updatesString = 'i';\n    } else if (updatesRank === 2) {\n      updatesString = 'i, coords[1]';\n    }\n    const updatesSnippet = `getUpdates(${updatesString})`;\n\n    let defaultValuesString = '';\n    if (defaultIsTensor) {\n      defaultValuesString = 'coords[0], coords[1]';\n    }\n    const defaultValueSnippet = `getDefaultValue(${defaultValuesString})`;\n\n    const strideString = sliceDim > 1 ? 'strides[j]' : 'strides';\n    const strideString2 = sliceDim > 1 ? 'strides[j + 1]' : 'strides';\n\n    this.userCode = `\n        ${stridesType} strides = ${stridesType}(${strides});\n\n        void main() {\n          ${dtype} coords = getOutputCoords();\n          vec4 sum = vec4(0.);\n          vec4 found = vec4(0.);\n          for (int i = 0; i < ${updateSize}; i+=2) {\n            ivec2 flattenedIndex = ivec2(0);\n            for (int j = 0; j < ${sliceDim}; j+=2) {\n              ivec4 index = round(${indicesSnippet});\n              flattenedIndex += index.xz * ${strideString};\n              if (j + 1 < ${sliceDim}) {\n                flattenedIndex += index.yw * ${strideString2};\n              }\n            }\n            if (flattenedIndex[0] == coords[0] || flattenedIndex[1] == coords[0] ||\n                flattenedIndex[0] == coords[0] + 1 || flattenedIndex[1] == coords[0] + 1) {\n              vec4 updVals = ${updatesSnippet};\n              if (flattenedIndex[0] == coords[0]) {\n                sum.xy += updVals.xy;\n                found.xy = vec2(1.);\n              } else if (flattenedIndex[0] == coords[0] + 1) {\n                sum.zw += updVals.xy;\n                found.zw = vec2(1.);\n              }\n              if (flattenedIndex[1] == coords[0]) {\n                sum.xy += updVals.zw;\n                found.xy = vec2(1.);\n              } else if (flattenedIndex[1] == coords[0] + 1) {\n                sum.zw += updVals.zw;\n                found.zw = vec2(1.);\n              }\n            }\n          }\n          setOutput(mix(${defaultValueSnippet}, sum, found));\n        }\n      `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, env, KernelConfig, KernelFunc, ScatterNd, ScatterNdAttrs, ScatterNdInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ScatterProgram} from '../scatter_gpu';\nimport {ScatterPackedProgram} from '../scatter_packed_gpu';\nimport {reshape} from './Reshape';\n\nexport function scatterNd(args: {\n  inputs: ScatterNdInputs,\n  backend: MathBackendWebGL,\n  attrs: ScatterNdAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {indices, updates} = inputs;\n  const {shape} = attrs;\n\n  const {sliceRank, numUpdates, sliceSize, strides, outputSize} =\n      backend_util.calculateShapes(updates, indices, shape);\n\n  const flattenShape = [outputSize / sliceSize, sliceSize];\n\n  if (outputSize === 0) {\n    return backend.makeTensorInfo(shape, indices.dtype);\n  }\n\n  const flattenIndices = reshape(\n      {inputs: {x: indices}, backend, attrs: {shape: [numUpdates, sliceRank]}});\n  const flattenX = reshape(\n      {inputs: {x: updates}, backend, attrs: {shape: [numUpdates, sliceSize]}});\n\n  const defaultValue = backend.makeTensorInfo(\n      [], 'float32', new Float32Array([0]));  // scalar(0)\n  let program;\n  if (env().getBool('WEBGL_PACK')) {\n    program = new ScatterPackedProgram(\n        numUpdates, sliceRank, flattenIndices.shape.length,\n        flattenX.shape.length, strides, flattenShape);\n  } else {\n    program = new ScatterProgram(\n        numUpdates, sliceRank, flattenIndices.shape.length,\n        flattenX.shape.length, strides, flattenShape);\n  }\n  const res = backend.runWebGLProgram(\n      program, [flattenX, flattenIndices, defaultValue], flattenX.dtype);\n\n  const reshaped = reshape({inputs: {x: res}, backend, attrs: {shape}});\n\n  backend.disposeIntermediateTensorInfo(flattenIndices);\n  backend.disposeIntermediateTensorInfo(flattenX);\n  backend.disposeIntermediateTensorInfo(res);\n  backend.disposeIntermediateTensorInfo(defaultValue);\n\n  return reshaped;\n}\n\nexport const scatterNdConfig: KernelConfig = {\n  kernelName: ScatterNd,\n  backendName: 'webgl',\n  kernelFunc: scatterNd as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\nimport {UniformType} from './shader_compiler';\n\nexport class SearchSortedProgram implements GPGPUProgram {\n  variableNames = ['sortedSequence', 'values'];\n  outputShape: number[];\n  userCode: string;\n  customUniforms = [{name: 'numInputs', type: 'int' as UniformType}];\n\n  constructor(\n      batchSize: number, numInputs: number, numValues: number,\n      side: 'left'|'right') {\n    this.outputShape = [batchSize, numValues];\n\n    const webGL2LoopHead = 'while (left < right) {';\n    // WebGL1 doesn't accept non constant loop conditions, so upper bound loop\n    // iterations.\n    const webGL1LoopHead = `for (int i = 0; i < ${\n        Math.ceil(Math.log2(numInputs + 1))}; ++i) { if (left >= right) break;`;\n    const loopHead = env().getNumber('WEBGL_VERSION') === 2 ? webGL2LoopHead :\n                                                              webGL1LoopHead;\n\n    // left corresponds to lower bound and right to upper bound.\n    const boundComparator = side === 'left' ? '<' : '<=';\n    this.userCode = `\n       int findBound(int batch, float value) {\n         int left = 0;\n         int right = numInputs;\n         int mid;\n         ${loopHead}\n           mid = (left + right) / 2;\n           if (getSortedSequence(batch, mid) ${boundComparator} value) {\n             left = mid + 1;\n           } else {\n             right = mid;\n           }\n         }\n         return right;\n       }\n\n       void main() {\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int valueIndex = coords[1];\n\n         float value = getValues(batch, valueIndex);\n\n         setOutput(float(findBound(batch, value)));\n       }\n     `;\n  }\n}\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, SearchSorted, SearchSortedAttrs, SearchSortedInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {SearchSortedProgram} from '../search_sorted_gpu';\n\nexport function searchSorted(args: {\n  inputs: SearchSortedInputs,\n  backend: MathBackendWebGL,\n  attrs: SearchSortedAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {sortedSequence, values} = inputs;\n  const {side} = attrs;\n\n  const program = new SearchSortedProgram(\n      sortedSequence.shape[0], sortedSequence.shape[1], values.shape[1], side);\n  const customValues = [[sortedSequence.shape[1]]];\n  return backend.runWebGLProgram(\n      program, [sortedSequence, values], 'int32', customValues);\n}\n\nexport const searchSortedConfig: KernelConfig = {\n  kernelName: SearchSorted,\n  backendName: 'webgl',\n  kernelFunc: searchSorted as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class SelectProgram implements GPGPUProgram {\n  variableNames = ['c', 'a', 'b'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(cRank: number, shape: number[], rank: number) {\n    this.outputShape = shape;\n\n    let cCoords;\n    let abCoords;\n    if (rank > 4) {\n      throw Error(`Where for rank ${rank} is not yet supported`);\n    }\n\n    if (rank === 1) {\n      abCoords = `resRC`;\n      cCoords = `resRC`;\n    } else {\n      const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w'];\n      const cCoordVars = [];\n      const abCoordVars = [];\n      for (let i = 0; i < shape.length; i++) {\n        abCoordVars.push(`${currentCoords[i]}`);\n        if (i < cRank) {\n          cCoordVars.push(`${currentCoords[i]}`);\n        }\n      }\n      cCoords = cCoordVars.join();\n      abCoords = abCoordVars.join();\n    }\n\n    const dtype = getCoordsDataType(rank);\n\n    this.userCode = `\n      void main() {\n        ${dtype} resRC = getOutputCoords();\n        float cVal = getC(${cCoords});\n        if (cVal >= 1.0) {\n          setOutput(getA(${abCoords}));\n        } else {\n          setOutput(getB(${abCoords}));\n        }\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Select, SelectInputs, TensorInfo, upcastType} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {SelectProgram} from '../select_gpu';\n\nexport function select(args: {inputs: SelectInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {condition, t, e} = inputs;\n\n  const program =\n      new SelectProgram(condition.shape.length, t.shape, t.shape.length);\n  return backend.runWebGLProgram(\n      program, [condition, t, e], upcastType(t.dtype, e.dtype));\n}\n\nexport const selectConfig: KernelConfig = {\n  kernelName: Select,\n  backendName: 'webgl',\n  kernelFunc: select as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, Selu} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst SELU = `\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = ${backend_util.SELU_SCALEALPHA};\n  float scale = ${backend_util.SELU_SCALE};\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n`;\n\nexport const selu = unaryKernelFunc({opSnippet: SELU});\n\nexport const seluConfig: KernelConfig = {\n  kernelName: Selu,\n  backendName: 'webgl',\n  kernelFunc: selu,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sigmoid} from '@tensorflow/tfjs-core';\n\nimport {CHECK_NAN_SNIPPET_UNARY, unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {sigmoidImplCPU} from '../kernel_utils/shared';\n\nconst SIGMOID = CHECK_NAN_SNIPPET_UNARY + `\n  return 1.0 / (1.0 + exp(-1.0 * x));\n`;\n\nconst SIGMOID_PACKED = `\n  vec4 result = 1.0 / (1.0 + exp(-1.0 * x));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n`;\nexport const sigmoid = unaryKernelFunc({\n  opSnippet: SIGMOID,\n  packedOpSnippet: SIGMOID_PACKED,\n  cpuKernelImpl: sigmoidImplCPU\n});\n\nexport const sigmoidConfig: KernelConfig = {\n  kernelName: Sigmoid,\n  backendName: 'webgl',\n  kernelFunc: sigmoid,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sign} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\n// Sign does not propagate NANs.\nconst SIGN = `\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n`;\n\nexport const sign = unaryKernelFunc({opSnippet: SIGN});\n\nexport const signConfig: KernelConfig = {\n  kernelName: Sign,\n  backendName: 'webgl',\n  kernelFunc: sign,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sin} from '@tensorflow/tfjs-core';\n\nimport {CHECK_NAN_SNIPPET_PACKED} from '../binaryop_packed_gpu';\nimport {CHECK_NAN_SNIPPET_UNARY, unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst SIN = CHECK_NAN_SNIPPET_UNARY + `\n  return sin(x);\n`;\n\nconst SIN_PACKED = `\n  vec4 result = sin(x);\n  bvec4 isNaN = isnan(x);\n  ${CHECK_NAN_SNIPPET_PACKED}\n  return result;\n`;\n\nexport const sin =\n    unaryKernelFunc({opSnippet: SIN, packedOpSnippet: SIN_PACKED});\n\nexport const sinConfig: KernelConfig = {\n  kernelName: Sin,\n  backendName: 'webgl',\n  kernelFunc: sin,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sinh} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst SINH = `\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n`;\n\nexport const sinh = unaryKernelFunc({opSnippet: SINH});\n\nexport const sinhConfig: KernelConfig = {\n  kernelName: Sinh,\n  backendName: 'webgl',\n  kernelFunc: sinh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Softplus} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst SOFTPLUS = `\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n`;\n\nexport const softplus = unaryKernelFunc({opSnippet: SOFTPLUS});\n\nexport const softplusConfig: KernelConfig = {\n  kernelName: Softplus,\n  backendName: 'webgl',\n  kernelFunc: softplus,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, SpaceToBatchND, SpaceToBatchNDAttrs, SpaceToBatchNDInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {padV2} from './PadV2';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport const spaceToBatchND = (args: {\n  inputs: SpaceToBatchNDInputs,\n  backend: MathBackendWebGL,\n  attrs: SpaceToBatchNDAttrs\n}): TensorInfo => {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {blockShape, paddings} = attrs;\n\n  util.assert(\n      x.shape.length <= 4,\n      () => 'spaceToBatchND for rank > 4 with a WebGL backend not ' +\n          'implemented yet');\n\n  const prod = blockShape.reduce((a, b) => a * b);\n\n  const completePaddings: Array<[number, number]> = [[0, 0]];\n  completePaddings.push(...paddings as Array<[number, number]>);\n  for (let i = 1 + blockShape.length; i < x.shape.length; ++i) {\n    completePaddings.push([0, 0]);\n  }\n\n  const toDispose = [];\n\n  const paddedX = padV2({\n    inputs: {x},\n    backend,\n    attrs: {paddings: completePaddings, constantValue: 0}\n  });\n\n  const reshapedPaddedShape =\n      backend_util.getReshaped(paddedX.shape, blockShape, prod, false);\n\n  const permutedReshapedPaddedPermutation = backend_util.getPermuted(\n      reshapedPaddedShape.length, blockShape.length, false);\n\n  const flattenShape =\n      backend_util.getReshapedPermuted(paddedX.shape, blockShape, prod, false);\n\n  const reshapedPaddedX = reshape(\n      {inputs: {x: paddedX}, backend, attrs: {shape: reshapedPaddedShape}});\n\n  const paddedXT = transpose({\n    inputs: {x: reshapedPaddedX},\n    backend,\n    attrs: {perm: permutedReshapedPaddedPermutation}\n  });\n\n  const result =\n      reshape({inputs: {x: paddedXT}, backend, attrs: {shape: flattenShape}});\n\n  toDispose.push(paddedX);\n  toDispose.push(reshapedPaddedX);\n  toDispose.push(paddedXT);\n\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return result;\n};\n\nexport const spaceToBatchNDConfig: KernelConfig = {\n  kernelName: SpaceToBatchND,\n  backendName: 'webgl',\n  kernelFunc: spaceToBatchND as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, SparseFillEmptyRows, SparseFillEmptyRowsInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {sparseFillEmptyRowsImplCPU} from '../kernel_utils/shared';\n\nexport function sparseFillEmptyRows(args: {\n  inputs: SparseFillEmptyRowsInputs,\n  backend: MathBackendWebGL\n}): [TensorInfo, TensorInfo, TensorInfo, TensorInfo] {\n  const {inputs, backend} = args;\n  const {indices, values, denseShape, defaultValue} = inputs;\n  if (denseShape.shape.length !== 1) {\n    throw new Error(`Dense shape must be a vector, saw:\n         ${denseShape.shape}`);\n  }\n  if (indices.shape.length !== 2) {\n    throw new Error(`Indices must be a matrix, saw:\n         ${indices.shape}`);\n  }\n  if (values.shape.length !== 1) {\n    throw new Error(`Values must be a vector, saw:\n         ${values.shape}`);\n  }\n  if (defaultValue.shape.length !== 0) {\n    throw new Error(`Default value must be a scalar, saw:\n        ${defaultValue.shape}`);\n  }\n\n  const $indices = backend.readSync(indices.dataId) as TypedArray;\n  const $values = backend.readSync(values.dataId) as TypedArray;\n  const $denseShape = backend.readSync(denseShape.dataId) as TypedArray;\n  const $defaultValue =\n      backend.readSync(defaultValue.dataId)[0] as number;\n\n  const [outputIndices, outputIndicesShape, outputValues,\n         emptyRowIndicator, reverseIndexMap] =\n      sparseFillEmptyRowsImplCPU(\n          $indices, indices.shape, indices.dtype, $values, values.dtype,\n          $denseShape, $defaultValue);\n  return [\n    backend.makeTensorInfo(outputIndicesShape, indices.dtype, outputIndices),\n    backend.makeTensorInfo(\n        [outputIndicesShape[0]], values.dtype, outputValues),\n    backend.makeTensorInfo(\n        [emptyRowIndicator.length], 'bool',\n        new Uint8Array(\n            emptyRowIndicator.map((value: boolean) => Number(value)))),\n    backend.makeTensorInfo(\n        [reverseIndexMap.length], indices.dtype,\n        new Int32Array(reverseIndexMap)),\n  ];\n}\n\nexport const sparseFillEmptyRowsConfig: KernelConfig = {\n  kernelName: SparseFillEmptyRows,\n  backendName: 'webgl',\n  kernelFunc: sparseFillEmptyRows as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, SparseReshape, SparseReshapeInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {sparseReshapeImplCPU} from '../kernel_utils/shared';\n\nexport function sparseReshape(\n    args: {inputs: SparseReshapeInputs, backend: MathBackendWebGL}):\n    [TensorInfo, TensorInfo] {\n  const {inputs, backend} = args;\n  const {inputIndices, inputShape, newShape} = inputs;\n  if (inputIndices.shape.length !== 2) {\n    throw new Error(`Input indices should be a matrix but received shape ${\n        inputIndices.shape}`);\n  }\n  if (inputShape.shape.length !== 1) {\n    throw new Error(`Input shape should be a vector but received shape ${\n        inputShape.shape}`);\n  }\n\n  if (newShape.shape.length !== 1) {\n    throw new Error(\n        `Target shape should be a vector but received shape ${newShape.shape}`);\n  }\n\n  const $inputShape =\n      Array.from(backend.readSync(inputShape.dataId) as TypedArray);\n  const $inputIndices = backend.readSync(inputIndices.dataId) as TypedArray;\n  const targetShape =\n      Array.from(backend.readSync(newShape.dataId) as TypedArray);\n\n  const [newIndices, indicesShape, outputShape] = sparseReshapeImplCPU(\n      $inputIndices, inputIndices.shape, inputIndices.dtype, $inputShape,\n      targetShape);\n  return [\n    backend.makeTensorInfo(indicesShape, inputIndices.dtype, newIndices),\n    backend.makeTensorInfo(\n        [outputShape.length], newShape.dtype, new Int32Array(outputShape)),\n  ];\n}\n\nexport const sparseReshapeConfig: KernelConfig = {\n  kernelName: SparseReshape,\n  backendName: 'webgl',\n  kernelFunc: sparseReshape,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, SparseSegmentMean, SparseSegmentMeanInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {sparseSegmentReductionImplCPU} from '../kernel_utils/shared';\n\nexport function sparseSegmentMean(\n    args: {inputs: SparseSegmentMeanInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {data, indices, segmentIds} = inputs;\n  if (data.shape.length < 1) {\n    throw new Error(\n        `Data should be at least 1 dimensional but received scalar`);\n  }\n  if (indices.shape.length !== 1) {\n    throw new Error(`Indices should be a vector but received shape\n              ${indices.shape}`);\n  }\n  if (segmentIds.shape.length !== 1) {\n    throw new Error(`Segment ids should be a vector but received shape\n              ${segmentIds.shape}`);\n  }\n\n  const $data = backend.readSync(data.dataId) as TypedArray;\n  const $indices = backend.readSync(indices.dataId) as TypedArray;\n  const $segmentIds = backend.readSync(segmentIds.dataId) as TypedArray;\n\n  const [outputData, outputDataShape] = sparseSegmentReductionImplCPU(\n      $data, data.shape, data.dtype, $indices, $segmentIds, true);\n  return backend.makeTensorInfo(outputDataShape, data.dtype, outputData);\n}\n\nexport const sparseSegmentMeanConfig: KernelConfig = {\n  kernelName: SparseSegmentMean,\n  backendName: 'webgl',\n  kernelFunc: sparseSegmentMean as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, SparseSegmentSum, SparseSegmentSumInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {sparseSegmentReductionImplCPU} from '../kernel_utils/shared';\n\nexport function sparseSegmentSum(\n    args: {inputs: SparseSegmentSumInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {data, indices, segmentIds} = inputs;\n  if (data.shape.length < 1) {\n    throw new Error(\n        `Data should be at least 1 dimensional but received scalar`);\n  }\n  if (indices.shape.length !== 1) {\n    throw new Error(`Indices should be a vector but received shape\n             ${indices.shape}`);\n  }\n  if (segmentIds.shape.length !== 1) {\n    throw new Error(`Segment ids should be a vector but received shape\n             ${segmentIds.shape}`);\n  }\n\n  const $data = backend.readSync(data.dataId) as TypedArray;\n  const $indices = backend.readSync(indices.dataId) as TypedArray;\n  const $segmentIds = backend.readSync(segmentIds.dataId) as TypedArray;\n\n  const [outputData, outputDataShape] = sparseSegmentReductionImplCPU(\n      $data, data.shape, data.dtype, $indices, $segmentIds);\n  return backend.makeTensorInfo(outputDataShape, data.dtype, outputData);\n}\n\nexport const sparseSegmentSumConfig: KernelConfig = {\n  kernelName: SparseSegmentSum,\n  backendName: 'webgl',\n  kernelFunc: sparseSegmentSum as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Rank, SparseToDense, SparseToDenseAttrs, SparseToDenseInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {scatterImplCPU} from '../kernel_utils/shared';\nimport {ScatterProgram} from '../scatter_gpu';\n\nimport {reshape} from './Reshape';\n\nexport function sparseToDense(args: {\n  inputs: SparseToDenseInputs,\n  backend: MathBackendWebGL,\n  attrs: SparseToDenseAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {sparseIndices, sparseValues, defaultValue} = inputs;\n  const {outputShape} = attrs;\n\n  const {sliceRank, numUpdates, sliceSize, strides, outputSize} =\n      backend_util.calculateShapes(sparseValues, sparseIndices, outputShape);\n  const sumDupeIndices = false;\n\n  if (sparseValues.dtype === 'string') {\n    const indicesBuf = backend.bufferSync<Rank, 'int32'>(sparseIndices);\n    const updatesBuf = backend.bufferSync<Rank, 'string'>(sparseValues);\n    const $defaultValue = util.decodeString(\n        backend.readSync(defaultValue.dataId)[0] as Uint8Array);\n    const outBuf = scatterImplCPU(\n        indicesBuf, updatesBuf, outputShape, outputSize, sliceSize, numUpdates,\n        sliceRank, strides, $defaultValue, sumDupeIndices);\n    return backend.makeTensorInfo(outputShape, outBuf.dtype, outBuf.values);\n  }\n  const program = new ScatterProgram(\n      numUpdates, sliceRank, sparseIndices.shape.length,\n      sparseValues.shape.length, strides, [outputSize, 1], sumDupeIndices);\n\n  const res = backend.runWebGLProgram(\n      program, [sparseValues, sparseIndices, defaultValue], sparseValues.dtype);\n\n  const reshaped =\n      reshape({inputs: {x: res}, backend, attrs: {shape: outputShape}});\n\n  backend.disposeIntermediateTensorInfo(res);\n  return reshaped;\n}\n\nexport const sparseToDenseConfig: KernelConfig = {\n  kernelName: SparseToDense,\n  backendName: 'webgl',\n  kernelFunc: sparseToDense as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, SplitV, SplitVAttrs, SplitVInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {slice} from './Slice';\n\nexport function splitV(\n    args:\n        {inputs: SplitVInputs, backend: MathBackendWebGL, attrs: SplitVAttrs}):\n    TensorInfo[] {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {numOrSizeSplits, axis} = attrs;\n\n  const $axis = util.parseAxisParam(axis, x.shape)[0];\n  const splitSizes = backend_util.prepareSplitSize(x, numOrSizeSplits, $axis);\n\n  const xRank = x.shape.length;\n  const begin = new Array(xRank).fill(0);\n  const size = x.shape.slice();\n\n  return splitSizes.map(s => {\n    const sliceSize = [...size];\n    sliceSize[$axis] = s;\n    const sliceT =\n        slice({inputs: {x}, backend, attrs: {begin, size: sliceSize}});\n    begin[$axis] += s;\n    return sliceT;\n  });\n}\n\nexport const splitVConfig: KernelConfig = {\n  kernelName: SplitV,\n  backendName: 'webgl',\n  kernelFunc: splitV as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Sqrt} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {sqrtImplCPU} from '../kernel_utils/shared';\n\nconst SQRT = `return sqrt(x);`;\n\nexport const sqrt = unaryKernelFunc(\n    {opSnippet: SQRT, packedOpSnippet: SQRT, cpuKernelImpl: sqrtImplCPU});\n\nexport const sqrtConfig: KernelConfig = {\n  kernelName: Sqrt,\n  backendName: 'webgl',\n  kernelFunc: sqrt as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Square} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst SQUARE = `return x * x;`;\n\nexport const square = unaryKernelFunc({opSnippet: SQUARE});\n\nexport const squareConfig: KernelConfig = {\n  kernelName: Square,\n  backendName: 'webgl',\n  kernelFunc: square,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, SquaredDifference} from '@tensorflow/tfjs-core';\n\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst SQUARED_DIFFERENCE = 'return (a - b) * (a - b);';\n\nexport const squaredDifference = binaryKernelFunc(\n    {opSnippet: SQUARED_DIFFERENCE, packedOpSnippet: SQUARED_DIFFERENCE});\n\nexport const squaredDifferenceConfig: KernelConfig = {\n  kernelName: SquaredDifference,\n  backendName: 'webgl',\n  kernelFunc: squaredDifference,\n};\n","/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, NamedAttrMap, StaticRegexReplace, StaticRegexReplaceAttrs, StaticRegexReplaceInputs, TensorInfo} from '@tensorflow/tfjs-core';\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {staticRegexReplaceImplCPU} from '../kernel_utils/shared';\n\nexport function staticRegexReplace(args: {\n  inputs: StaticRegexReplaceInputs,\n  backend: MathBackendWebGL,\n  attrs: StaticRegexReplaceAttrs,\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n\n  if (x.dtype !== 'string') {\n    throw new Error('Input must be of datatype string');\n  }\n\n  const $x = backend.readSync(x.dataId) as Uint8Array[];\n\n  const stringInput = backend_util.fromUint8ToStringArray($x);\n  const output = staticRegexReplaceImplCPU(stringInput, 'string',\n                                           attrs as unknown as NamedAttrMap);\n\n  return backend.makeTensorInfo(x.shape, 'string', output);\n}\n\nexport const staticRegexReplaceConfig: KernelConfig = {\n  kernelName: StaticRegexReplace,\n  backendName: 'webgl',\n  kernelFunc: staticRegexReplace as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Step, StepAttrs, TensorInfo, UnaryInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {CHECK_NAN_SNIPPET, UnaryOpProgram} from '../unaryop_gpu';\n\nexport function step(\n    {inputs, attrs, backend}:\n        {inputs: UnaryInputs, attrs: StepAttrs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {x} = inputs;\n  const opSnippet = CHECK_NAN_SNIPPET + `\n    return x > 0.0 ? 1.0 : float(${attrs.alpha});\n  `;\n\n  const program = new UnaryOpProgram(x.shape, opSnippet);\n\n  return backend.runWebGLProgram(program, [x], x.dtype);\n}\n\nexport const stepConfig: KernelConfig = {\n  kernelName: Step,\n  backendName: 'webgl',\n  kernelFunc: step as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class StridedSliceProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(begin: number[], strides: number[], size: number[]) {\n    this.outputShape = size;\n    const rank = size.length;\n    const inputDtype = getCoordsDataType(size.length);\n    const dtype = getCoordsDataType(size.length);\n\n    let newCoords = '';\n    if (rank === 1) {\n      newCoords = 'coords * strides + begin';\n    } else {\n      let outputAxis = 0;\n      newCoords =\n          size.map((_, i) => {\n                outputAxis++;\n                return size.length === 1 ?\n                    `coords * strides[${i}] + begin[${i}]` :\n                    `coords[${outputAxis - 1}] * strides[${i}] + begin[${i}]`;\n              })\n              .join(',');\n    }\n\n    this.userCode = `\n      ${inputDtype} begin = ${inputDtype}(${begin});\n      ${inputDtype} strides = ${inputDtype}(${strides});\n\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        setOutput(getX(${newCoords}));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, KernelConfig, KernelFunc, Rank, slice_util, StridedSlice, StridedSliceAttrs, StridedSliceInputs, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {stridedSliceImplCPU} from '../kernel_utils/shared';\nimport {StridedSliceProgram} from '../strided_slice_gpu';\n\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\n\nexport function stridedSlice(args: {\n  inputs: StridedSliceInputs,\n  backend: MathBackendWebGL,\n  attrs: StridedSliceAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {\n    begin,\n    end,\n    strides,\n    beginMask,\n    endMask,\n    ellipsisMask,\n    newAxisMask,\n    shrinkAxisMask\n  } = attrs;\n\n  const {\n    finalShapeSparse,\n    finalShape,\n    isIdentity,\n    sliceDim0,\n    isSimpleSlice,\n    begin: $begin,\n    end: $end,\n    strides: $strides\n  } =\n      slice_util.sliceInfo(\n          x.shape, begin, end, strides, beginMask, endMask, ellipsisMask,\n          newAxisMask, shrinkAxisMask);\n\n  let result;\n\n  if (isIdentity) {\n    // Optimization #1, slice is a no-op plus reshape\n    result = reshape({inputs: {x}, backend, attrs: {shape: finalShape}});\n  } else if (sliceDim0 || isSimpleSlice) {\n    // Optimization #2, slice is memory contiguous (only occurs in dim 0)\n    util.assert(\n        x.shape.length >= 1,\n        () => `Input must have rank at least 1, got: ${x.shape.length}`);\n\n    const size = slice_util.computeOutShape($begin, $end, $strides);\n    // To tolerate begin[0] > end[0] (a 0-output slice), we min(begin, end).\n    const sliced = slice({inputs: {x}, backend, attrs: {begin: $begin, size}});\n    result =\n        reshape({inputs: {x: sliced}, backend, attrs: {shape: finalShape}});\n    backend.disposeIntermediateTensorInfo(sliced);\n  } else {\n    const shouldExecuteOnCPU = backend.shouldExecuteOnCPU([x]);\n    if (shouldExecuteOnCPU) {\n      // tslint:disable-next-line: no-unnecessary-type-assertion\n      const values = backend.readSync(x.dataId) as TypedArray;\n      // tslint:disable-next-line: no-unnecessary-type-assertion\n      const xBuf = buffer(x.shape, x.dtype, values) as TensorBuffer<Rank>;\n      const resultValues =\n          stridedSliceImplCPU(finalShapeSparse, xBuf, $strides, $begin);\n      result = backend.makeTensorInfo(finalShape, x.dtype, resultValues.values);\n    } else {\n      const program =\n          new StridedSliceProgram($begin, $strides, finalShapeSparse);\n      result = backend.runWebGLProgram(program, [x], x.dtype);\n    }\n  }\n\n  const resultReshaped =\n      reshape({inputs: {x: result}, backend, attrs: {shape: finalShape}});\n\n  backend.disposeIntermediateTensorInfo(result);\n\n  return resultReshaped;\n}\n\nexport const stridedSliceConfig: KernelConfig = {\n  kernelName: StridedSlice,\n  backendName: 'webgl',\n  kernelFunc: stridedSlice as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, StringNGrams, StringNGramsAttrs, StringNGramsInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {stringNGramsImplCPU} from '../kernel_utils/shared';\n\nexport function stringNGrams(args: {\n  inputs: StringNGramsInputs,\n  backend: MathBackendWebGL,\n  attrs: StringNGramsAttrs\n}): [TensorInfo, TensorInfo] {\n  const {inputs, backend, attrs} = args;\n  const {\n    separator,\n    nGramWidths,\n    leftPad,\n    rightPad,\n    padWidth,\n    preserveShortSequences\n  } = attrs;\n  const {data, dataSplits} = inputs;\n  const $data = backend.readSync(data.dataId) as Uint8Array[];\n  const $dataSplits = backend.readSync(dataSplits.dataId) as Int32Array;\n\n  const [nGrams, nGramsSplits] = stringNGramsImplCPU(\n      $data, $dataSplits, separator, nGramWidths, leftPad, rightPad, padWidth,\n      preserveShortSequences);\n  return [\n    backend.makeTensorInfo([nGrams.length], 'string', nGrams),\n    backend.makeTensorInfo(dataSplits.shape, 'int32', nGramsSplits),\n  ];\n}\n\nexport const stringNGramsConfig: KernelConfig = {\n  kernelName: StringNGrams,\n  backendName: 'webgl',\n  kernelFunc: stringNGrams as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, StringSplit, StringSplitAttrs, StringSplitInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {stringSplitImplCPU} from '../kernel_utils/shared';\n\nexport function stringSplit(args: {\n  inputs: StringSplitInputs,\n  backend: MathBackendWebGL,\n  attrs: StringSplitAttrs\n}): [TensorInfo, TensorInfo, TensorInfo] {\n  const {inputs, backend, attrs} = args;\n  const {skipEmpty} = attrs;\n  const {input, delimiter} = inputs;\n\n  if (input.dtype !== 'string') {\n    throw new Error('Input must be of datatype string');\n  }\n  if (input.shape.length !== 1) {\n    throw new Error(`Input must be a vector, got shape: ${input.shape}`);\n  }\n  if (delimiter.shape.length !== 0) {\n    throw new Error(\n        `Delimiter must be a scalar, got shape: ${delimiter.shape}`);\n  }\n\n  const $input = backend.readSync(input.dataId) as Uint8Array[];\n  const $delimiter = backend.readSync(delimiter.dataId)[0] as Uint8Array;\n\n  const [indices, values, shape] =\n      stringSplitImplCPU($input, $delimiter, skipEmpty);\n  const outputSize = values.length;\n  return [\n    backend.makeTensorInfo([outputSize, 2], 'int32', indices),\n    backend.makeTensorInfo([outputSize], 'string', values),\n    backend.makeTensorInfo([2], 'int32', new Int32Array(shape))\n  ];\n}\n\nexport const stringSplitConfig: KernelConfig = {\n  kernelName: StringSplit,\n  backendName: 'webgl',\n  kernelFunc: stringSplit as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, StringToHashBucketFast, StringToHashBucketFastAttrs, StringToHashBucketFastInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {stringToHashBucketFastImplCPU} from '../kernel_utils/shared';\n\nexport function stringToHashBucketFast(args: {\n  inputs: StringToHashBucketFastInputs,\n  backend: MathBackendWebGL,\n  attrs: StringToHashBucketFastAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {numBuckets} = attrs;\n  const {input} = inputs;\n\n  if (input.dtype !== 'string') {\n    throw new Error('Input must be of datatype string');\n  }\n  if (numBuckets <= 0) {\n    throw new Error(`Number of buckets must be at least 1`);\n  }\n\n  const $input = backend.readSync(input.dataId) as Uint8Array[];\n\n  const output = stringToHashBucketFastImplCPU($input, numBuckets);\n  return backend.makeTensorInfo(input.shape, 'int32', output);\n}\n\nexport const stringToHashBucketFastConfig: KernelConfig = {\n  kernelName: StringToHashBucketFast,\n  backendName: 'webgl',\n  kernelFunc: stringToHashBucketFast as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Tan} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst TAN = `return tan(x);`;\n\nexport const tan = unaryKernelFunc({opSnippet: TAN});\n\nexport const tanConfig: KernelConfig = {\n  kernelName: Tan,\n  backendName: 'webgl',\n  kernelFunc: tan,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Tanh} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst TANH = `\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n`;\n\nexport const tanh = unaryKernelFunc({opSnippet: TANH});\n\nexport const tanhConfig: KernelConfig = {\n  kernelName: Tanh,\n  backendName: 'webgl',\n  kernelFunc: tanh,\n};\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, TensorInfo, TensorScatterUpdate, TensorScatterUpdateAttrs, TensorScatterUpdateInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ScatterProgram} from '../scatter_gpu';\n\nimport {reshape} from './Reshape';\n\nexport function tensorScatterUpdate(args: {\n  inputs: TensorScatterUpdateInputs,\n  backend: MathBackendWebGL,\n  attrs: TensorScatterUpdateAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {tensor, indices, updates} = inputs;\n  const {} = attrs;\n\n  const {sliceRank, numUpdates, sliceSize, strides, outputSize} =\n      backend_util.calculateShapes(updates, indices, tensor.shape);\n\n  const flattenShape = [outputSize / sliceSize, sliceSize];\n\n  if (outputSize === 0) {\n    return backend.makeTensorInfo(tensor.shape, indices.dtype);\n  }\n\n  const flattenIndices = reshape(\n      {inputs: {x: indices}, backend, attrs: {shape: [numUpdates, sliceRank]}});\n  const flattenX = reshape(\n      {inputs: {x: updates}, backend, attrs: {shape: [numUpdates, sliceSize]}});\n  const flattenTensor =\n      reshape({inputs: {x: tensor}, backend, attrs: {shape: flattenShape}});\n  const program = new ScatterProgram(\n      numUpdates, sliceRank, flattenIndices.shape.length, flattenX.shape.length,\n      strides, flattenShape, false, true);\n  const res = backend.runWebGLProgram(\n      program, [flattenX, flattenIndices, flattenTensor], flattenTensor.dtype);\n\n  const reshaped =\n      reshape({inputs: {x: res}, backend, attrs: {shape: tensor.shape}});\n\n  backend.disposeIntermediateTensorInfo(flattenIndices);\n  backend.disposeIntermediateTensorInfo(flattenX);\n  backend.disposeIntermediateTensorInfo(flattenTensor);\n  backend.disposeIntermediateTensorInfo(res);\n\n  return reshaped;\n}\n\nexport const tensorScatterUpdateConfig: KernelConfig = {\n  kernelName: TensorScatterUpdate,\n  backendName: 'webgl',\n  kernelFunc: tensorScatterUpdate as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class TileProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  userCode: string;\n  rank: number;\n\n  constructor(aShape: number[], reps: number[]) {\n    const outputShape: number[] = new Array(aShape.length);\n    for (let i = 0; i < outputShape.length; i++) {\n      outputShape[i] = aShape[i] * reps[i];\n    }\n    this.outputShape = outputShape;\n    this.rank = outputShape.length;\n    const dtype = getCoordsDataType(this.rank);\n    const sourceCoords = getSourceCoords(aShape);\n\n    this.userCode = `\n      void main() {\n        ${dtype} resRC = getOutputCoords();\n        setOutput(getA(${sourceCoords}));\n      }\n    `;\n  }\n}\n\nfunction getSourceCoords(aShape: number[]): string {\n  const rank = aShape.length;\n  if (rank > 5) {\n    throw Error(`Tile for rank ${rank} is not yet supported`);\n  }\n  if (rank === 1) {\n    return `imod(resRC, ${aShape[0]})`;\n  }\n\n  const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w', 'resRC.u'];\n\n  const sourceCoords = [];\n  for (let i = 0; i < aShape.length; i++) {\n    sourceCoords.push(`imod(${currentCoords[i]}, ${aShape[i]})`);\n  }\n  return sourceCoords.join();\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, KernelConfig, KernelFunc, TensorInfo, Tile, TileAttrs, TileInputs, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {tileImplCPU} from '../kernel_utils/shared';\nimport {TileProgram} from '../tile_gpu';\n\nexport function tile(\n    params: {inputs: TileInputs, backend: MathBackendWebGL, attrs: TileAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = params;\n  const {x} = inputs;\n  const {reps} = attrs;\n\n  // tile gpu program cannot handle rank > 5 case.\n  if (x.dtype === 'string' || x.shape.length > 5) {\n    // Even thought string tensor is always on CPU, just to be consistent on how\n    // to access tensor data.\n    const data = backend.readSync(x.dataId);\n    const value = x.dtype === 'string' ?\n        (data as Uint8Array[]).map(d => util.decodeString(d)) :\n        data as TypedArray;\n    const buf = buffer(x.shape, x.dtype, value);\n    const outBuf = tileImplCPU(buf, reps);\n    return backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);\n  }\n\n  const program = new TileProgram(x.shape, reps);\n  const output = backend.runWebGLProgram(program, [x], x.dtype);\n\n  return output;\n}\n\nexport const tileConfig: KernelConfig = {\n  kernelName: Tile,\n  backendName: 'webgl',\n  kernelFunc: tile as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {GPGPUProgram} from './gpgpu_math';\nimport {UniformType} from './shader_compiler';\n\n// Based on Algorithm 2 of Bitonic Top K, ref:\n// https://anilshanbhag.in/static/papers/gputopk_sigmod18.pdf\n// The original algorithm is based on computing the top K only, however\n// since for TFJS we require the indices of the top K values as well then the\n// algorithm found here is a bit modified. Rather than producing the values\n// at each step, the indices containing the top K are generated instead.\n// The output values are not generated to reduce the number of outputs in the\n// GPU, the values can easily be retrieved from the indices using a gather\n// op.\nexport class SwapProgram implements GPGPUProgram {\n  variableNames = ['x', 'indices'];\n  outputShape: number[];\n  userCode: string;\n  // |n| Size of the original input of TopK.\n  // |firstPass|indicates if this is the first time swap is being used which\n  // means no indices input containing the top K is present yet.\n  // |inc| Swaps pairs of indices (0, inc), (1, inc + 1), (2, inc + 2) ...\n  customUniforms = [\n    {name: 'n', type: 'int' as UniformType},\n    {name: 'firstPass', type: 'int' as UniformType},\n    {name: 'negativeInf', type: 'float' as UniformType},\n    {name: 'dir', type: 'int' as UniformType},\n    {name: 'inc', type: 'int' as UniformType}\n  ];\n\n  /**\n   * @param shape desired output shape (can be larger than input shape, output\n   *                                    will be padded with -Infinity)\n   */\n  constructor(shape: number[]) {\n    this.outputShape = shape;\n\n    this.userCode = `\n       void main() {\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // We compare elements pair-wise within a group of size 2 * inc.\n         // The comparing rule for each group alternates between ascending\n         // and descending. Within each group, we compare each pair at\n         // positions i and i+inc. To decide whether an element at position i\n         // is x0 or x1, we mod it by 2 * inc, if the result is smaller than\n         // inc, it is in the first half of the group, we denote it as x0,\n         // otherwise we denote it as x1.\n         // For example, as shown in the Bitonic top K paper referenced above,\n         // Figure5(a) shows that element[1] is in the\n         // second half of the group when group size is 2, but it is in the\n         // first half of the group when group size is 4.\n\n         bool isFirstInPair = imod(elemIdx, 2 * inc) < inc;\n         int i = isFirstInPair ? elemIdx : elemIdx - inc;\n\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + inc : int(getIndices(batch, i + inc));\n         float x0 = i0 < n ? getX(batch, i0) : negativeInf;\n         float x1 = i1 < n ? getX(batch, i1) : negativeInf;\n\n         // Denotes which direction indices are in (ascending or descending).\n         bool reverse = imod(elemIdx, 2 * dir) >= dir;\n         bool isGreater = x0 > x1 || (x0 == x1 && i1 > i0);\n         if (reverse == isGreater) { // Elements in opposite order of direction\n           int iTemp = i0;\n           i0 = i1;\n           i1 = iTemp;\n         }\n         if (isFirstInPair) {\n            setOutput(float(i0));\n         } else {\n            setOutput(float(i1));\n         }\n       }\n     `;\n  }\n}\n\nexport class MergeProgram implements GPGPUProgram {\n  variableNames = ['x', 'indices'];\n  outputShape: number[];\n  userCode: string;\n  // |n| Size of the original input of TopK\n  // |firstPass| indicates if this is the first time swap is being used which\n  // means no indices input containing the top K is present yet.\n  // |k| Top k elements desired\n  customUniforms = [\n    {name: 'n', type: 'int' as UniformType},\n    {name: 'firstPass', type: 'int' as UniformType},\n    {name: 'k', type: 'int' as UniformType}\n  ];\n\n  /**\n   * @param shape desired output shape (must be half of the input size)\n   */\n  constructor(shape: number[]) {\n    this.outputShape = shape;\n\n    this.userCode = `\n    void main() {\n         // Takes max of indices (0, k), (1, k + 1), (2, k + 2) ...\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // The output size is half of the previous size.\n         // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _ (k=4),\n         // we only need to output the indices at positions |, the indices at\n         // positions _ can be thrown away, see Figure5(b) After Phase 2\n         // (Merge phase) in the Bitonic Top K paper referenced above.\n         // For example, the paper shows we only need to output the orange bars.\n         // The output sequence should look like this | | | | | | | |.\n         // Because the sequence is halved, to map the output index back\n         // to the previous sequence to find the corresponding value,\n         // we need to double the index. When we double the index,\n         // we basically interpolate a position, so 2i looks like\n         // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k position\n         // of each 2k positions by - elemIdx % k. E.g. for output at\n         // index 4,5,6,7, we want to get the corresponding element at\n         // original index 8,9,10,11, for output at index 8,9,10,11,\n         // we want to get the corresponding element at original index\n         // 16,17,18,19, so on and so forth.\n\n         int i = elemIdx < k ? elemIdx : (elemIdx * 2 - imod(elemIdx, k));\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + k : int(getIndices(batch, i + k));\n\n         float x0 = getX(batch, i0);\n         float x1 = i1 < n ? getX(batch, i1) : x0;\n\n         setOutput(x0 >= x1 ? float(i0) : float(i1));\n       }\n     `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, NumericDataType, TensorInfo, TopK, TopKAttrs, TopKInputs, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {topKImplCPU} from '../kernel_utils/shared';\nimport {MergeProgram, SwapProgram} from '../top_k_gpu';\nimport {fill} from './Fill';\nimport {gatherV2} from './GatherV2';\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\n\nfunction disposeIntermediateTensorInfoOrNull(\n    backend: MathBackendWebGL, tensorInfo: TensorInfo) {\n  if (tensorInfo !== null) {\n    backend.disposeIntermediateTensorInfo(tensorInfo);\n  }\n}\n\nfunction roundUpToPow2(num: number) {\n  let pow2 = 1;\n  while (pow2 < num) {\n    pow2 *= 2;\n  }\n  return pow2;\n}\n\n// Based on Algorithm 2 of Bitonic Top K, ref:\n// https://anilshanbhag.in/static/papers/gputopk_sigmod18.pdf\nexport function topK(\n    args: {inputs: TopKInputs, backend: MathBackendWebGL, attrs: TopKAttrs}):\n    TensorInfo[] {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {k, sorted} = attrs;\n\n  // Empirically determined constant used to determine last dim threshold for\n  // handing off execution to the CPU.\n  const TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD =\n      env().getNumber('TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD');\n\n  // Empirically determined constant used to determine k threshold for handing\n  // off execution to the CPU.\n  const TOPK_K_CPU_HANDOFF_THRESHOLD =\n      env().getNumber('TOPK_K_CPU_HANDOFF_THRESHOLD');\n\n  const xShape = x.shape;\n  const lastDim = xShape[xShape.length - 1];\n\n  if (backend.shouldExecuteOnCPU([x]) ||\n      lastDim < TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD ||\n      k > TOPK_K_CPU_HANDOFF_THRESHOLD) {\n    const xVals = backend.readSync(x.dataId) as TypedArray;\n    const [allTopKVals, allTopKIndices] =\n        topKImplCPU(xVals, xShape, x.dtype as NumericDataType, k, sorted);\n\n    return [\n      backend.makeTensorInfo(\n          allTopKVals.shape, allTopKVals.dtype, allTopKVals.values),\n      backend.makeTensorInfo(\n          allTopKIndices.shape, allTopKIndices.dtype, allTopKIndices.values)\n    ];\n  }\n\n  if (k === 0) {\n    xShape[xShape.length - 1] = 0;\n    return [\n      backend.makeTensorInfo(xShape, x.dtype, []),\n      backend.makeTensorInfo(xShape, 'int32', [])\n    ];\n  }\n\n  if (lastDim === 1 /* firstPass */) {\n    return [\n      x, fill({attrs: {shape: xShape, dtype: 'int32', value: 0}, backend})\n    ];\n  }\n\n  // Eagerly unpack x input since it is passed in to all the shaders which\n  // require unpacked inputs.\n  const xtexData = backend.texData.get(x.dataId);\n  const xIsPacked = xtexData !== null && xtexData.isPacked;\n  const xUnPacked = xIsPacked ? backend.unpackTensor(x) : x;\n\n  // Reshape into a 2d tensor [batch, lastDim] and compute topk along lastDim.\n  const xSize = util.sizeFromShape(xShape);\n  const batch = xSize / lastDim;\n  const x2D = reshape(\n      {inputs: {x: xUnPacked}, attrs: {shape: [batch, lastDim]}, backend});\n\n  if (xIsPacked) {\n    disposeIntermediateTensorInfoOrNull(backend, xUnPacked);\n  }\n\n  const kPow2 = roundUpToPow2(k);\n  const lastDimPow2 = roundUpToPow2(lastDim);\n\n  // Only the indices containing the top K are kept at every step to reduce\n  // number of outputs in the GPU algorithms, so once the final set of indices\n  // is computed then gather is used to grab the corresponding values\n  // from the original input.\n  let indices: TensorInfo = null;\n\n  // GPU algorithm always takes in an indices input but this input is not used\n  // on the first run of a GPU algorithm, therefore if indices is null we simply\n  // pass in x2D instead of it but the value will not actually be used\n  const getInputs = () => indices === null ? [x2D, x2D] : [x2D, indices];\n\n  const runSwap = (dir: number, inc: number, shape: number[]) => {\n    const inputs = getInputs();\n    const program = new SwapProgram(shape);\n    const fistPass = indices === null ? 1 : 0;\n    const customValues =\n        [[lastDim], [fistPass], [Number.NEGATIVE_INFINITY], [dir], [inc]];\n    const prevIndices = indices;\n    indices = backend.runWebGLProgram(program, inputs, 'int32', customValues);\n    disposeIntermediateTensorInfoOrNull(backend, prevIndices);\n  };\n\n  // Step 1: local sort\n  for (let len = 1; len < kPow2; len *= 2) {\n    const dir = len * 2;\n    for (let inc = len; inc >= 1; inc /= 2) {\n      runSwap(dir, inc, [batch, lastDimPow2]);\n    }\n  }\n\n  // Step 2: merge\n  for (let indicesSize = lastDimPow2; indicesSize > kPow2; indicesSize /= 2) {\n    const inputs = getInputs();\n    const mergeProgram = new MergeProgram([batch, indicesSize / 2]);\n    const firstPass = indices === null ? 1 : 0;\n    const customValues = [[lastDim], [firstPass], [kPow2]];\n    const prevIndices = indices;\n    indices =\n        backend.runWebGLProgram(mergeProgram, inputs, 'int32', customValues);\n    disposeIntermediateTensorInfoOrNull(backend, prevIndices);\n\n    // Step 3: rebuild\n    const len = kPow2 / 2;\n    const dir = len * 2;\n    for (let inc = len; inc >= 1; inc /= 2) {\n      runSwap(dir, inc, indices.shape);\n    }\n  }\n\n  // Keep only the requested top K results instead of kPow2\n  let prevIndices = indices;\n  indices = slice(\n      {inputs: {x: indices}, backend, attrs: {begin: 0, size: [batch, k]}});\n  disposeIntermediateTensorInfoOrNull(backend, prevIndices);\n\n  // Gather values on last dimension\n  let values = gatherV2(\n      {inputs: {x: x2D, indices}, backend, attrs: {axis: 1, batchDims: 1}});\n  disposeIntermediateTensorInfoOrNull(backend, x2D);\n\n  // Reshape back to the original input shape, except that the last\n  // dimension is k.\n  const newShape = xShape.slice(0, -1);\n  newShape.push(k);\n\n  prevIndices = indices;\n  indices = reshape({inputs: {x: indices}, attrs: {shape: newShape}, backend});\n  disposeIntermediateTensorInfoOrNull(backend, prevIndices);\n\n  const prevValues = values;\n  values = reshape({inputs: {x: values}, attrs: {shape: newShape}, backend});\n  disposeIntermediateTensorInfoOrNull(backend, prevValues);\n\n  return [values, indices];\n}\n\nexport const topKConfig: KernelConfig = {\n  kernelName: TopK,\n  backendName: 'webgl',\n  kernelFunc: topK as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class TransformProgram implements GPGPUProgram {\n  variableNames = ['Image', 'Transforms'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      imageHeight: number, imageWidth: number,\n      interpolation: 'nearest'|'bilinear',\n      fillMode: 'constant'|'reflect'|'wrap'|'nearest', fillValue: number,\n      outShape: [number, number, number, number]) {\n    this.outputShape = outShape;\n    const interpolationModeId = interpolation === 'nearest' ? 1 : 2;\n    let fillModeId;\n    switch (fillMode) {\n      case 'constant':\n        fillModeId = 1;\n        break;\n      case 'reflect':\n        fillModeId = 2;\n        break;\n      case 'wrap':\n        fillModeId = 3;\n        break;\n      case 'nearest':\n        fillModeId = 4;\n        break;\n      default:\n        fillModeId = 1;\n        break;\n    }\n    this.userCode = `\n            float mapCoord(float outCoord, float len) {\n              float inCoord = outCoord;\n              if(${fillModeId} == 2) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    if (inCoord < sz2) {\n                      inCoord = sz2 * float(int(float(-inCoord / sz2))) +\n                      inCoord;\n                    }\n                    inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1.0;\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    inCoord -= sz2 * float(int(float(inCoord / sz2)));\n                    if (inCoord >= len) {\n                      inCoord = sz2 - inCoord - 1.0;\n                    }\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${fillModeId} == 3) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord += len * (float(int(float(-inCoord / sz))) + 1.0);\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord -= len * float(int(float(inCoord / sz)));\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${fillModeId} == 4) {\n                return clamp(outCoord, 0.0, len - 1.0);\n              } else {\n                return outCoord;\n              }\n            }\n\n            float readWithFillValue(int batch, int coordY, int coordX,\n              int channel) {\n              float outputValue;\n              if (0 <= coordY && coordY < ${\n        imageHeight} && 0 <= coordX && coordX < ${imageWidth}) {\n                  outputValue = getImage(batch, coordY, coordX, channel);\n              } else {\n                outputValue = float(${fillValue});\n              }\n              return outputValue;\n            }\n\n            void main() {\n              ivec4 coords = getOutputCoords();\n              float outputValue;\n              int batch = coords[0];\n              int x = coords[2];\n              int y = coords[1];\n              int channel = coords[3];\n              float xf = float(x);\n              float yf = float(y);\n              float a1 = getTransforms(batch, 0);\n              float a2 = getTransforms(batch, 1);\n              float a3 = getTransforms(batch, 2);\n              float b1 = getTransforms(batch, 3);\n              float b2 = getTransforms(batch, 4);\n              float b3 = getTransforms(batch, 5);\n              float c1 = getTransforms(batch, 6);\n              float c2 = getTransforms(batch, 7);\n              float projection = c1 * xf + c2 * yf + 1.0;\n              if (projection == 0.0) {\n                outputValue = float(${fillValue});\n              } else {\n                float inX = (a1 * xf + a2 * yf + a3) / projection;\n                float inY = (b1 * xf + b2 * yf + b3) / projection;\n                float mapX = mapCoord(inX, float(${imageWidth}));\n                float mapY = mapCoord(inY, float(${imageHeight}));\n\n                if (${interpolationModeId} == 1) {\n                  int coordY = int(round(mapY));\n                  int coordX = int(round(mapX));\n                  outputValue = readWithFillValue(batch, coordY, coordX,\n                    channel);\n                } else {\n                  float yFloor = floor(mapY);\n                  float xFloor = floor(mapX);\n                  float yCeil = yFloor + 1.0;\n                  float xCeil = xFloor + 1.0;\n                  float valueYFloor = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yFloor), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yFloor), int(xCeil), channel);\n                  float valueYCeil = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yCeil), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yCeil), int(xCeil), channel);\n                  outputValue = (yCeil - mapY) * valueYFloor +\n                  (mapY - yFloor) * valueYCeil;\n                }\n              }\n              setOutput(outputValue);\n            }\n        `;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Transform, TransformAttrs, TransformInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {TransformProgram} from '../transform_gpu';\n\nexport function transform(args: {\n  inputs: TransformInputs,\n  backend: MathBackendWebGL,\n  attrs: TransformAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {image, transforms} = inputs;\n  const {interpolation, fillMode, fillValue, outputShape} = attrs;\n\n  const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n  const [outHeight, outWidth] =\n      outputShape != null ? outputShape : [imageHeight, imageWidth];\n  const outShape =\n      [batch, outHeight, outWidth,\n       numChannels] as [number, number, number, number];\n\n  const program = new TransformProgram(\n      imageHeight, imageWidth, interpolation, fillMode, fillValue, outShape);\n  return backend.runWebGLProgram(program, [image, transforms], 'float32');\n}\n\nexport const transformConfig: KernelConfig = {\n  kernelName: Transform,\n  backendName: 'webgl',\n  kernelFunc: transform as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Unique, UniqueAttrs, UniqueInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {uniqueImplCPU} from '../kernel_utils/shared';\nimport {assertNotComplex} from '../webgl_util';\n\nexport function unique(\n    args:\n        {inputs: UniqueInputs, attrs: UniqueAttrs, backend: MathBackendWebGL}):\n    TensorInfo[] {\n  const {inputs, attrs, backend} = args;\n  const {axis} = attrs;\n  const {x} = inputs;\n  assertNotComplex(x, 'unique');\n\n  // For now, always forward calculation to the CPU backend.\n  console.warn(\n      'WARNING: ',\n      'UI might be locked temporarily as data is being downloaded');\n  const values = backend.readSync(x.dataId);\n  const {outputValues, outputShape, indices} =\n      uniqueImplCPU(values, axis, x.shape, x.dtype);\n  return [\n    backend.makeTensorInfo(outputShape, x.dtype, outputValues),\n    backend.makeTensorInfo([indices.length], 'int32', indices),\n  ];\n}\n\nexport const uniqueConfig: KernelConfig = {\n  kernelName: Unique,\n  backendName: 'webgl',\n  kernelFunc: unique as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Unpack, UnpackAttrs, UnpackInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\n\nexport function unpack(\n    args:\n        {inputs: UnpackInputs, backend: MathBackendWebGL, attrs: UnpackAttrs}):\n    TensorInfo[] {\n  const {inputs, backend, attrs} = args;\n  const {value} = inputs;\n  let {axis} = attrs;\n\n  if (axis < 0) {\n    axis += value.shape.length;\n  }\n\n  const x = value;\n  const xRank = x.shape.length;\n\n  const num = value.shape[axis];\n  const outShape: number[] = new Array(xRank - 1);\n  let outIndex = 0;\n  for (let i = 0; i < xRank; i++) {\n    if (i !== axis) {\n      outShape[outIndex++] = x.shape[i];\n    }\n  }\n\n  const toDispose = [];\n\n  const begin = new Array(xRank).fill(0);\n  const size = x.shape.slice();\n  size[axis] = 1;\n  const res: TensorInfo[] = new Array(num);\n  for (let i = 0; i < res.length; i++) {\n    begin[axis] = i;\n    const sliced = slice({inputs: {x}, backend, attrs: {begin, size}});\n    const reshaped =\n        reshape({inputs: {x: sliced}, backend, attrs: {shape: outShape}});\n    res[i] = reshaped;\n\n    toDispose.push(sliced);\n  }\n\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n  return res;\n}\n\nexport const unpackConfig: KernelConfig = {\n  kernelName: Unpack,\n  backendName: 'webgl',\n  kernelFunc: unpack as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class SegmentOpProgram implements GPGPUProgram {\n  variableNames = ['x', 'segmentIds'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      segOpInfo: backend_util.segment_util.SegOpInfo,\n      segOpType: 'unsortedSegmentSum') {\n    const windowSize = segOpInfo.windowSize;\n    const batchSize = segOpInfo.batchSize;\n    const inSize = segOpInfo.inSize;\n    const numSegments = segOpInfo.numSegments;\n    const outSize = numSegments * Math.ceil(inSize / windowSize);\n    this.outputShape = [batchSize, outSize];\n\n    const initializationValue = '0.0';\n    const returnValue = `sumValue`;\n\n    const windowSizeNearestVec4 = Math.floor(windowSize / 4) * 4;\n    const windowSizeVec4Remainder = windowSize % 4;\n\n    const updateSnippet = `\n        sumValue += dot(values, segFilter);\n    `;\n\n    let checkValueOutOfBounds = '';\n    if (inSize % windowSize > 0) {\n      checkValueOutOfBounds = `\n        if (inIdx < 0 || inIdx >= ${inSize}) {\n          return initializationValue;\n        }\n      `;\n    }\n\n    let checkSegmentIdOutOfBounds = '';\n    if (inSize % windowSize > 0) {\n      checkSegmentIdOutOfBounds = `\n        if (inIdx < 0 || inIdx >= ${inSize}) {\n          return -1.0;\n        }\n      `;\n    }\n\n    this.userCode = `\n      const float initializationValue = ${initializationValue};\n\n      float getValue(int batch, int inIdx) {\n        ${checkValueOutOfBounds}\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        ${checkSegmentIdOutOfBounds}\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          ${numSegments})) * float(${windowSize}));\n        int currentSeg = int(mod(float(outIdx), float(${numSegments})));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${windowSizeNearestVec4}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          ${updateSnippet}\n        }\n\n        int inIdx = inOffset + ${windowSizeNearestVec4};\n        if (${windowSizeVec4Remainder === 1}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 2}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 3}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          ${updateSnippet}\n        }\n        setOutput(${returnValue});\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, KernelConfig, KernelFunc, sumOutType, TensorInfo, UnsortedSegmentSum, UnsortedSegmentSumAttrs, UnsortedSegmentSumInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {SegmentOpProgram} from '../segment_gpu';\n\nimport {range} from './Range';\nimport {reshape} from './Reshape';\nimport {tile} from './Tile';\nimport {transpose} from './Transpose';\n\nexport function unsortedSegmentSum(args: {\n  inputs: UnsortedSegmentSumInputs,\n  backend: MathBackendWebGL,\n  attrs: UnsortedSegmentSumAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, segmentIds} = inputs;\n  const {numSegments} = attrs;\n\n  const xRank = x.shape.length;\n\n  const toDispose = [];\n\n  let axis = 0;\n  const permutation = backend_util.getAxesPermutation([axis], xRank);\n  let permutedX = x;\n  if (permutation != null) {\n    permutedX = transpose({inputs: {x}, backend, attrs: {perm: permutation}});\n    toDispose.push(permutedX);\n    axis = backend_util.getInnerMostAxes(1, xRank)[0];\n  }\n\n  const outShape = backend_util.segment_util.computeOutShape(\n      permutedX.shape, axis, numSegments);\n  const inSize = util.sizeFromShape([permutedX.shape[axis]]);\n  const a2D =\n      reshape({inputs: {x: permutedX}, backend, attrs: {shape: [-1, inSize]}});\n  toDispose.push(a2D);\n\n  const outputDType = sumOutType(x.dtype);\n\n  const segOpCompute =\n      (x: TensorInfo, segOpType: 'unsortedSegmentSum', segmentIds: TensorInfo,\n       dtype: DataType, numSegments: number): TensorInfo => {\n        const batchSize = x.shape[0];\n        const inSize = x.shape[1];\n        const windowSize =\n            backend_util.segment_util.segOpComputeOptimalWindowSize(\n                inSize, numSegments);\n        const segOpInfo = {windowSize, inSize, batchSize, numSegments};\n        const program = new SegmentOpProgram(segOpInfo, segOpType);\n        const output = backend.compileAndRun(program, [x, segmentIds], dtype);\n        toDispose.push(output);\n        // No need to run another GPGPU program.\n        if (output.shape[1] === numSegments) {\n          return output;\n        }\n        const rangeInfo = range({\n          backend,\n          attrs: {start: 0, stop: numSegments, step: 1, dtype: 'float32'}\n        });\n        const tileInfo = tile({\n          inputs: {x: rangeInfo},\n          backend,\n          attrs: {reps: [inSize / windowSize]}\n        });\n\n        toDispose.push(rangeInfo);\n        toDispose.push(tileInfo);\n\n        const result =\n            segOpCompute(output, segOpType, tileInfo, dtype, numSegments);\n        return result;\n      };\n\n  const segOpResult = segOpCompute(\n      a2D, 'unsortedSegmentSum', segmentIds, outputDType, numSegments);\n\n  const reshaped =\n      reshape({inputs: {x: segOpResult}, backend, attrs: {shape: outShape}});\n\n  let result = reshaped;\n  if (permutation != null) {\n    toDispose.push(reshaped);\n    const perm = backend_util.getUndoAxesPermutation(permutation);\n    result = transpose({inputs: {x: result}, backend, attrs: {perm}});\n  }\n\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n  return result;\n}\n\nexport const unsortedSegmentSumConfig: KernelConfig = {\n  kernelName: UnsortedSegmentSum,\n  backendName: 'webgl',\n  kernelFunc: unsortedSegmentSum as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {KernelConfig, registerKernel} from '@tensorflow/tfjs-core';\n\nimport {_fusedMatMulConfig} from './kernels/_FusedMatMul';\nimport {absConfig} from './kernels/Abs';\nimport {acosConfig} from './kernels/Acos';\nimport {acoshConfig} from './kernels/Acosh';\nimport {addConfig} from './kernels/Add';\nimport {addNConfig} from './kernels/AddN';\nimport {allConfig} from './kernels/All';\nimport {anyConfig} from './kernels/Any';\nimport {argMaxConfig} from './kernels/ArgMax';\nimport {argMinConfig} from './kernels/ArgMin';\nimport {asinConfig} from './kernels/Asin';\nimport {asinhConfig} from './kernels/Asinh';\nimport {atanConfig} from './kernels/Atan';\nimport {atan2Config} from './kernels/Atan2';\nimport {atanhConfig} from './kernels/Atanh';\nimport {avgPoolConfig} from './kernels/AvgPool';\nimport {avgPool3DConfig} from './kernels/AvgPool3D';\nimport {avgPool3DGradConfig} from './kernels/AvgPool3DGrad';\nimport {avgPoolGradConfig} from './kernels/AvgPoolGrad';\nimport {batchMatMulConfig} from './kernels/BatchMatMul';\nimport {batchNormConfig} from './kernels/BatchNorm';\nimport {batchToSpaceNDConfig} from './kernels/BatchToSpaceND';\nimport {bincountConfig} from './kernels/Bincount';\nimport {broadcastArgsConfig} from './kernels/BroadcastArgs';\nimport {castConfig} from './kernels/Cast';\nimport {ceilConfig} from './kernels/Ceil';\nimport {clipByValueConfig} from './kernels/ClipByValue';\nimport {complexConfig} from './kernels/Complex';\nimport {complexAbsConfig} from './kernels/ComplexAbs';\nimport {concatConfig} from './kernels/Concat';\nimport {conv2DConfig} from './kernels/Conv2D';\nimport {conv2DBackpropFilterConfig} from './kernels/Conv2DBackpropFilter';\nimport {conv2DBackpropInputConfig} from './kernels/Conv2DBackpropInput';\nimport {conv3DConfig} from './kernels/Conv3D';\nimport {conv3DBackpropFilterV2Config} from './kernels/Conv3DBackpropFilterV2';\nimport {conv3DBackpropInputConfig} from './kernels/Conv3DBackpropInputV2';\nimport {cosConfig} from './kernels/Cos';\nimport {coshConfig} from './kernels/Cosh';\nimport {cropAndResizeConfig} from './kernels/CropAndResize';\nimport {cumprodConfig} from './kernels/Cumprod';\nimport {cumsumConfig} from './kernels/Cumsum';\nimport {denseBincountConfig} from './kernels/DenseBincount';\nimport {depthToSpaceConfig} from './kernels/DepthToSpace';\nimport {depthwiseConv2dNativeConfig} from './kernels/DepthwiseConv2dNative';\nimport {depthwiseConv2dNativeBackpropFilterConfig} from './kernels/DepthwiseConv2dNativeBackpropFilter';\nimport {depthwiseConv2dNativeBackpropInputConfig} from './kernels/DepthwiseConv2dNativeBackpropInput';\nimport {diagConfig} from './kernels/Diag';\nimport {dilation2DConfig} from './kernels/Dilation2D';\nimport {einsumConfig} from './kernels/Einsum';\nimport {eluConfig} from './kernels/Elu';\nimport {eluGradConfig} from './kernels/EluGrad';\nimport {equalConfig} from './kernels/Equal';\nimport {erfConfig} from './kernels/Erf';\nimport {expConfig} from './kernels/Exp';\nimport {expandDimsConfig} from './kernels/ExpandDims';\nimport {expm1Config} from './kernels/Expm1';\nimport {fftConfig} from './kernels/FFT';\nimport {fillConfig} from './kernels/Fill';\nimport {flipLeftRightConfig} from './kernels/FlipLeftRight';\nimport {floorConfig} from './kernels/Floor';\nimport {floorDivConfig} from './kernels/FloorDiv';\nimport {fromPixelsConfig} from './kernels/FromPixels';\nimport {fusedConv2DConfig} from './kernels/FusedConv2D';\nimport {fusedDepthwiseConv2DConfig} from './kernels/FusedDepthwiseConv2D';\nimport {gatherNdConfig} from './kernels/GatherNd';\nimport {gatherV2Config} from './kernels/GatherV2';\nimport {greaterConfig} from './kernels/Greater';\nimport {greaterEqualConfig} from './kernels/GreaterEqual';\nimport {identityConfig} from './kernels/Identity';\nimport {ifftConfig} from './kernels/IFFT';\nimport {imagConfig} from './kernels/Imag';\nimport {isFiniteConfig} from './kernels/IsFinite';\nimport {isInfConfig} from './kernels/IsInf';\nimport {isNaNConfig} from './kernels/IsNaN';\nimport {leakyReluConfig} from './kernels/LeakyRelu';\nimport {lessConfig} from './kernels/Less';\nimport {lessEqualConfig} from './kernels/LessEqual';\nimport {linSpaceConfig} from './kernels/LinSpace';\nimport {logConfig} from './kernels/Log';\nimport {log1pConfig} from './kernels/Log1p';\nimport {logicalAndConfig} from './kernels/LogicalAnd';\nimport {logicalNotConfig} from './kernels/LogicalNot';\nimport {logicalOrConfig} from './kernels/LogicalOr';\nimport {LRNConfig} from './kernels/LRN';\nimport {LRNGradConfig} from './kernels/LRNGrad';\nimport {maxConfig} from './kernels/Max';\nimport {maximumConfig} from './kernels/Maximum';\nimport {maxPoolConfig} from './kernels/MaxPool';\nimport {maxPool3DConfig} from './kernels/MaxPool3D';\nimport {maxPool3DGradConfig} from './kernels/MaxPool3DGrad';\nimport {maxPoolGradConfig} from './kernels/MaxPoolGrad';\nimport {maxPoolWithArgmaxConfig} from './kernels/MaxPoolWithArgmax';\nimport {meanConfig} from './kernels/Mean';\nimport {minConfig} from './kernels/Min';\nimport {minimumConfig} from './kernels/Minimum';\nimport {mirrorPadConfig} from './kernels/MirrorPad';\nimport {modConfig} from './kernels/Mod';\nimport {multinomialConfig} from './kernels/Multinomial';\nimport {multiplyConfig} from './kernels/Multiply';\nimport {negConfig} from './kernels/Neg';\nimport {nonMaxSuppressionV3Config} from './kernels/NonMaxSuppressionV3';\nimport {nonMaxSuppressionV4Config} from './kernels/NonMaxSuppressionV4';\nimport {nonMaxSuppressionV5Config} from './kernels/NonMaxSuppressionV5';\nimport {notEqualConfig} from './kernels/NotEqual';\nimport {oneHotConfig} from './kernels/OneHot';\nimport {onesLikeConfig} from './kernels/OnesLike';\nimport {packConfig} from './kernels/Pack';\nimport {padV2Config} from './kernels/PadV2';\nimport {powConfig} from './kernels/Pow';\nimport {preluConfig} from './kernels/Prelu';\nimport {prodConfig} from './kernels/Prod';\nimport {raggedGatherConfig} from './kernels/RaggedGather';\nimport {raggedRangeConfig} from './kernels/RaggedRange';\nimport {raggedTensorToTensorConfig} from './kernels/RaggedTensorToTensor';\nimport {rangeConfig} from './kernels/Range';\nimport {realConfig} from './kernels/Real';\nimport {realDivConfig} from './kernels/RealDiv';\nimport {reciprocalConfig} from './kernels/Reciprocal';\nimport {reluConfig} from './kernels/Relu';\nimport {relu6Config} from './kernels/Relu6';\nimport {reshapeConfig} from './kernels/Reshape';\nimport {resizeBilinearConfig} from './kernels/ResizeBilinear';\nimport {resizeBilinearGradConfig} from './kernels/ResizeBilinearGrad';\nimport {resizeNearestNeighborConfig} from './kernels/ResizeNearestNeighbor';\nimport {resizeNearestNeighborGradConfig} from './kernels/ResizeNearestNeighborGrad';\nimport {reverseConfig} from './kernels/Reverse';\nimport {rotateWithOffsetConfig} from './kernels/RotateWithOffset';\nimport {roundConfig} from './kernels/Round';\nimport {rsqrtConfig} from './kernels/Rsqrt';\nimport {scatterNdConfig} from './kernels/ScatterNd';\nimport {searchSortedConfig} from './kernels/SearchSorted';\nimport {selectConfig} from './kernels/Select';\nimport {seluConfig} from './kernels/Selu';\nimport {sigmoidConfig} from './kernels/Sigmoid';\nimport {signConfig} from './kernels/Sign';\nimport {sinConfig} from './kernels/Sin';\nimport {sinhConfig} from './kernels/Sinh';\nimport {sliceConfig} from './kernels/Slice';\nimport {softmaxConfig} from './kernels/Softmax';\nimport {softplusConfig} from './kernels/Softplus';\nimport {spaceToBatchNDConfig} from './kernels/SpaceToBatchND';\nimport {sparseFillEmptyRowsConfig} from './kernels/SparseFillEmptyRows';\nimport {sparseReshapeConfig} from './kernels/SparseReshape';\nimport {sparseSegmentMeanConfig} from './kernels/SparseSegmentMean';\nimport {sparseSegmentSumConfig} from './kernels/SparseSegmentSum';\nimport {sparseToDenseConfig} from './kernels/SparseToDense';\nimport {splitVConfig} from './kernels/SplitV';\nimport {sqrtConfig} from './kernels/Sqrt';\nimport {squareConfig} from './kernels/Square';\nimport {squaredDifferenceConfig} from './kernels/SquaredDifference';\nimport {staticRegexReplaceConfig} from './kernels/StaticRegexReplace';\nimport {stepConfig} from './kernels/Step';\nimport {stridedSliceConfig} from './kernels/StridedSlice';\nimport {stringNGramsConfig} from './kernels/StringNGrams';\nimport {stringSplitConfig} from './kernels/StringSplit';\nimport {stringToHashBucketFastConfig} from './kernels/StringToHashBucketFast';\nimport {subConfig} from './kernels/Sub';\nimport {sumConfig} from './kernels/Sum';\nimport {tanConfig} from './kernels/Tan';\nimport {tanhConfig} from './kernels/Tanh';\nimport {tensorScatterUpdateConfig} from './kernels/TensorScatterUpdate';\nimport {tileConfig} from './kernels/Tile';\nimport {topKConfig} from './kernels/TopK';\nimport {transformConfig} from './kernels/Transform';\nimport {transposeConfig} from './kernels/Transpose';\nimport {uniqueConfig} from './kernels/Unique';\nimport {unpackConfig} from './kernels/Unpack';\nimport {unsortedSegmentSumConfig} from './kernels/UnsortedSegmentSum';\nimport {zerosLikeConfig} from './kernels/ZerosLike';\n\n// List all kernel configs here\nconst kernelConfigs: KernelConfig[] = [\n  _fusedMatMulConfig,\n  absConfig,\n  acosConfig,\n  acoshConfig,\n  addConfig,\n  addNConfig,\n  allConfig,\n  anyConfig,\n  argMaxConfig,\n  argMinConfig,\n  asinConfig,\n  asinhConfig,\n  atanConfig,\n  atan2Config,\n  atanhConfig,\n  avgPoolConfig,\n  avgPool3DConfig,\n  avgPool3DGradConfig,\n  avgPoolGradConfig,\n  batchMatMulConfig,\n  batchNormConfig,\n  batchToSpaceNDConfig,\n  bincountConfig,\n  broadcastArgsConfig,\n  castConfig,\n  ceilConfig,\n  clipByValueConfig,\n  complexConfig,\n  complexAbsConfig,\n  concatConfig,\n  conv2DConfig,\n  conv2DBackpropFilterConfig,\n  conv2DBackpropInputConfig,\n  conv3DConfig,\n  conv3DBackpropFilterV2Config,\n  conv3DBackpropInputConfig,\n  cosConfig,\n  coshConfig,\n  cropAndResizeConfig,\n  cumprodConfig,\n  cumsumConfig,\n  denseBincountConfig,\n  depthToSpaceConfig,\n  depthwiseConv2dNativeConfig,\n  depthwiseConv2dNativeBackpropFilterConfig,\n  depthwiseConv2dNativeBackpropInputConfig,\n  diagConfig,\n  dilation2DConfig,\n  einsumConfig,\n  eluConfig,\n  eluGradConfig,\n  equalConfig,\n  erfConfig,\n  expConfig,\n  expandDimsConfig,\n  expm1Config,\n  fftConfig,\n  fillConfig,\n  flipLeftRightConfig,\n  floorConfig,\n  floorDivConfig,\n  fromPixelsConfig,\n  fusedConv2DConfig,\n  fusedDepthwiseConv2DConfig,\n  gatherNdConfig,\n  gatherV2Config,\n  greaterConfig,\n  greaterEqualConfig,\n  identityConfig,\n  ifftConfig,\n  imagConfig,\n  isFiniteConfig,\n  isInfConfig,\n  isNaNConfig,\n  leakyReluConfig,\n  lessConfig,\n  lessEqualConfig,\n  linSpaceConfig,\n  logConfig,\n  log1pConfig,\n  logicalAndConfig,\n  logicalNotConfig,\n  logicalOrConfig,\n  LRNConfig,\n  LRNGradConfig,\n  maxConfig,\n  maximumConfig,\n  maxPoolConfig,\n  maxPool3DConfig,\n  maxPool3DGradConfig,\n  maxPoolGradConfig,\n  maxPoolWithArgmaxConfig,\n  meanConfig,\n  minConfig,\n  minimumConfig,\n  mirrorPadConfig,\n  modConfig,\n  multinomialConfig,\n  multiplyConfig,\n  negConfig,\n  nonMaxSuppressionV3Config,\n  nonMaxSuppressionV4Config,\n  nonMaxSuppressionV5Config,\n  notEqualConfig,\n  oneHotConfig,\n  onesLikeConfig,\n  packConfig,\n  padV2Config,\n  powConfig,\n  preluConfig,\n  prodConfig,\n  raggedGatherConfig,\n  raggedRangeConfig,\n  raggedTensorToTensorConfig,\n  rangeConfig,\n  realConfig,\n  realDivConfig,\n  reciprocalConfig,\n  reluConfig,\n  relu6Config,\n  reshapeConfig,\n  resizeBilinearConfig,\n  resizeBilinearGradConfig,\n  resizeNearestNeighborConfig,\n  resizeNearestNeighborGradConfig,\n  reverseConfig,\n  rotateWithOffsetConfig,\n  roundConfig,\n  rsqrtConfig,\n  scatterNdConfig,\n  searchSortedConfig,\n  selectConfig,\n  seluConfig,\n  sigmoidConfig,\n  signConfig,\n  sinConfig,\n  sinhConfig,\n  sliceConfig,\n  softmaxConfig,\n  softplusConfig,\n  spaceToBatchNDConfig,\n  sparseFillEmptyRowsConfig,\n  sparseReshapeConfig,\n  sparseSegmentMeanConfig,\n  sparseSegmentSumConfig,\n  sparseToDenseConfig,\n  splitVConfig,\n  sqrtConfig,\n  squareConfig,\n  squaredDifferenceConfig,\n  staticRegexReplaceConfig,\n  stepConfig,\n  stridedSliceConfig,\n  stringNGramsConfig,\n  stringSplitConfig,\n  stringToHashBucketFastConfig,\n  subConfig,\n  sumConfig,\n  tanConfig,\n  tanhConfig,\n  tensorScatterUpdateConfig,\n  tileConfig,\n  topKConfig,\n  transformConfig,\n  transposeConfig,\n  uniqueConfig,\n  unpackConfig,\n  unsortedSegmentSumConfig,\n  zerosLikeConfig\n];\n\nfor (const kernelConfig of kernelConfigs) {\n  registerKernel(kernelConfig);\n}\n","/** @license See the LICENSE file. */\n\n// This code is auto-generated, do not modify this file!\nconst version = '4.4.0';\nexport {version};\n"],"names":["contexts","WEBGL_ATTRIBUTES","alpha","antialias","premultipliedAlpha","preserveDrawingBuffer","depth","stencil","failIfMajorPerformanceCaveat","setWebGLContext","webGLVersion","gl","getWebGLContext","customCanvas","newCtx","Error","canvas","env","getBool","OffscreenCanvas","document","createElement","createCanvas","addEventListener","ev","preventDefault","getContext","getWebGLRenderingContext","console","log","isContextLost","disable","DEPTH_TEST","STENCIL_TEST","BLEND","DITHER","POLYGON_OFFSET_FILL","SAMPLE_COVERAGE","enable","SCISSOR_TEST","CULL_FACE","cullFace","BACK","PackingScheme","TextureUsage","PhysicalTextureType","getUnpackedMatrixTextureShapeWidthHeight","rows","columns","getDenseTexShape","shape","size","util","sizeFromShape","texelsNeeded","Math","ceil","sizeToSquarishShape","getPackedMatrixTextureShapeWidthHeight","max","getTextureConfig","textureHalfFloatExtension","glany","internalFormatFloat","internalFormatHalfFloat","internalFormatPackedHalfFloat","internalFormatPackedFloat","textureFormatFloat","downloadTextureFormat","downloadUnpackNumChannels","defaultNumChannels","textureTypeHalfFloat","textureTypeFloat","getNumber","R32F","R16F","RGBA16F","RGBA32F","RED","HALF_FLOAT","FLOAT","RGBA8","RGBA","HALF_FLOAT_OES","callAndCheck","func","returnValue","error","getError","NO_ERROR","getWebGLErrorMessage","checkWebGLError","canBeRepresented","num","abs","status","INVALID_ENUM","INVALID_VALUE","INVALID_OPERATION","INVALID_FRAMEBUFFER_OPERATION","OUT_OF_MEMORY","CONTEXT_LOST_WEBGL","getExtensionOrThrow","extensionName","throwIfNull","getExtension","createVertexShader","vertexShaderSource","vertexShader","createShader","VERTEX_SHADER","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","createFragmentShader","fragmentShaderSource","fragmentShader","FRAGMENT_SHADER","get","logShaderSourceAndInfoLog","lineNumberRegex","shaderInfoLog","lineNumberRegexResult","exec","lineNumber","shaderLines","split","pad","length","toString","linesWithLineNumbers","map","line","rightPad","maxLineLength","i","beforeErrorLines","slice","errorLine","afterErrorLines","join","createProgram","linkProgram","program","getProgramParameter","LINK_STATUS","getProgramInfoLog","validateProgram","VALIDATE_STATUS","createStaticVertexBuffer","data","buffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","createStaticIndexBuffer","ELEMENT_ARRAY_BUFFER","createTexture","validateTextureSize","width","height","maxTextureSize","createFramebuffer","bindVertexBufferToProgramAttribute","attribute","arrayEntriesPerItem","itemStrideInBytes","itemOffsetInBytes","loc","getAttribLocation","vertexAttribPointer","enableVertexAttribArray","bindTextureUnit","texture","textureUnit","validateTextureUnit","activeTexture","TEXTURE0","bindTexture","TEXTURE_2D","getProgramUniformLocationOrThrow","uniformName","getUniformLocation","getProgramUniformLocation","bindTextureToProgramUniformSampler","uniformSamplerLocation","uniform1i","bindColorTextureToFramebuffer","framebuffer","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","unbindColorTextureFromFramebuffer","validateFramebuffer","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","getFramebufferErrorMessage","FRAMEBUFFER_INCOMPLETE_ATTACHMENT","FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT","FRAMEBUFFER_INCOMPLETE_DIMENSIONS","FRAMEBUFFER_UNSUPPORTED","returnTOrNull","failureMessage","tOrNull","maxTextureUnit","MAX_COMBINED_TEXTURE_IMAGE_UNITS","glTextureUnit","getBatchDim","dimsToSkip","getRowsCols","getShapeAs3D","shapeAs3D","getTextureShapeFromLogicalShape","logShape","isPacked","maxTexSize","maxSizeForNarrowTex","Infinity","d","nearestLargerEven","squeezeResult","squeezeShape","newShape","textureShape","isLongNarrowTex","min","batchDim","cols","isEven","n","isReshapeFree","shape1","shape2","arraysEqual","shape1Cols","shape2Cols","MAX_TEXTURE_SIZE","MAX_TEXTURES_IN_SHADER","getWebGLMaxTextureSize","getParameter","getMaxTexturesInShader","MAX_TEXTURE_IMAGE_UNITS","getWebGLDisjointQueryTimerVersion","queryTimerVersion","hasExtension","isWebGLVersionEnabled","e","isCapableOfRenderingToFloatTexture","createFloatTextureAndBindToFramebuffer","isDownloadFloatTextureEnabled","COLOR_BUFFER_HALF_FLOAT","texConfig","texImage2D","frameBuffer","isFrameBufferComplete","deleteTexture","deleteFramebuffer","createHalfFloatTextureAndBindToFramebuffer","isWebGLFenceEnabled","fenceSync","assertNotComplex","tensor","opName","Array","isArray","forEach","t","assert","dtype","viewport","scissor","ENV","getGlslDifferences","version","varyingVs","varyingFs","texture2D","output","defineOutput","defineSpecialNaN","defineSpecialInf","defineRound","getLogicalCoordinatesFromFlatIndex","coords","index","strides","computeStrides","stride","getOutputLogicalCoordinatesFromFlatIndexByUniform","_","getLogicalCoordinatesFromFlatIndexByUniform","variableName","indicesArr","numCoords","symbolicallyComputeStrides","getFlatIndexFrom3D","registerFlag","device_util","isMobile","threshold","ENCODE_FLOAT_SNIPPET","getBroadcastDims","backend_util","makeShader","inputsInfo","outputShape","prefixSnippets","x","shapeInfo","logicalShape","isUniform","push","name","enableShapeUniforms","uniformShape","getUniformInfoFromShape","packedInputs","texShape","customUniforms","type","arrayIndex","inputPrefixSnippet","inputSamplingSnippet","inInfo","outShapeInfo","usesPackedTextures","res","getPackedSamplerFromInInfo","getSamplerFromInInfo","inShape","outShape","inputInfo","texName","texFuncSnippet","charAt","toUpperCase","funcName","inRank","outRank","broadcastDims","getCoordsDataType","rankDiff","coordsSnippet","fields","unpackedCoordsSnippet","s","isInputScalar","isOutputScalar","indexOf","getPackedSamplerAtOutputCoords","outTexShape","inTexShape","flatOffset","getSamplerAtOutputCoords","getInputSamplingSnippet","glsl","floatTextureSampleSnippet","getFloatTextureSampleSnippet","outputSamplingSnippet","floatTextureSetOutputSnippet","shaderPrefix","SAMPLE_1D_SNIPPET","SAMPLE_2D_SNIPPET","SAMPLE_3D_SNIPPET","getShaderPrefix","getOutputScalarCoords","packedTexShape","getOutputPacked1DCoords","texelsInLogicalRow","getOutputPacked2DCoords","texelsInBatch","getOutputPacked3DCoords","texelsInBatchN","batches","b","getOutputPackedNDCoords","getPackedOutputSamplingSnippet","getFloatTextureSetRGBASnippet","getOutput1DCoords","getOutput2DCoords","shader_util.getOutputLogicalCoordinatesFromFlatIndexByUniform","coordsFromIndexSnippet","shader_util.getLogicalCoordinatesFromFlatIndex","getOutput3DCoords","getOutput4DCoords","getOutput5DCoords","getOutput6DCoords","getOutputSamplingSnippet","getFloatTextureSetRSnippet","SHADER_PACKED_PREFIX","userCode","texNumR","texNumC","offset","getFlatOffsetUniformName","tNumR","tNumC","getSamplerScalar","getUniformSampler","getSampler1D","keptDims","squeezedShape","params","squeezeInputInfo","getSqueezedParams","getSampler2D","stride0","stride1","getSampler3D","stride2","stride2Str","stride1Str","stride0Str","getSampler4D","stride3","getSampler5D","stride4","getSampler6D","getPackedSamplerScalar","getPackedSampler1D","valuesPerRow","getPackedSampler2D","getPackedSampler3D","rank","getPackedSamplerND","inSize","useSqueezePackedShape","useSqueezeShape","newInputInfo","JSON","parse","stringify","getUniformLocations","gpgpu","webGLProgram","variablesLocations","customUniformLocations","outShapeLocation","outTexShapeLocation","outShapeStridesLocation","infLoc","nanLoc","shouldThrow","varName","variableNames","varLocs","uniform","validateBinaryAndProgram","shapeInfos","inputs","shapeA","input","shapeB","texShapeA","texShapeB","texData","useShapeUniforms","DecodeMatrixProgram","constructor","this","DENSE","DecodeMatrixPackedProgram","EncodeFloatProgram","DOWNLOAD","EncodeFloatPackedProgram","CHANNEL_CHAR_TO_INDEX_MAP","R","G","B","A","EncodeMatrixProgram","inputIsUnsignedByte","usedChannels","mainLoop","usedChannelIndex","curChannel","shader_util.getFlatIndexFrom3D","EncodeMatrixPackedProgram","row","col","channel","webgl_util.createVertexShader","createVertexBuffer","webgl_util.createStaticVertexBuffer","Float32Array","createIndexBuffer","webgl_util.createStaticIndexBuffer","Uint16Array","createAndConfigureTexture","internalFormat","textureFormat","textureType","webgl_util.validateTextureSize","webgl_util.createTexture","tex2d","webgl_util.callAndCheck","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","texStorage2D","getInternalFormatForFloat32MatrixTexture","textureConfig","createFloat32MatrixTexture","tex_util.getUnpackedMatrixTextureShapeWidthHeight","getInternalFormatForFloat16MatrixTexture","createFloat16MatrixTexture","getInternalFormatForUnsignedBytesMatrixTexture","createUnsignedBytesMatrixTexture","UNSIGNED_BYTE","getInternalFormatForPackedMatrixTexture","createPackedMatrixTexture","tex_util.getPackedMatrixTextureShapeWidthHeight","getInternalFormatForFloat16PackedMatrixTexture","createFloat16PackedMatrixTexture","bindVertexProgramAttributeStreams","vertexBuffer","webgl_util.bindVertexBufferToProgramAttribute","uploadDenseMatrixToTexture","dataForUpload","texelDataType","Uint8Array","set","texSubImage2D","uploadPixelDataToTexture","pixels","createBufferFromOutputTexture","gl2","PIXEL_PACK_BUFFER","bufferSizeBytes","bytesPerFloat","STREAM_READ","readPixels","downloadFloat32MatrixFromBuffer","downloadTarget","getBufferSubData","downloadByteEncodedFloatMatrixFromOutputTexture","w","h","downloadPackedMatrixFromBuffer","batch","physicalRows","physicalCols","tex_util.getPackedRGBAArraySizeFromMatrixShape","downloadMatrixFromPackedOutputTexture","packedRGBA","GPGPUContext","glVersion","createVertexArray","bindVertexArray","vao","deleteVertexArray","getVertexArray","VERTEX_ARRAY_BINDING","ext","createVertexArrayOES","bindVertexArrayOES","deleteVertexArrayOES","VERTEX_ARRAY_BINDING_OES","COLOR_BUFFER_FLOAT","parallelCompilationExtension","TEXTURE_FLOAT","TEXTURE_HALF_FLOAT","textureFloatExtension","webgl_util.getExtensionOrThrow","webgl_util.hasExtension","colorBufferFloatExtension","colorBufferHalfFloatExtension","gpgpu_util.createVertexBuffer","indexBuffer","gpgpu_util.createIndexBuffer","webgl_util.createFramebuffer","tex_util.getTextureConfig","debug","dispose","disposed","warn","outputTexture","finish","deleteBuffer","throwIfDisposed","gpgpu_util.createFloat32MatrixTexture","gpgpu_util.createFloat16MatrixTexture","gpgpu_util.createUnsignedBytesMatrixTexture","gpgpu_util.uploadPixelDataToTexture","gpgpu_util.uploadDenseMatrixToTexture","gpgpu_util.createFloat16PackedMatrixTexture","gpgpu_util.createPackedMatrixTexture","deleteMatrixTexture","webgl_util.unbindColorTextureFromFramebuffer","downloadMatrixDriver","gpgpu_util.downloadByteEncodedFloatMatrixFromOutputTexture","gpgpu_util.downloadPackedMatrixFromBuffer","gpgpu_util.downloadFloat32MatrixFromBuffer","createBufferFromTexture","bindTextureToFrameBuffer","result","gpgpu_util.createBufferFromOutputTexture","unbindTextureToFrameBuffer","createAndWaitForFence","fenceContext","createFence","pollFence","query","isFencePassed","sync","SYNC_GPU_COMMANDS_COMPLETE","flush","clientWaitSync","ALREADY_SIGNALED","CONDITION_SATISFIED","beginQuery","endQuery","isQueryAvailable","downloadMatrixFromPackedTexture","gpgpu_util.downloadMatrixFromPackedOutputTexture","gpgpu_util.createVertexShader","webgl_util.createProgram","program2","attachShader","webgl_util.linkProgram","Object","assign","gpgpu_util.bindVertexProgramAttributeStreams","webgl_util.validateProgram","setProgram","deleteProgram","useProgram","webgl_util.getProgramUniformLocationOrThrow","webgl_util.getProgramUniformLocation","getAttributeLocation","getUniformLocationNoThrow","setInputMatrixTexture","inputMatrixTexture","uniformLocation","throwIfNoProgram","webgl_util.bindTextureToProgramUniformSampler","setOutputMatrixTexture","outputMatrixTexture","setOutputMatrixTextureDriver","setOutputPackedMatrixTexture","outputPackedMatrixTexture","setOutputMatrixWriteRegion","startRow","numRows","startColumn","numColumns","setOutputMatrixWriteRegionDriver","setOutputPackedMatrixWriteRegion","debugValidate","webgl_util.validateFramebuffer","executeProgram","boundVao","drawElements","TRIANGLES","UNSIGNED_SHORT","blockUntilAllProgramsCompleted","getQueryTimerExtension","disjointQueryTimerExtension","getQueryTimerExtensionWebGL2","getQueryTimerExtensionWebGL1","createQuery","TIME_ELAPSED_EXT","createQueryEXT","beginQueryEXT","endQueryEXT","async","repeatedTry","getQueryTime","getQueryParameter","QUERY_RESULT","getQueryObjectEXT","QUERY_RESULT_EXT","available","QUERY_RESULT_AVAILABLE","disjoint","GPU_DISJOINT_EXT","QUERY_RESULT_AVAILABLE_EXT","Promise","resolve","addItemToPoll","pollItems","arr","linearSearchLastTrue","itemsToPoll","isDoneFn","resolveFn","scheduleFn","platform","setTimeoutCustom","bind","webgl_util.bindColorTextureToFramebuffer","downloadAndDecode","outputMatrixTextureMaybePacked","y","createSimpleBinaryKernelImpl","op","aShape","bShape","aVals","bVals","assertAndGetBroadcastShape","resultRank","resultStrides","resultSize","getTypedArrayFromDType","aRank","bRank","aStrides","bStrides","aBroadcastDims","bBroadcastDims","indexToLoc","aLoc","aIndex","locToIndex","bLoc","bIndex","addImpl","a","createSimpleUnaryImpl","values","attrs","newValues","getArrayFromDType","ceilImpl","xi","equalImpl","expImpl","exp","expm1Impl","expm1","floorImpl","floor","floorDivImpl","greaterImpl","greaterEqualImpl","lessImpl","lessEqualImpl","logImpl","maximumImpl","aValue","bValue","minimumImpl","multiplyImpl","notEqualImpl","makeSplits","indices","indicesShape","paramsNestedSplits","numParamsDenseValues","valueSlices","numValues","numSplits","outSplits","fill","dim","splits","lastSplit","validateSplits","nrows","rowLength","start","limit","outDim","outSplitsOutDim","delta","j","computeFlatOuterDims","orig","numOutDims","outDims","inDim","getValues","paramsDenseValues","paramsDenseValuesShape","paramsDenseValuesDType","valuesShape","valuesOut","numElements","valueSize","denseM","valuesM","outPos","writeValueSlices","INT32_MAX","RowPartitionType","RaggedTensorToTensorOp","shapeShape","valuesDType","defaultValue","defaultValueShape","rowPartitionValues","rowPartitionValuesShapes","rowPartitionTypeStrings","rowPartitionTypes","getRowPartitionTypesHelper","raggedRank","getRaggedRank","getRowPartitionTypeByDimension","dimension","FIRST_DIM_SIZE","getRowPartitionTensor","getMaxWidth","rowPartitionTensor","VALUE_ROWIDS","getMaxWidthValueRowID","ROW_SPLITS","getMaxWidthRowSplit","static","rowSplit","tensorLength","maxWidth","currentWidth","valueRowIds","indexLength","firstEqualIndex","firstEqualIndexValue","value","tensorShapeFromTensor","tShape","isPartial","makeShape","calculateOutputSize","firstDim","valueShape","validateDefaultValueShape","combineRaggedTensorToTensorShapes","calculateFirstParentOutputIndex","firstDimension","outputIndexMultiplier","firstDimensionOutput","minDimension","currentOutputIndex","calculateOutputIndexRowSplit","parentOutputIndex","outputSize","rowSplitSize","realLength","parentOutputIndexCurrent","calculateOutputIndexValueRowID","indexSize","currentOutputColumn","currentValueRowId","nextValueRowId","calculateOutputIndex","partitionType","getFirstDimensionSize","firstPartitionTensor","firstPartitionType","compute","multiplier","outputTensor","outputIndex","setOutput","valuesBase","outputBase","elementShape","valueElementSize","outputIndexSize","srcShape","tidy","defaultValueTensor","reshape","bCastDefault","broadcastTo","dataSync","srcStart","dstStart","dstEnd","srcI","dstI","src","subarray","copyArray","dst","out","rsqrtImpl","sqrt","sigmoidImpl","sqrtImpl","squaredDifferenceImpl","diff","staticRegexReplaceImpl","pattern","replaceGlobal","rewrite","replace","RegExp","StringNGramsOp","separator","nGramWidths","leftPad","padWidth","preserveShortSequences","encodeString","preserveShort","getPadWidth","nGramWidth","getNumNGrams","createNGrams","splitIndex","outputStartIndex","numNGrams","nGramIndex","leftPadding","rightPadding","numTokens","dataStartIndex","nGramSize","nGram","nextNGramIndex","appendToNGram","str","inputDataSize","splitsSize","prevSplit","validSplits","numBatchItems","nGramsSplits","empty","nGrams","outputStartIdx","dataLength","delimiters","skipEmpty","delimiter","f","token","tokenStart","subImpl","comparePair","valueDiff","select","array","k","left","right","z","sd","sign","swap","vals","resultValues","xVals","weightsVals","weightsDtype","weightsShape","weightsSize","outVals","makeZerosTypedArray","xBuf","weightsBuf","binaryOutput","numCols","outBuf","inputType","Int32Array","from","zero","toTypedArray","resultData","resultShape","simplyConcat","colOffset","decodedData","fromUint8ToStringArray","tIdx","resIdx","indicesData","paramsBuf","numSlices","sliceRank","sliceSize","paramsShape","paramsSize","flattenIndex","indicesBuf","flattenOutputShape","originalLoc","batchIdx","indicesIdx","indicesIndex","originalIndex","stop","step","reduceSize","Number","isNaN","xShape","xDtype","minusOne","createScalarValue","reductionAxes","reduceShape","computeOutAndReduceShapes","outDtype","upcastType","prod","paramsNestedSplitsShapes","outputRaggedRank","numParams","locString","validateIndices","outputNestedSplits","splitsOut","getSplits","outputDenseValues","starts","startsShape","startsDType","limits","limitsShape","deltas","deltasShape","broadcastStarts","broadcastLimits","broadcastDeltas","inSizes","nRows","rtNestedSplits","nVals","rtDenseValues","valueIndex","rowSize","shapesShape","updates","numUpdates","sumDupeIndices","flattenShape","updatesData","TensorBuffer","begin","isContinous","slice_util","isSliceContinous","xStrides","computeFlatOffset","inBuf","outLoc","inLoc","idx","fromStringArrayToUint8","indicesDType","denseShape","indicesCount","denseRows","emptyRowIndicator","reverseIndexMap","getSparseFillEmptyRowsIndicesDenseShapeMismatch","rowsAreOrdered","lastIndicesRow","csrOffset","getSparseFillEmptyRowsNegativeIndexErrorMessage","getSparseFillEmptyRowsOutOfRangeIndexErrorMessage","allRowsFull","rowEmpty","outputIndices","outputValues","fullIndicesCount","filledCount","outputI","startingIndex","inputIndices","inputIndicesShape","inputDType","inputShape","targetShape","denseSize","nnz","outputRank","product","unknownIndex","getSparseReshapeMultipleNegativeOneOutputDimErrorMessage","getSparseReshapeNegativeOutputDimErrorMessage","getSparseReshapeEmptyTensorZeroOutputDimErrorMessage","missing","trunc","getSparseReshapeInputOutputMultipleErrorMessage","getSparseReshapeInputOutputMismatchErrorMessage","inputRank","inputStrides","outputStrides","newIndices","id","segmentIds","isMean","numIndices","inputFlat","numCol","outputRows","getSparseSegmentReductionNegativeSegmentIdsErrorMessage","outputLength","reduce","end","uninitializedIndex","outIndex","nextIndex","getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage","getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage","getSparseSegmentReductionIndicesOutOfRangeErrorMessage","newLoc","dataSplits","batchSize","tokens","maxNumEntries","prevTokensLength","nEntries","c","numBuckets","fingerPrint64","modulo","getLowBitsUnsigned","reps","sorted","lastDim","allTopKVals","allTopKIndices","valAndInd","sort","outOffset","topKVals","topKIndices","perm","xRank","xSize","newStrides","axis","$axis","parseAxisParam","uniqueElements","Map","inputBuffer","uniqueIndices","is1DTensor","element","axisValues","m","existingIndex","uniqueIndex","outputTmpShape","outputBuffer","uniqueElementIndex","addImplCPU","bincountImpl","bincountImplCPU","bincountReduceImpl","bincountReduceImplCPU","castImpl","castImplCPU","ceilImplCPU","concatImpl","concatImplCPU","equalImplCPU","expImplCPU","expm1ImplCPU","floorImplCPU","gatherNdImpl","gatherNdImplCPU","gatherV2Impl","gatherV2ImplCPU","greaterImplCPU","greaterEqualImplCPU","lessImplCPU","lessEqualImplCPU","linSpaceImpl","linSpaceImplCPU","logImplCPU","maxImpl","maxImplCPU","maximumImplCPU","minimumImplCPU","multiplyImplCPU","negImpl","negImplCPU","notEqualImplCPU","prodImpl","prodImplCPU","raggedGatherImpl","raggedGatherImplCPU","raggedRangeImpl","raggedRangeImplCPU","raggedTensorToTensorImpl","raggedTensorToTensorImplCPU","rangeImpl","rangeImplCPU","rsqrtImplCPU","scatterImpl","scatterImplCPU","sigmoidImplCPU","simpleAbsImpl","simpleAbsImplCPU","sliceImpl","sliceImplCPU","sparseFillEmptyRowsImpl","sparseFillEmptyRowsImplCPU","sparseReshapeImpl","sparseReshapeImplCPU","sparseSegmentReductionImpl","sparseSegmentReductionImplCPU","sqrtImplCPU","staticRegexReplaceImplCPU","stridedSliceImpl","stridedSliceImplCPU","stringNGramsImpl","stringNGramsImplCPU","stringSplitImpl","stringSplitImplCPU","stringToHashBucketFastImpl","stringToHashBucketFastImplCPU","subImplCPU","tileImpl","tileImplCPU","topKImpl","topKImplCPU","transposeImpl","transposeImplCPU","uniqueImpl","uniqueImplCPU","shared","getVecChannels","getChannels","PackProgram","channels","outOfBoundsCondition","getOutOfBoundsCondition","setup","getSetup","getOutput","getSourceCoordsArr","dims","coord","cond","innerDims","sourceCoords","ReshapePackedProgram","thisRC","shader_util.getLogicalCoordinatesFromFlatIndexByUniform","TextureManager","acquireTexture","shapeRC","usage","physicalTexType","getPhysicalFromLogicalTextureType","shapeKey","getKeyFromTextureShape","freeTextures","usedTextures","texBytes","computeBytes","numFreeTextures","numUsedTextures","_numBytesFree","newTexture","pop","PACKED_2X2_FLOAT32","PACKED_2X2_FLOAT16","UNPACKED_FLOAT32","UNPACKED_FLOAT16","PACKED_4X1_UNSIGNED_BYTE","_numBytesAllocated","releaseTexture","logicalTexType","deleteTexThreshold","texList","texIndex","logEnabled","total","freeRatio","round","numBytesAllocated","numBytesFree","getNumUsedTextures","getNumFreeTextures","tex","internalFormatForPhysicalTexType","packedWidth","packedHeight","bytesPerElement","numBytesForInternalFormat","UPLOAD","RENDER","getPhysicalTextureForRendering","PIXELS","shapeRowsCol","UnaryOpProgram","opSnippet","ABS","CLONE","UnaryOpPackedProgram","UnpackProgram","getSourceCoords","whereImpl","kernel_impls","binaryCaches","CPU_HANDOFF_SIZE_THRESHOLD","MathBackendWebGL","KernelBackend","nextDataId","gpuResource","super","WeakMap","WeakSet","newGPGPU","binaryCache","gpgpuCreatedLocally","textureManager","numMBBeforeWarning","global","screen","window","devicePixelRatio","DataStorage","engine","numDataIds","pendingDeletes","writeTexture","texHeight","texWidth","makeTensorInfo","inData","dataId","webgl_util.getShapeAs3D","runWebGLProgram","disposeIntermediateTensorInfo","write","checkNumericalProblems","refCount","has","incRef","decRef","move","tensorInfo","disposeData","readSync","complexTensorInfos","unary_op.CLONE","convertAndCacheOnCPU","shouldTimeProgram","activeTimers","now","realValues","real","imagValues","imag","mergeRealAndImagArrays","getValuesFromTexture","downloadWaitMs","pendingRead","subscribers","read","tmpDownloadTarget","decode","tmpData","tex_util.getDenseTexShape","ps","all","dTypeVals","delete","pendingDisposal","removeDataId","readToGPU","options","gpuResouorce","tmpTarget","customTexShape","tensorRef","makeTensorFromTensorInfo","bufferSync","strings","decodeString","webgl_util.canBeRepresented","shouldUsePackedProgram","timerAvailable","time","oldActiveTimers","newActiveTimers","outerMostTime","programTimersStack","flattenedActiveTimerQueries","flatten","filter","flattenedActiveTimerNames","uploadWaitMs","kernelMs","wallMs","sum","ms","memory","unreliable","numBytesInGPU","numBytesInGPUAllocated","numBytesInGPUFree","startTimer","startMs","endMs","endTimer","waitForQueryAndGetTime","timerQuery","force","add","releaseGPUData","key","origDataId","dataRefCount","getTexture","uploadToGPU","getDataInfo","shouldExecuteOnCPU","sizeThreshold","every","getGPGPUContext","where","condition","condVals","packedUnaryOp","outInfo","compileAndRun","outValues","makeOutput","unary_op.ABS","isString","encodedValues","unpackTensor","packTensor","packedReshape","afterShape","input3DShape","webgl_util.getBatchDim","webgl_util.getRowsCols","input3D","afterShapeAs3D","customValues","texSize","outputDtype","customUniformValues","preventEagerUnpackingOfOutput","outData","packedOutput","outPackingScheme","tex_util.PackingScheme","texelShape","outTexUsage","dataToDispose","inputsData","uniformValues","webgl_util.isReshapeFree","savedInput","outputData","keyInputs","concat","hasOffset","xTexShape","shader_compiler.getUniformInfoFromShape","rank1","rank2","rank34","isLogicalShapTexShapeEqual","isScalar","isInOutTexShapeEqual","isTexShapeGreaterThanOne","keyUserCode","gpgpu_math.makeShaderKey","binary","getAndSaveBinary","inputInfos","inShapeInfos","source","shader_compiler.makeShader","gpgpu_math.compileProgram","outTex","uniform1f","NaN","varLoc","varOffsetLoc","varShapeLoc","varTexShapeLoc","uniform1iv","uniform2iv","uniform3iv","uniform4iv","uniform2i","uniform1fv","outShapeLoc","customLoc","customValue","uniform2fv","uniform3fv","uniform4fv","gpgpu_math.runProgram","info","glFlushThreshold","lastGlFlushTime","unpacked","getBinary","getTextureManager","keys","HTMLCanvasElement","remove","floatPrecision","floatPrecisionValue","debugFlag","underflowCheckValue","scalar","epsilon","webgl_util.getTextureShapeFromLogicalShape","isByteArray","Uint8ClampedArray","tempDenseInputTexShape","tempDenseInputHandle","tempDenseInputTexData","preventEagerUnpacking","encodedOutputTarget","outputTexData","float32Values","float32ToTypedArray","texType","warnedAboutMemory","mb","toFixed","checkCompileCompletion","entries","checkCompletion_","checkCompletionAsync_","p","COMPLETION_STATUS_KHR","nextFrame","webgl_util.logShaderSourceAndInfoLog","createTensorFromGPUData","backend","isTexture","makeTensorFromDataId","forceHalfFloat","isBrowser","registerBackend","webgl","BinaryOpProgram","CHECK_NAN_SNIPPET_PACKED","BinaryOpPackedProgram","checkOutOfBounds","checkOutOfBoundsString","identity","args","identityConfig","kernelName","Identity","backendName","kernelFunc","complex","complexInfo","realTensorInfo","imagTensorInfo","complexConfig","Complex","LEAKYRELU","LEAKYRELU_PACKED","leakyReluConfig","LeakyRelu","$alpha","PRELU","PRELU_PACKED","preluConfig","Prelu","unaryKernelFunc","packedOpSnippet","cpuKernelImpl","webglBackend","$dtype","xData","binaryKernelFunc","supportsComplex","aData","bData","complexParts","aPart","bPart","aHandle","bHandle","complexOutput","decodedAVals","decodedBVals","mapActivationToShaderProgram","activation","packed","CHECK_NAN_SNIPPET","MatMulPackedProgram","transposeA","transposeB","addBias","hasPreluActivation","hasLeakyreluActivation","sharedDim","sharedDimensionPacked","aSample","bSample","aSwizzle","bSwizzle","activationSnippet","applyActivationSnippet","addBiasSnippet","batchASnippet","batchBSnippet","COMPLEX_MULTIPLY","BinaryOpComplexProgram","MUL","multiply","realProgram","binaryop_complex_gpu.COMPLEX_MULTIPLY","imagProgram","realPart","imagPart","cpuMultiply","multiplyConfig","Multiply","$shape","inferFromImplicitShape","$xSize","xTexData","reshapeConfig","Reshape","MeanProgram","reduceInfo","divisor","windowSize","outSize","windowSizeNearestVec4","windowSizeVec4Remainder","updateSnippet","denominator","isInt","toPrecision","ReduceProgram","reduceType","initializationValue","compareOp","vecType","reductionType","reductionStages","stages","computeOptimalWindowSize","getReductionStages","previousResult","TransposeProgram","newDim","switched","originalOrder","switchedCoords","getSwitchedCoords","TransposePackedProgram","outputOrder","switchedOrder","nextColumn","getc","keepDims","reductionIndices","origAxes","axes","permutedAxes","getAxesPermutation","sumInputIsTransposed","sumInput","getInnerMostAxes","assertAxesAreInnerMostDims","sumOutShape","expandShapeToKeepDim","reshapedInput","reduced","sumOutType","sumImpl","sumConfig","Sum","transpose","cpuTranspose","transposeConfig","Transpose","batchMatMulImpl","bias","preluActivationWeights","leakyreluAlpha","innerShapeA","innerShapeB","outerShapeA","outerShapeB","outerDimsA","outerDimsB","batchDimA","batchDimB","broadcast_util","a3dShape","b3dShape","a3d","b3d","intermediates","hasBias","hasPreluActivationWeights","hasLeakyreluAlpha","fusedActivation","aVec","bVec","shouldReshapeB","aVec3d","bVec3d","$leakyreluAlpha","outReshaped","_fusedMatMulConfig","_FusedMatMul","absConfig","Abs","acos","acosConfig","Acos","acosh","acoshConfig","Acosh","ADD","addKernelFunc","cpuAdd","addConfig","Add","AddNProgram","shapes","snippets","variable","operation","AddNPackedProgram","addNConfig","AddN","addN","tensors","midIndex","leftSide","rightSide","d1","d2","allConfig","All","permutedX","a2D","anyConfig","Any","ArgMinMaxProgram","firstPass","compOp","indexSnippet","ArgMinMaxPackedProgram","sourceLocSetup","sourceRank","sourceLocDType","inChannel","intChannels","srcRCoords","srcGCoords","srcBCoords","srcACoords","fetchCandidateIdx","fetchValue","getBestIndicesAChannelSnippet","argReduce","bestIndicesA","argReducePacked","argMinMaxReduce","intermediateTensorInfos","xtexData","xUnPacked","reshaped","argMaxConfig","ArgMax","$x","argMinConfig","ArgMin","asin","asinConfig","Asin","asinh","asinhConfig","Asinh","atan","atanConfig","Atan","atan2","atan2Config","Atan2","atanh","atanhConfig","Atanh","Pool2DProgram","convInfo","poolType","computePositions","flattenPositions","includeBatchInIndex","filterWidth","strideHeight","strideWidth","dilationHeight","dilationWidth","effectiveFilterHeight","effectiveFilterWidth","padTop","padInfo","top","padLeft","isAvgPool","batchFlattenPositionStr","inHeight","inWidth","inChannels","flattenPositionStr","filterWidthNearestVec4","filterWidthVec4Remainder","Pool3DProgram","strideDepth","dilationDepth","effectiveFilterDepth","padFront","front","inDepth","avgPoolConfig","AvgPool","filterSize","dimRoundingMode","eitherStridesOrDilationsAreOne","computePool2DInfo","filterHeight","avgPoolProgram","avgPool3DConfig","AvgPool3D","dataFormat","computePool3DInfo","AvgPool2DBackpropProgram","avgMultiplier","outHeight","outWidth","AvgPool3DBackpropProgram","filterDepth","outDepth","avgPool3DGradConfig","AvgPool3DGrad","dy","avgPoolBackpropProgram","avgPoolGradConfig","AvgPoolGrad","batchMatMulConfig","BatchMatMul","BatchNormProgram","meanShape","varianceShape","offsetShape","scaleShape","varianceEpsilon","offsetSnippet","scaleSnippet","BatchNormPackedProgram","batchNormConfig","FusedBatchNorm","mean","variance","scale","finalInputs","SliceProgram","destSize","getCoords","body","SlicePackedProgram","sourceLoc","getChannel","upperRow","lowerRow","$begin","$size","parseSliceParams","assertParamsValid","newTexData","shallowSlice","sliceConfig","Slice","batchToSpaceNDConfig","BatchToSpaceND","blockShape","crops","getReshaped","permuted","getPermuted","reshapedPermuted","getReshapedPermuted","sliceBeginCoords","getSliceBeginCoords","getSliceSize","toDispose","reshapedIntermediate","transposedIntermediate","reshapedIntermediate2","sliced","bincountConfig","Bincount","weights","broadcastArgsConfig","BroadcastArgs","s0","s1","s0Vals","s1Vals","broadcastShape","notEqual","notEqualConfig","NotEqual","realConfig","Real","castConfig","Cast","cast","zerosTensor","tf","zeros","floatX","hasEncodingLoss","resultType","int","zerosTensorInfo","CEIL","ceilConfig","Ceil","ClipProgram","ClipPackedProgram","clipByValueConfig","ClipByValue","clipValueMin","clipValueMax","ComplexAbsProgram","makeComplexComponentTensorInfo","complexTensor","complexPart","complexAbsConfig","ComplexAbs","programInputs","ConcatProgram","computeOutShape","offsets","shift","lastIndex","lastShift","ConcatPackedProgram","lastChannels","allChannels","getValueSnippet","shiftedChannels","channelIdx","imagConfig","Imag","reals","imags","realConcated","imagConcated","r","runOnCpu","tensors2D","innerSize","inputsValShapes","finalOutShape","$inputs","shouldPack","maxTexturesInShader","reducedInputs","subArray","computeTensors2D","reshapedResult","assertParamsConsistent","concatConfig","Concat","Conv2DProgram","inputDepthNearestVec4","inputDepthVec4Remainder","isChannelsLast","rowDim","colDim","channelDim","Conv3DProgram","Conv2DPackedProgram","hasLeakyReluAlpha","texelsAcross","texelC","colIndex","nextTexelOffset","Im2ColPackedProgram","boundsCheckingSnippet","unrolled","getShapeForBatchMatMul","conv2dByMatMul","sharedMatMulDim","outerShapeX","outerShapeFilter","outChannels","xReshaped","originalXTexDataShape","filterReshaped","pointwiseConv","pointwiseConvTexData","conv2dWithIm2Row","x2ColShape","w2Row","im2ColProgram","im2Col","im2ColReshaped","matmulProgram","conv2DConfig","Conv2D","dilations","$dataFormat","convertConv2DDataFormat","computeConv2DInfo","Conv2DDerFilterProgram","filterShape","Conv2DDerInputProgram","Conv3DDerFilterProgram","Conv3DDerInputProgram","conv2DBackpropFilterConfig","Conv2DBackpropFilter","Conv2DDerInputPackedProgram","conv2DBackpropInputConfig","Conv2DBackpropInput","conv3DConfig","Conv3D","computeConv3DInfo","conv3DBackpropFilterV2Config","Conv3DBackpropFilterV2","conv3DBackpropInputConfig","Conv3DBackpropInputV2","cos","CHECK_NAN_SNIPPET_UNARY","cosConfig","Cos","cosh","coshConfig","Cosh","CropAndResizeProgram","imageShape","boxShape","cropSize","method","extrapolationValue","imageHeight","imageWidth","numBoxes","cropHeight","cropWidth","methodId","inputHeightFloat","inputWidthFloat","heightRatio","heightScale","inY","widthRatio","widthScale","inX","cropAndResizeConfig","CropAndResize","image","boxes","boxInd","CumOpType","CumProgram","exclusive","reverse","initVal","Prod","val","idxString","getFinalCoord","cumImpl","permutation","permutedAxis","log2","prevResult","reverseTransposedResult","getUndoAxesPermutation","cumprodConfig","Cumprod","cumsumConfig","Cumsum","denseBincountConfig","DenseBincount","DepthToSpaceProgram","blockSize","getHeightCoordString","getWidthCoordString","getDepthCoordString","getOutputDepthSize","getInputSamplingString","depthToSpaceConfig","DepthToSpace","outputHeight","outputWidth","outputDepth","DepthwiseConv2DProgram","channelMul","DepthwiseConvPacked2DProgram","depthwiseConv2dNativeConfig","DepthwiseConv2dNative","$dilations","DepthwiseConv2DDerFilterProgram","DepthwiseConv2DDerInputProgram","depthwiseConv2dNativeBackpropFilterConfig","DepthwiseConv2dNativeBackpropFilter","depthwiseConv2dNativeBackpropInputConfig","DepthwiseConv2dNativeBackpropInput","DiagProgram","diagConfig","Diag","flat","Dilation2DProgram","dilation2DConfig","Dilation2D","computeDilation2DInfo","einsumConfig","Einsum","equation","allDims","summedDims","idDims","decodeEinsumEquation","checkEinsumDimSizes","path","steps","getEinsumComputePath","nSteps","numDimsRemaining","tensorsToDispose","idTerm","permutationIndices","expandDims","dimsToExpand","getEinsumPermutation","isIdentityPermutation","splice","elu","eluConfig","Elu","eluGradConfig","EluGrad","equal","equalConfig","Equal","erf","ERF_P","ERF_A1","ERF_A2","ERF_A3","ERF_A4","ERF_A5","erfConfig","Erf","expConfig","Exp","$dim","expandDimsConfig","ExpandDims","EXPM1","expm1Config","Expm1","FFTProgram","component","inverse","innerDim","exponentMultiplierSnippet","PI","resultDenominator","opString","fftImpl","inputSize","innerDimensionSize","input2D","complexOutputReshaped","fftConfig","FFT","FillProgram","inferDtype","fillConfig","Fill","FlipLeftRightProgram","flipLeftRightConfig","FlipLeftRight","FLOOR","floorConfig","Floor","floorDiv","floorDivConfig","FloorDiv","FromPixelsProgram","FromPixelsPackedProgram","fromPixelsConfig","FromPixels","numChannels","isVideo","HTMLVideoElement","isImage","HTMLImageElement","videoWidth","videoHeight","newWillReadFrequently","fromPixels2DContext","willReadFrequently","drawImage","tempPixelHandle","fusedConv2DConfig","FusedConv2D","prepareInputs","alignInputWithDataFormat","alignedInput","fusedDepthwiseConv2DConfig","FusedDepthwiseConv2D","shouldPackDepthwiseConv","GatherNDProgram","sliceDim","gatherNdConfig","GatherNd","prepareAndValidate","flattenIndices","flattenX","outValue","GatherProgram","currentCoords","gatherV2","batchDims","parsedAxis","indicesVals","axisDim","segment_util","collectGatherOpShapeInfo","indicesSize","outerSize","dimSize","gatherV2Config","GatherV2","greater","greaterConfig","Greater","greaterEqual","greaterEqualConfig","GreaterEqual","ifftConfig","IFFT","isFinite","isFiniteConfig","IsFinite","isInf","isInfConfig","IsInf","isNaNConfig","IsNan","less","lessConfig","Less","lessEqual","lessEqualConfig","LessEqual","linSpaceConfig","LinSpace","logConfig","Log","log1p","log1pConfig","Log1p","logicalAnd","logicalAndConfig","LogicalAnd","logicalNot","logicalNotConfig","LogicalNot","logicalOr","logicalOrConfig","LogicalOr","LRNProgram","radius","beta","rad","maxD","powOperator","basis","LRNPackedProgram","LRNConfig","LRN","depthRadius","LRNGradProgram","LRNGradConfig","LRNGrad","maxInputIsTransposed","maxInput","maxInputValues","maxOutShape","reshapedOutput","maxConfig","Max","maximum","maximumConfig","Maximum","maxPoolConfig","MaxPool","maxPoolProgram","maxPool3DConfig","MaxPool3D","MaxPool2DBackpropProgram","MaxPool3DBackpropProgram","maxPool3DGradConfig","MaxPool3DGrad","maxPool3dPositionsProgram","maxPool3dPositions","maxPoolBackpropProgram","maxPoolGradConfig","MaxPoolGrad","maxPoolPositionsProgram","maxPoolPositions","maxPoolBackPropProgram","maxPoolWithArgmaxConfig","MaxPoolWithArgmax","indexes","poolOutput","maxPoolWithArgmaxImpl","meanConfig","Mean","meanInputIsTransposed","meanInput","meanInputValues","meanOutShape","meanImpl","minConfig","Min","minimum","minimumConfig","Minimum","MirrorPadProgram","paddings","mode","unpackedCoords","MirrorPadPackedProgram","cLimit","padSetup","mirrorPadConfig","MirrorPad","mod","modConfig","Mod","MultinomialProgram","numOutcomes","numSamples","realDiv","realDivConfig","RealDiv","SUB","sub","cpuSub","subConfig","Sub","softmax","logits","maxLogit","expandedShape","maxLogitsReshaped","sumExp","sumExpReshaped","softmaxConfig","Softmax","multinomialConfig","Multinomial","seed","normalized","probs","negConfig","Neg","nonMaxSuppressionV3Impl","nonMaxSuppressionV3Config","NonMaxSuppressionV3","scores","maxOutputSize","iouThreshold","scoreThreshold","boxesVals","scoresVals","selectedIndices","nonMaxSuppressionV4Impl","nonMaxSuppressionV4Config","NonMaxSuppressionV4","padToMaxOutputSize","validOutputs","nonMaxSuppressionV5Impl","nonMaxSuppressionV5Config","NonMaxSuppressionV5","softNmsSigma","maxOutputSizeVal","iouThresholdVal","scoreThresholdVal","softNmsSigmaVal","selectedScores","OneHotProgram","onValue","offValue","oneHotConfig","OneHot","zerosLike","zerosLikeConfig","ZerosLike","onesLikeConfig","OnesLike","onesLike","packConfig","Pack","assertShapesMatch","expandedT","PadProgram","constantValue","PadPackedProgram","componentSetup","paddingArea","padV2","padV2Config","PadV2","pow","powConfig","Pow","prodConfig","raggedGatherConfig","RaggedGather","$paramsNestedSplits","$paramsNestedSplitsShapes","$paramsDenseValues","$indices","outputDenseValuesShape","outputNestedSplitsTensors","outputDenseValuesTensor","raggedRangeConfig","RaggedRange","$starts","$limits","$deltas","rtNestedSplitsData","rtDenseValuesData","raggedTensorToTensorConfig","RaggedTensorToTensor","rowPartitionTensors","$values","$defaultValue","$rowPartitionValues","range","rangeConfig","Range","reciprocal","reciprocalConfig","Reciprocal","relu","reluConfig","Relu","relu6","relu6Config","Relu6","ResizeBilinearProgram","newHeight","newWidth","alignCorners","halfPixelCenters","oldHeight","oldWidth","effectiveInSize","effectiveOutSize","sourceFracIndexRC","ResizeBilinearPackedProgram","resizeBilinearConfig","ResizeBilinear","images","ResizeBilinearBackpropProgram","dyShape","xHeight","xWidth","yHeight","yWidth","effectiveXSize","effectiveYSize","invHeightScale","invWidthScale","winHeight","winWidth","resizeBilinearGradConfig","ResizeBilinearGrad","ResizeNearestNeighborProgram","roundBase","ResizeNearestNeighborPackedProgram","resizeNearestNeighborConfig","ResizeNearestNeighbor","ResizeNearestNeigborBackpropProgram","resizeNearestNeighborGradConfig","ResizeNearestNeighborGrad","ReverseProgram","inCoords","getInCoord","ReversePackedProgram","nextRow","inCoordsArray","channels1","getR","getG","getB","getA","reverseConfig","Reverse","$dims","RotateProgram","fillValue","fillSnippet","rotateWithOffsetConfig","RotateWithOffset","radians","center","centerX","centerY","getImageCenter","sin","roundConfig","Round","rsqrt","rsqrtConfig","Rsqrt","ScatterProgram","updateSize","indicesRank","updatesRank","summingDupeIndex","defaultIsTensor","stridesType","indicesString","indicesSnippet","updatesString","updatesSnippet","defaultValuesString","defaultValueSnippet","strideString","ScatterPackedProgram","strideString2","scatterNdConfig","ScatterNd","calculateShapes","SearchSortedProgram","numInputs","side","webGL1LoopHead","loopHead","boundComparator","searchSortedConfig","SearchSorted","sortedSequence","SelectProgram","cRank","cCoords","abCoords","cCoordVars","abCoordVars","selectConfig","Select","selu","SELU_SCALEALPHA","SELU_SCALE","seluConfig","Selu","sigmoid","sigmoidConfig","Sigmoid","signConfig","Sign","sinConfig","Sin","sinh","sinhConfig","Sinh","softplus","softplusConfig","Softplus","spaceToBatchNDConfig","SpaceToBatchND","completePaddings","paddedX","reshapedPaddedShape","permutedReshapedPaddedPermutation","reshapedPaddedX","paddedXT","sparseFillEmptyRowsConfig","SparseFillEmptyRows","$denseShape","outputIndicesShape","sparseReshapeConfig","SparseReshape","$inputShape","$inputIndices","sparseSegmentMeanConfig","SparseSegmentMean","$data","$segmentIds","outputDataShape","sparseSegmentSumConfig","SparseSegmentSum","sparseToDenseConfig","SparseToDense","sparseIndices","sparseValues","updatesBuf","splitVConfig","SplitV","numOrSizeSplits","splitSizes","prepareSplitSize","sliceT","SQRT","sqrtConfig","Sqrt","square","squareConfig","Square","SQUARED_DIFFERENCE","squaredDifference","squaredDifferenceConfig","SquaredDifference","staticRegexReplaceConfig","StaticRegexReplace","stringInput","stepConfig","Step","StridedSliceProgram","inputDtype","newCoords","outputAxis","stridedSliceConfig","StridedSlice","beginMask","endMask","ellipsisMask","newAxisMask","shrinkAxisMask","finalShapeSparse","finalShape","isIdentity","sliceDim0","isSimpleSlice","$end","$strides","sliceInfo","resultReshaped","stringNGramsConfig","StringNGrams","$dataSplits","stringSplitConfig","StringSplit","$input","$delimiter","stringToHashBucketFastConfig","StringToHashBucketFast","tan","tanConfig","Tan","tanh","tanhConfig","Tanh","tensorScatterUpdateConfig","TensorScatterUpdate","flattenTensor","TileProgram","tile","buf","tileConfig","Tile","SwapProgram","MergeProgram","disposeIntermediateTensorInfoOrNull","roundUpToPow2","pow2","topKConfig","TopK","TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD","TOPK_K_CPU_HANDOFF_THRESHOLD","xIsPacked","x2D","kPow2","lastDimPow2","getInputs","runSwap","dir","inc","NEGATIVE_INFINITY","prevIndices","len","mergeProgram","prevValues","TransformProgram","interpolation","fillMode","interpolationModeId","fillModeId","transformConfig","Transform","transforms","uniqueConfig","Unique","unpackConfig","Unpack","SegmentOpProgram","segOpInfo","segOpType","numSegments","checkValueOutOfBounds","checkSegmentIdOutOfBounds","kernelConfigs","UnsortedSegmentSum","outputDType","segOpCompute","segOpComputeOptimalWindowSize","rangeInfo","tileInfo","kernelConfig","registerKernel"],"mappings":"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,EAAU1lD,SAAQC,GAAKkvC,EAAQ7M,8BAA8BriC,KACtD4D,CACT,SC9Caw0E,GAKXpsE,YACIqsE,EACAC,GANJrsE,mBAAgB,CAAC,IAAK,cAOpB,MAAM+oC,EAAaqjC,EAAUrjC,WACvBxgB,EAAY6jD,EAAU7jD,UACtBzqB,EAASsuE,EAAUtuE,OACnBwuE,EAAcF,EAAUE,YACxBtjC,EAAUsjC,EAAc/lF,KAAKC,KAAKsX,EAASirC,GACjD/oC,KAAK1J,YAAc,CAACiyB,EAAWygB,GAE/B,MAGMC,EAAqD,EAA7B1iD,KAAK8qB,MAAM03B,EAAa,GAChDG,EAA0BH,EAAa,EAEvCI,EAAgB,sDAItB,IAAIojC,EAAwB,GACxBzuE,EAASirC,EAAa,IACxBwjC,EAAwB,uCACMzuE,kEAMhC,IAAI0uE,EAA4B,GAC5B1uE,EAASirC,EAAa,IACxByjC,EAA4B,uCACE1uE,mDAMhCkC,KAAKrE,SAAW,2GAIV4wE,2GAKAC,2PASEF,eAAyBvjC,+DACmBujC,yEAI1BrjC,2lBAgBlBE,kDAGqBF,mBACS,IAA5BC,8aAiBFC,yBACqC,IAA5BD,obAeTC,yBACqC,IAA5BD,+eAeTC,6DC9CL,MCgFDsjC,GAAgC,CACpCz+B,GACAE,GACAG,GACAG,GACAK,GACAQ,GACAS,GACAI,GACA2B,GACAG,GACAG,GACAG,GACAG,GACAG,GACAG,GACAkC,GACAQ,GACAW,GACAI,GACAE,GACAW,GACAuB,GACAiB,GACAG,GACAY,GACAY,GACAI,GACApX,GACA4X,GACAmC,GACAqC,GACAW,GACAG,GACAE,GACAG,GACAE,GACAI,GACAG,GACAsB,GACAqB,GACAE,GACAE,GACAS,GACAQ,GACAK,GACAE,GACAG,GACAI,GACAG,GACAsB,GACAE,GACAG,GACAS,GACAE,GACAG,GACAG,GACAe,GACAI,GACAG,GACAG,GACAG,GACAI,GACAc,GACAK,GACAK,GACAkB,GACAG,GACAG,GACAtrB,GACAwrB,GACApS,GACAuS,GACAG,GACAE,GACAnrB,GACAsrB,GACAG,GACAE,GACAE,GACAG,GACAG,GACAG,GACAG,GACAU,GACAI,GACAO,GACAG,GACAE,GACAG,GACAI,GACAK,GACAK,GACAK,GACAO,GACAG,GACAS,GACAG,GACAsB,GACA7uB,GACAkvB,GACAG,GACAU,GACAK,GACAhe,GACA2e,GACAK,GACAG,GACAU,GACAG,GACAv1B,GACAy1B,GACAC,GACAS,GACAO,GACAO,GACAxhB,GACAub,GACAoG,GACAG,GACAG,GACAj0B,GACA80B,GACAe,GACAK,GACAG,GACAa,GACAM,GACAQ,GACAG,GACAkB,GACAS,GACAS,GACAK,GACAG,GACAE,GACAE,GACAG,GACAtrB,GACAqe,GACAoN,GACAE,GACAQ,GACAI,GACAI,GACAK,GACAE,GACAK,GACAO,GACAG,GACAI,GACAE,GACAG,GACAM,GACAgB,GACAG,GACAI,GACA3S,GACAzqB,GACAu9B,GACAG,GACAE,GACAM,GACAO,GACAsB,GACA3/B,GACA8/B,GACAE,GDvPoD,CACpDjoC,WAAY0oC,qBACZxoC,YAAa,QACbC,oBArFiCL,GAKjC,MAAMxkC,OAACA,EAAM2jC,QAAEA,EAAOvyB,MAAEA,GAASozB,GAC3BttC,EAACA,EAAC6wB,WAAEA,GAAc/nB,GAClBgtE,YAACA,GAAe57D,EAEhBkZ,EAAQpzB,EAAEtQ,MAAMgF,OAEhBsuD,EAAY,GAElB,IAAIzvB,EAAO,EACX,MAAM86B,EAAc1uD,eAAa+0C,mBAAmB,CAACnhB,GAAOH,GAC5D,IAAIomB,EAAYx5C,EACG,MAAfquD,IACF7U,EAAYjE,GAAU,CAACzsC,OAAQ,CAAC9I,KAAIysC,UAASvyB,MAAO,CAACiZ,KAAMk7B,KAC3DrL,EAAU5iD,KAAKo5C,GACfjmB,EAAO5zB,eAAak1C,iBAAiB,EAAGzhB,GAAO,IAGjD,MAAM7xB,EAAW5B,eAAau4D,aAAalS,gBACvCxM,EAAU9pD,MAAO6jC,EAAMuiD,GACrBxuE,EAAS1X,OAAKC,cAAc,CAAC2pD,EAAU9pD,MAAM6jC,KAC7CkmB,EACF12B,GAAQ,CAACja,OAAQ,CAAC9I,EAAGw5C,GAAY/M,UAASvyB,MAAO,CAACxqB,MAAO,EAAE,EAAG4X,MAClE07C,EAAU5iD,KAAKq5C,GAEf,MAAM08B,EAAchhC,aAAWn1C,EAAEvC,OAE3B24E,EACF,CAACp2E,EAAe61E,EAAiChlD,EAChDpzB,EAAiBq4E,KAChB,MAAM/jD,EAAY/xB,EAAEtQ,MAAM,GACpB4X,EAAStH,EAAEtQ,MAAM,GACjB6iD,EACF5yC,eAAau4D,aAAame,8BACtB/uE,EAAQwuE,GAEVrgF,EAAU,IAAIkgF,GADF,CAACpjC,aAAYjrC,SAAQyqB,YAAW+jD,eACFD,GAC1C33E,EAASuuC,EAAQhH,cAAchwC,EAAS,CAACuK,EAAG6wB,GAAapzB,GAG/D,GAFAulD,EAAU5iD,KAAKlC,GAEXA,EAAOxO,MAAM,KAAOomF,EACtB,OAAO53E,EAET,MAAMo4E,EAAY7Q,GAAM,CACtBh5B,UACAvyB,MAAO,CAACwC,MAAO,EAAG8N,KAAMsrD,EAAarrD,KAAM,EAAGhtB,MAAO,aAEjD84E,EAAWlD,GAAK,CACpBvqE,OAAQ,CAAC9I,EAAGs2E,GACZ7pC,UACAvyB,MAAO,CAACuY,KAAM,CAACnrB,EAASirC,MAG1ByQ,EAAU5iD,KAAKk2E,GACftzB,EAAU5iD,KAAKm2E,GAIf,OADIH,EAAal4E,EAAQ23E,EAAWU,EAAU94E,EAAOq4E,EACxC,EAMb16B,EACFr4B,GAAQ,CAACja,OAAQ,CAAC9I,EAJFo2E,EAChB38B,EAAK,qBAAsB5oB,EAAYslD,EAAaL,IAGjBrpC,UAASvyB,MAAO,CAACxqB,MAAO6R,KAE/D,IAAI6Q,EAASgpC,EACb,GAAmB,MAAfiT,EAAqB,CACvBrL,EAAU5iD,KAAKg7C,GACf,MAAMjoB,EAAOxzB,eAAa+uD,uBAAuBL,GACjDj8C,EAASmjC,GAAU,CAACzsC,OAAQ,CAAC9I,EAAGoS,GAASq6B,UAASvyB,MAAO,CAACiZ,UAI5D,OADA6vB,EAAU1lD,SAAQC,GAAKkvC,EAAQ7M,8BAA8BriC,KACtD6U,CACT,GC2PE0wD,IAGF,IAAK,MAAM0T,KAAgBP,GACzBQ,iBAAeD,mHCvWD"}